Index: app/Repositories/Eloquents/ServiceEloquent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n/**\r\n * Created by PhpStorm.\r\n * UserRequest: mohammedsobhei\r\n * Date: 5/2/18\r\n * Time: 11:43 PM\r\n */\r\n\r\nnamespace App\\Repositories\\Eloquents;\r\n\r\n\r\nuse App\\Models\\Admin;\r\nuse App\\Models\\Service;\r\nuse App\\Repositories\\Interfaces\\Repository;\r\nuse App\\Repositories\\Uploader;\r\nuse Illuminate\\Http\\Request;\r\nuse Illuminate\\Support\\Facades\\Auth;\r\nuse Illuminate\\Support\\Facades\\Config;\r\nuse Spatie\\Permission\\Models\\Role;\r\n\r\nclass ServiceEloquent extends Uploader implements Repository\r\n{\r\n    private $model;\r\n\r\n    public function __construct(Service $model)\r\n    {\r\n        $this->model = $model;\r\n    }\r\n\r\n    function anyData()\r\n    {\r\n\r\n        $data = $this->model->orderByDesc('updated_at');\r\n\r\n        return datatables()->of($data)\r\n            ->editColumn('image', function ($item) {\r\n\r\n                if (isset($item->image))\r\n                    return '<img src=\"' . $item->image . '\" width=\"80px\">';\r\n            })\r\n            ->addColumn('name', function ($item) {\r\n                return $item->name;\r\n            })\r\n            ->editColumn('is_active', function ($service) {\r\n                return ($service->is_active == 1) ?\r\n                    '<span class=\"label label-sm label-success\">Active</span>' : '<span class=\"label label-sm label-danger\">Inactive</span>';\r\n            })\r\n            ->addColumn('action', function ($item) {\r\n                $edit=\"\";\r\n\r\n                $checked = '';\r\n                if ($item->is_active)\r\n                    $checked = 'checked=\"checked\"';\r\n                $activate = '<span class=\"m-switch m-switch m-switch--outline m-switch--icon m-switch--success\" style=\"margin-left:3px;margin-top: 10px;vertical-align: middle;\"><label><input type=\"checkbox\"' . $checked . ' name=\"is_active\" class=\"is_active\" data-id=\"' . $item->id . '\"><span></span></label></span>';\r\n\r\n                $edit = ' <a href=\"' . url(admin_services_url() . '/service-edit/' . $item->id) . '\" class=\"btn btn-circle btn-icon-only purple edit\">\r\n                                        <i class=\"fa fa-edit\"></i>\r\n                                    </a>';\r\n\r\n\r\n                $delete=\"\";\r\n\r\n                    $delete = '   <a href=\"' . url(admin_services_url() . '/service/' . $item->id) . '\" class=\"btn btn-circle btn-icon-only red delete\">\r\n                                        <i class=\"fa fa-trash\"></i>\r\n                                    </a>';\r\n//\r\n\r\n                if(!isset($activate)&& !isset($edit)&& !isset($delete) )\r\n                    return \"\";\r\n\r\n                return $activate . $edit .  $delete ;\r\n\r\n            })->addIndexColumn()\r\n            ->rawColumns(['image' , 'is_active' , 'action'])->toJson();\r\n    }\r\n\r\n    function getAll(array $attributes)\r\n    {\r\n        // TODO: Implement getAll() method.\r\n        $data = $this->model->all();\r\n        if (request()->segment(1) == 'api') {\r\n            return response_api(true, 200, null, $data);\r\n        }\r\n        return $data;\r\n    }\r\n\r\n    function getById($id)\r\n    {\r\n        // TODO: Implement getById() method.\r\n        return $this->model->find($id);\r\n    }\r\n\r\n    function create(array $attributes)\r\n    {\r\n        // TODO: Implement create() method.\r\n        $model = new Service([\r\n            'image' => $this->upload($attributes, 'image'),\r\n            'name' => $attributes['name'],\r\n            'description' => $attributes['description'],\r\n        ]);\r\n        if ($model->save()) {\r\n            return response_api(true, 200, __('app.success'), $model);\r\n        }\r\n        return response_api(false, 422, __('app.error'));\r\n\r\n\r\n    }\r\n\r\n    function update(array $attributes, $id = null)\r\n    {\r\n        // TODO: Implement update() method.\r\n        $model = $this->model->find($id);\r\n        if (isset($model)) {\r\n            if (isset($attributes['image'])) {\r\n                $model->image = $this->upload($attributes, 'image');\r\n            }\r\n            if (isset($attributes['name'])) {\r\n                $model->name = $attributes['name'];\r\n            }\r\n            if (isset($attributes['description'])) {\r\n                $model->description = $attributes['description'];\r\n            }\r\n            if ($model->save()) {\r\n                return response_api(true, 200, __('app.success'), $model);\r\n            }\r\n        }\r\n        return response_api(false, 422, __('app.error'));\r\n    }\r\n\r\n    function delete($id)\r\n    {\r\n        // TODO: Implement delete() method.\r\n        $model = $this->model->find($id);\r\n\r\n        if (isset($model) && $model->delete())\r\n            return response_api(true, 200, __('app.success'), []);\r\n        return response_api(false, 422, __('app.error'), []);\r\n\r\n    }\r\n\r\n    function serviceActivate($id){\r\n        $service = $this->model->find($id['service_id']);\r\n        if (isset($service)) {\r\n            $service->is_active = !$service->is_active;\r\n\r\n            if ($service->save()) {\r\n                if (!$service->is_active) {\r\n                    $action = 'service_deactivated';\r\n                    return response_api(true, 200);\r\n\r\n                }\r\n                return response_api(true, 200);\r\n            }\r\n        }\r\n        return response_api(false, 422);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Repositories/Eloquents/ServiceEloquent.php b/app/Repositories/Eloquents/ServiceEloquent.php
--- a/app/Repositories/Eloquents/ServiceEloquent.php	
+++ b/app/Repositories/Eloquents/ServiceEloquent.php	
@@ -38,9 +38,6 @@
                 if (isset($item->image))
                     return '<img src="' . $item->image . '" width="80px">';
             })
-            ->addColumn('name', function ($item) {
-                return $item->name;
-            })
             ->editColumn('is_active', function ($service) {
                 return ($service->is_active == 1) ?
                     '<span class="label label-sm label-success">Active</span>' : '<span class="label label-sm label-danger">Inactive</span>';
Index: resources/lang/en/app.php
===================================================================
diff --git a/resources/lang/en/app.php b/resources/lang/en/app.php
new file mode 100644
--- /dev/null	
+++ b/resources/lang/en/app.php	
@@ -0,0 +1,10 @@
+<?php
+
+
+return [
+    'success' => 'Submitted Successfully.',
+    'error' => 'Failure action.',
+
+    'error_activation' => 'Sorry, your account has been deactivated by the admin.',
+
+];
Index: vendor/scrivo/highlight.php/HighlightUtilities/functions.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n/* Copyright (c) 2019 Geert Bergman (geert@scrivo.nl), highlight.php\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n * 3. Neither the name of \"highlight.js\", \"highlight.php\", nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nnamespace HighlightUtilities;\r\n\r\nrequire_once __DIR__ . '/_internals.php';\r\nrequire_once __DIR__ . '/_themeColors.php';\r\n\r\n/**\r\n * Get a list of available stylesheets.\r\n *\r\n * By default, a list of filenames without the `.css` extension will be returned.\r\n * This can be configured with the `$filePaths` argument.\r\n *\r\n * @api\r\n *\r\n * @since 9.15.8.1\r\n *\r\n * @param bool $filePaths Return absolute paths to stylesheets instead\r\n *\r\n * @return string[]\r\n */\r\nfunction getAvailableStyleSheets($filePaths = false)\r\n{\r\n    $results = array();\r\n\r\n    $folder = getStyleSheetFolder();\r\n    $dh = @dir($folder);\r\n\r\n    if ($dh) {\r\n        while (($entry = $dh->read()) !== false) {\r\n            if (substr($entry, -4, 4) !== \".css\") {\r\n                continue;\r\n            }\r\n\r\n            if ($filePaths) {\r\n                $results[] = implode(DIRECTORY_SEPARATOR, array($folder, $entry));\r\n            } else {\r\n                $results[] = basename($entry, \".css\");\r\n            }\r\n        }\r\n\r\n        $dh->close();\r\n    }\r\n\r\n    return $results;\r\n}\r\n\r\n/**\r\n * Get the RGB representation used for the background of a given theme as an\r\n * array of three numbers.\r\n *\r\n * @api\r\n *\r\n * @since 9.18.1.1\r\n *\r\n * @param string $name The stylesheet name (with or without the extension)\r\n *\r\n * @throws \\DomainException when no stylesheet with this name exists\r\n *\r\n * @return float[] An array representing RGB numerical values\r\n */\r\nfunction getThemeBackgroundColor($name)\r\n{\r\n    return _getThemeBackgroundColor(_getNoCssExtension($name));\r\n}\r\n\r\n/**\r\n * Get the contents of the given stylesheet.\r\n *\r\n * @api\r\n *\r\n * @since 9.15.8.1\r\n *\r\n * @param string $name The stylesheet name (with or without the extension)\r\n *\r\n * @throws \\DomainException when the no stylesheet with this name exists\r\n *\r\n * @return false|string The CSS content of the stylesheet or FALSE when\r\n *                      the stylesheet content could be read\r\n */\r\nfunction getStyleSheet($name)\r\n{\r\n    $path = getStyleSheetPath($name);\r\n\r\n    return file_get_contents($path);\r\n}\r\n\r\n/**\r\n * Get the absolute path to the folder containing the stylesheets distributed in this package.\r\n *\r\n * @api\r\n *\r\n * @since 9.15.8.1\r\n *\r\n * @return string An absolute path to the folder\r\n */\r\nfunction getStyleSheetFolder()\r\n{\r\n    $paths = array(__DIR__, '..', 'styles');\r\n\r\n    return implode(DIRECTORY_SEPARATOR, $paths);\r\n}\r\n\r\n/**\r\n * Get the absolute path to a given stylesheet distributed in this package.\r\n *\r\n * @api\r\n *\r\n * @since 9.15.8.1\r\n *\r\n * @param string $name The stylesheet name (with or without the extension)\r\n *\r\n * @throws \\DomainException when the no stylesheet with this name exists\r\n *\r\n * @return string The absolute path to the stylesheet with the given name\r\n */\r\nfunction getStyleSheetPath($name)\r\n{\r\n    $name = _getNoCssExtension($name);\r\n    $path = implode(DIRECTORY_SEPARATOR, array(getStyleSheetFolder(), $name)) . \".css\";\r\n\r\n    if (!file_exists($path)) {\r\n        throw new \\DomainException(\"There is no stylesheet with by the name of '$name'.\");\r\n    }\r\n\r\n    return $path;\r\n}\r\n\r\n/**\r\n * Get the directory path for the bundled languages folder.\r\n *\r\n * @api\r\n *\r\n * @since 9.18.1.4\r\n *\r\n * @return string An absolute path to the bundled languages folder\r\n */\r\nfunction getLanguagesFolder()\r\n{\r\n    return __DIR__ . '/../Highlight/languages';\r\n}\r\n\r\n/**\r\n * Get the file path for the specified bundled language definition.\r\n *\r\n * @api\r\n *\r\n * @since 9.18.1.4\r\n *\r\n * @param string $name The slug of the language to look for\r\n *\r\n * @throws \\DomainException when the no definition for this language exists\r\n *\r\n * @return string\r\n */\r\nfunction getLanguageDefinitionPath($name)\r\n{\r\n    $path = getLanguagesFolder() . '/' . $name . '.json';\r\n\r\n    if (!file_exists($path)) {\r\n        throw new \\DomainException(\"There is no language definition for $name\");\r\n    }\r\n\r\n    return $path;\r\n}\r\n\r\n/**\r\n * Convert the HTML generated by Highlighter and split it up into an array of lines.\r\n *\r\n * @api\r\n *\r\n * @since 9.15.6.1\r\n *\r\n * @param string $html An HTML string generated by `Highlighter::highlight()`\r\n *\r\n * @throws \\RuntimeException         when the DOM extension is not available\r\n * @throws \\UnexpectedValueException when the given HTML could not be parsed\r\n *\r\n * @return string[]|false An array of lines of code as strings. False if an error occurred in splitting up by lines\r\n */\r\nfunction splitCodeIntoArray($html)\r\n{\r\n    if (!extension_loaded(\"dom\")) {\r\n        throw new \\RuntimeException(\"The DOM extension is not loaded but is required.\");\r\n    }\r\n\r\n    if (trim($html) === \"\") {\r\n        return array();\r\n    }\r\n\r\n    $dom = new \\DOMDocument();\r\n\r\n    // https://stackoverflow.com/a/8218649\r\n    if (!$dom->loadHTML(mb_convert_encoding($html, \"HTML-ENTITIES\", \"UTF-8\"))) {\r\n        throw new \\UnexpectedValueException(\"The given HTML could not be parsed correctly.\");\r\n    }\r\n\r\n    $xpath = new \\DOMXPath($dom);\r\n    $spans = $xpath->query(\"//span[contains(text(), '\\n') or contains(text(), '\\r\\n')]\");\r\n\r\n    /** @var \\DOMElement $span */\r\n    foreach ($spans as $span) {\r\n        $closingTags = '';\r\n        $openingTags = '';\r\n        $curr = $span;\r\n\r\n        while ($curr->tagName === 'span') {\r\n            $closingTags .= '</span>';\r\n            $openingTags = sprintf('<span class=\"%s\">%s', $curr->getAttribute(\"class\"), $openingTags);\r\n\r\n            $curr = $curr->parentNode;\r\n        }\r\n\r\n        $renderedSpan = $dom->saveHTML($span);\r\n        $finished = preg_replace(\r\n            '/\\R/u',\r\n            $closingTags . PHP_EOL . $openingTags,\r\n            $renderedSpan\r\n        );\r\n        $html = str_replace($renderedSpan, $finished, $html);\r\n    }\r\n\r\n    return preg_split('/\\R/u', $html);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/scrivo/highlight.php/HighlightUtilities/functions.php b/vendor/scrivo/highlight.php/HighlightUtilities/functions.php
--- a/vendor/scrivo/highlight.php/HighlightUtilities/functions.php	
+++ b/vendor/scrivo/highlight.php/HighlightUtilities/functions.php	
@@ -196,56 +196,59 @@
  *
  * @api
  *
+ * @since 9.18.1.6 `RuntimeException` and `UnexpectedValueException` can no longer be thrown.
  * @since 9.15.6.1
  *
  * @param string $html An HTML string generated by `Highlighter::highlight()`
  *
- * @throws \RuntimeException         when the DOM extension is not available
- * @throws \UnexpectedValueException when the given HTML could not be parsed
- *
  * @return string[]|false An array of lines of code as strings. False if an error occurred in splitting up by lines
  */
 function splitCodeIntoArray($html)
 {
-    if (!extension_loaded("dom")) {
-        throw new \RuntimeException("The DOM extension is not loaded but is required.");
-    }
-
     if (trim($html) === "") {
         return array();
     }
 
-    $dom = new \DOMDocument();
+    $queuedPrefix = '';
+    $regexWorkspace = array();
+    $rawLines = preg_split('/\R/u', $html);
 
-    // https://stackoverflow.com/a/8218649
-    if (!$dom->loadHTML(mb_convert_encoding($html, "HTML-ENTITIES", "UTF-8"))) {
-        throw new \UnexpectedValueException("The given HTML could not be parsed correctly.");
+    if ($rawLines === false) {
+        return false;
     }
 
-    $xpath = new \DOMXPath($dom);
-    $spans = $xpath->query("//span[contains(text(), '\n') or contains(text(), '\r\n')]");
+    foreach ($rawLines as &$rawLine) {
+        // If the previous line has been marked as "open", then we'll have something
+        // in our queue
+        if ($queuedPrefix !== '') {
+            $rawLine = $queuedPrefix . $rawLine;
+            $queuedPrefix = '';
+        }
 
-    /** @var \DOMElement $span */
-    foreach ($spans as $span) {
-        $closingTags = '';
-        $openingTags = '';
-        $curr = $span;
+        // Find how many opening `<span>` tags exist on this line
+        preg_match_all('/<span[^>]*+>/u', $rawLine, $regexWorkspace);
+        $openingTags = count($regexWorkspace[0]);
 
-        while ($curr->tagName === 'span') {
-            $closingTags .= '</span>';
-            $openingTags = sprintf('<span class="%s">%s', $curr->getAttribute("class"), $openingTags);
+        // Find all of the closing `</span>` tags that exist on this line
+        preg_match_all('/<\/span>/u', $rawLine, $regexWorkspace);
+        $closingTags = count($regexWorkspace[0]);
 
-            $curr = $curr->parentNode;
+        // If the number of opening tags matches the number of closing tags, then
+        // we don't have any new tags that span multiple lines
+        if ($openingTags === $closingTags) {
+            continue;
         }
 
-        $renderedSpan = $dom->saveHTML($span);
-        $finished = preg_replace(
-            '/\R/u',
-            $closingTags . PHP_EOL . $openingTags,
-            $renderedSpan
-        );
-        $html = str_replace($renderedSpan, $finished, $html);
+        // Find all of the complete `<span>` tags and remove them from a working
+        // copy of the line. Then we'll be left with just opening tags.
+        $workingLine = preg_replace('/<span[^>]*+>[^<]*+<\/span>/u', '', $rawLine);
+        preg_match_all('/<span[^>]*+>/u', $workingLine, $regexWorkspace);
+        $queuedPrefix = implode('', $regexWorkspace[0]);
+
+        // Close all of the remaining open tags on this line
+        $diff = str_repeat('</span>', $openingTags - $closingTags);
+        $rawLine .= $diff;
     }
 
-    return preg_split('/\R/u', $html);
+    return $rawLines;
 }
Index: vendor/laravel/framework/src/Illuminate/Validation/Rules/Dimensions.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Validation\\Rules;\r\n\r\nclass Dimensions\r\n{\r\n    /**\r\n     * The constraints for the dimensions rule.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $constraints = [];\r\n\r\n    /**\r\n     * Create a new dimensions rule instance.\r\n     *\r\n     * @param  array  $constraints;\r\n     * @return void\r\n     */\r\n    public function __construct(array $constraints = [])\r\n    {\r\n        $this->constraints = $constraints;\r\n    }\r\n\r\n    /**\r\n     * Set the \"width\" constraint.\r\n     *\r\n     * @param  int  $value\r\n     * @return $this\r\n     */\r\n    public function width($value)\r\n    {\r\n        $this->constraints['width'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the \"height\" constraint.\r\n     *\r\n     * @param  int  $value\r\n     * @return $this\r\n     */\r\n    public function height($value)\r\n    {\r\n        $this->constraints['height'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the \"min width\" constraint.\r\n     *\r\n     * @param  int  $value\r\n     * @return $this\r\n     */\r\n    public function minWidth($value)\r\n    {\r\n        $this->constraints['min_width'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the \"min height\" constraint.\r\n     *\r\n     * @param  int  $value\r\n     * @return $this\r\n     */\r\n    public function minHeight($value)\r\n    {\r\n        $this->constraints['min_height'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the \"max width\" constraint.\r\n     *\r\n     * @param  int  $value\r\n     * @return $this\r\n     */\r\n    public function maxWidth($value)\r\n    {\r\n        $this->constraints['max_width'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the \"max height\" constraint.\r\n     *\r\n     * @param  int  $value\r\n     * @return $this\r\n     */\r\n    public function maxHeight($value)\r\n    {\r\n        $this->constraints['max_height'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the \"ratio\" constraint.\r\n     *\r\n     * @param  float  $value\r\n     * @return $this\r\n     */\r\n    public function ratio($value)\r\n    {\r\n        $this->constraints['ratio'] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Convert the rule to a validation string.\r\n     *\r\n     * @return string\r\n     */\r\n    public function __toString()\r\n    {\r\n        $result = '';\r\n\r\n        foreach ($this->constraints as $key => $value) {\r\n            $result .= \"$key=$value,\";\r\n        }\r\n\r\n        return 'dimensions:'.substr($result, 0, -1);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Validation/Rules/Dimensions.php b/vendor/laravel/framework/src/Illuminate/Validation/Rules/Dimensions.php
--- a/vendor/laravel/framework/src/Illuminate/Validation/Rules/Dimensions.php	
+++ b/vendor/laravel/framework/src/Illuminate/Validation/Rules/Dimensions.php	
@@ -14,7 +14,7 @@
     /**
      * Create a new dimensions rule instance.
      *
-     * @param  array  $constraints;
+     * @param  array  $constraints
      * @return void
      */
     public function __construct(array $constraints = [])
Index: vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace PhpParser\\Parser;\r\n\r\nuse PhpParser\\Error;\r\nuse PhpParser\\Node;\r\nuse PhpParser\\Node\\Expr;\r\nuse PhpParser\\Node\\Name;\r\nuse PhpParser\\Node\\Scalar;\r\nuse PhpParser\\Node\\Stmt;\r\n\r\n/* This is an automatically GENERATED file, which should not be manually edited.\r\n * Instead edit one of the following:\r\n *  * the grammar files grammar/php5.y or grammar/php7.y\r\n *  * the skeleton file grammar/parser.template\r\n *  * the preprocessing script grammar/rebuildParsers.php\r\n */\r\nclass Php7 extends \\PhpParser\\ParserAbstract\r\n{\r\n    protected $tokenToSymbolMapSize = 392;\r\n    protected $actionTableSize = 1162;\r\n    protected $gotoTableSize = 611;\r\n\r\n    protected $invalidSymbol = 165;\r\n    protected $errorSymbol = 1;\r\n    protected $defaultAction = -32766;\r\n    protected $unexpectedTokenRule = 32767;\r\n\r\n    protected $YY2TBLSTATE = 397;\r\n    protected $numNonLeafStates = 694;\r\n\r\n    protected $symbolToName = array(\r\n        \"EOF\",\r\n        \"error\",\r\n        \"T_THROW\",\r\n        \"T_INCLUDE\",\r\n        \"T_INCLUDE_ONCE\",\r\n        \"T_EVAL\",\r\n        \"T_REQUIRE\",\r\n        \"T_REQUIRE_ONCE\",\r\n        \"','\",\r\n        \"T_LOGICAL_OR\",\r\n        \"T_LOGICAL_XOR\",\r\n        \"T_LOGICAL_AND\",\r\n        \"T_PRINT\",\r\n        \"T_YIELD\",\r\n        \"T_DOUBLE_ARROW\",\r\n        \"T_YIELD_FROM\",\r\n        \"'='\",\r\n        \"T_PLUS_EQUAL\",\r\n        \"T_MINUS_EQUAL\",\r\n        \"T_MUL_EQUAL\",\r\n        \"T_DIV_EQUAL\",\r\n        \"T_CONCAT_EQUAL\",\r\n        \"T_MOD_EQUAL\",\r\n        \"T_AND_EQUAL\",\r\n        \"T_OR_EQUAL\",\r\n        \"T_XOR_EQUAL\",\r\n        \"T_SL_EQUAL\",\r\n        \"T_SR_EQUAL\",\r\n        \"T_POW_EQUAL\",\r\n        \"T_COALESCE_EQUAL\",\r\n        \"'?'\",\r\n        \"':'\",\r\n        \"T_COALESCE\",\r\n        \"T_BOOLEAN_OR\",\r\n        \"T_BOOLEAN_AND\",\r\n        \"'|'\",\r\n        \"'^'\",\r\n        \"'&'\",\r\n        \"T_IS_EQUAL\",\r\n        \"T_IS_NOT_EQUAL\",\r\n        \"T_IS_IDENTICAL\",\r\n        \"T_IS_NOT_IDENTICAL\",\r\n        \"T_SPACESHIP\",\r\n        \"'<'\",\r\n        \"T_IS_SMALLER_OR_EQUAL\",\r\n        \"'>'\",\r\n        \"T_IS_GREATER_OR_EQUAL\",\r\n        \"T_SL\",\r\n        \"T_SR\",\r\n        \"'+'\",\r\n        \"'-'\",\r\n        \"'.'\",\r\n        \"'*'\",\r\n        \"'/'\",\r\n        \"'%'\",\r\n        \"'!'\",\r\n        \"T_INSTANCEOF\",\r\n        \"'~'\",\r\n        \"T_INC\",\r\n        \"T_DEC\",\r\n        \"T_INT_CAST\",\r\n        \"T_DOUBLE_CAST\",\r\n        \"T_STRING_CAST\",\r\n        \"T_ARRAY_CAST\",\r\n        \"T_OBJECT_CAST\",\r\n        \"T_BOOL_CAST\",\r\n        \"T_UNSET_CAST\",\r\n        \"'@'\",\r\n        \"T_POW\",\r\n        \"'['\",\r\n        \"T_NEW\",\r\n        \"T_CLONE\",\r\n        \"T_EXIT\",\r\n        \"T_IF\",\r\n        \"T_ELSEIF\",\r\n        \"T_ELSE\",\r\n        \"T_ENDIF\",\r\n        \"T_LNUMBER\",\r\n        \"T_DNUMBER\",\r\n        \"T_STRING\",\r\n        \"T_STRING_VARNAME\",\r\n        \"T_VARIABLE\",\r\n        \"T_NUM_STRING\",\r\n        \"T_INLINE_HTML\",\r\n        \"T_ENCAPSED_AND_WHITESPACE\",\r\n        \"T_CONSTANT_ENCAPSED_STRING\",\r\n        \"T_ECHO\",\r\n        \"T_DO\",\r\n        \"T_WHILE\",\r\n        \"T_ENDWHILE\",\r\n        \"T_FOR\",\r\n        \"T_ENDFOR\",\r\n        \"T_FOREACH\",\r\n        \"T_ENDFOREACH\",\r\n        \"T_DECLARE\",\r\n        \"T_ENDDECLARE\",\r\n        \"T_AS\",\r\n        \"T_SWITCH\",\r\n        \"T_MATCH\",\r\n        \"T_ENDSWITCH\",\r\n        \"T_CASE\",\r\n        \"T_DEFAULT\",\r\n        \"T_BREAK\",\r\n        \"T_CONTINUE\",\r\n        \"T_GOTO\",\r\n        \"T_FUNCTION\",\r\n        \"T_FN\",\r\n        \"T_CONST\",\r\n        \"T_RETURN\",\r\n        \"T_TRY\",\r\n        \"T_CATCH\",\r\n        \"T_FINALLY\",\r\n        \"T_USE\",\r\n        \"T_INSTEADOF\",\r\n        \"T_GLOBAL\",\r\n        \"T_STATIC\",\r\n        \"T_ABSTRACT\",\r\n        \"T_FINAL\",\r\n        \"T_PRIVATE\",\r\n        \"T_PROTECTED\",\r\n        \"T_PUBLIC\",\r\n        \"T_VAR\",\r\n        \"T_UNSET\",\r\n        \"T_ISSET\",\r\n        \"T_EMPTY\",\r\n        \"T_HALT_COMPILER\",\r\n        \"T_CLASS\",\r\n        \"T_TRAIT\",\r\n        \"T_INTERFACE\",\r\n        \"T_EXTENDS\",\r\n        \"T_IMPLEMENTS\",\r\n        \"T_OBJECT_OPERATOR\",\r\n        \"T_NULLSAFE_OBJECT_OPERATOR\",\r\n        \"T_LIST\",\r\n        \"T_ARRAY\",\r\n        \"T_CALLABLE\",\r\n        \"T_CLASS_C\",\r\n        \"T_TRAIT_C\",\r\n        \"T_METHOD_C\",\r\n        \"T_FUNC_C\",\r\n        \"T_LINE\",\r\n        \"T_FILE\",\r\n        \"T_START_HEREDOC\",\r\n        \"T_END_HEREDOC\",\r\n        \"T_DOLLAR_OPEN_CURLY_BRACES\",\r\n        \"T_CURLY_OPEN\",\r\n        \"T_PAAMAYIM_NEKUDOTAYIM\",\r\n        \"T_NAMESPACE\",\r\n        \"T_NS_C\",\r\n        \"T_DIR\",\r\n        \"T_NS_SEPARATOR\",\r\n        \"T_ELLIPSIS\",\r\n        \"T_NAME_FULLY_QUALIFIED\",\r\n        \"T_NAME_QUALIFIED\",\r\n        \"T_NAME_RELATIVE\",\r\n        \"T_ATTRIBUTE\",\r\n        \"';'\",\r\n        \"']'\",\r\n        \"'{'\",\r\n        \"'}'\",\r\n        \"'('\",\r\n        \"')'\",\r\n        \"'`'\",\r\n        \"'\\\"'\",\r\n        \"'$'\"\r\n    );\r\n\r\n    protected $tokenToSymbol = array(\r\n            0,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,   55,  163,  165,  164,   54,   37,  165,\r\n          160,  161,   52,   49,    8,   50,   51,   53,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,   31,  156,\r\n           43,   16,   45,   30,   67,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,   69,  165,  157,   36,  165,  162,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  158,   35,  159,   57,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,  165,  165,  165,  165,\r\n          165,  165,  165,  165,  165,  165,    1,    2,    3,    4,\r\n            5,    6,    7,    9,   10,   11,   12,   13,   14,   15,\r\n           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,\r\n           27,   28,   29,   32,   33,   34,   38,   39,   40,   41,\r\n           42,   44,   46,   47,   48,   56,   58,   59,   60,   61,\r\n           62,   63,   64,   65,   66,   68,   70,   71,   72,   73,\r\n           74,   75,   76,   77,   78,   79,   80,   81,   82,   83,\r\n           84,   85,   86,   87,   88,   89,   90,   91,   92,   93,\r\n           94,   95,   96,   97,   98,   99,  100,  101,  102,  103,\r\n          104,  105,  106,  107,  108,  109,  110,  111,  112,  113,\r\n          114,  115,  116,  117,  118,  119,  120,  121,  122,  123,\r\n          124,  125,  126,  127,  128,  129,  130,  131,  132,  133,\r\n          134,  135,  136,  137,  138,  139,  140,  141,  142,  143,\r\n          144,  145,  146,  147,  148,  149,  150,  151,  152,  153,\r\n          154,  155\r\n    );\r\n\r\n    protected $action = array(\r\n          130,  131,  132,  555,  133,  134,-32766,  704,  705,  706,\r\n          135,   36, -543, -552,  455,-32766, -543,-32766,-32766,-32766,\r\n         -552, 1152,  778,  927, -549,  969,  970,    0,-32766,-32766,\r\n        -32766, -549,-32766, 1219,-32766,  245,-32766,  962,-32766,-32766,\r\n        -32766,-32766,-32766,  461,-32766,-32766,-32766,-32766,-32766,-32766,\r\n        -32766,-32766,  124, -331,  707, -331,-32766,  388, 1031, 1032,\r\n         1033, 1030, 1029, 1028,-32766,  435,  430,    2,  261,  136,\r\n          371,  711,  712,  713,  714,  391,  789,  397, 1031, 1032,\r\n         1033, 1030, 1029, 1028,  715,  716,  717,  718,  719,  720,\r\n          721,  722,  723,  724,  725,  745,  556,  746,  747,  748,\r\n          749,  737,  738,  372,  373,  740,  741,  726,  727,  728,\r\n          730,  731,  732,  332,  771,  772,  773,  774,  775,  733,\r\n          734,  557,  558,  766,  757,  755,  756,  752,  753, -294,\r\n         -189,  559,  560,  751,  561,  562,  563,  564,  565,  566,\r\n         1235,  456,  783, -503,  889,  754,  567,  568,  928,  137,\r\n        -32766,-32766,-32766,  130,  131,  132,  555,  133,  134,  983,\r\n          704,  705,  706,  135,   36,-32766,-32766,-32766,-32766, -552,\r\n        -32766,-32766,-32766, -552, 1152,  547,  101,  102,  103,  583,\r\n         -549,-32766,-32766,-32766, -549,-32766,-32766,-32766,  245,-32766,\r\n           80,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,\r\n          959,  958,  957,-32766,-32766, -503, -503,  707, 1264,-32766,\r\n          388, 1265,-32766,-32766,-32766,  235,  784,-32766,  778,   19,\r\n         -503,  261,  136,  371,  711,  712,  713,  714,-32766,-32766,\r\n          397,  788, -503,-32766, -509,-32766,-32766,  715,  716,  717,\r\n          718,  719,  720,  721,  722,  723,  724,  725,  745,  556,\r\n          746,  747,  748,  749,  737,  738,  372,  373,  740,  741,\r\n          726,  727,  728,  730,  731,  732,  332,  771,  772,  773,\r\n          774,  775,  733,  734,  557,  558,  766,  757,  755,  756,\r\n          752,  753, -294, -189,  559,  560,  751,  561,  562,  563,\r\n          564,  565,  566,  309,   81,   82,   83,  139,  754,  567,\r\n          568,  681,  137,  729,  699,  700,  701,  702,  703, 1239,\r\n          704,  705,  706,  742,  743,   33, 1238,   84,   85,   86,\r\n           87,   88,   89,   90,   91,   92,   93,   94,   95,   96,\r\n           97,   98,   99,  100,  101,  102,  103,  104,  105,  106,\r\n           31,  263,-32766,-32766,-32766,  104,  105,  106,  577,  263,\r\n         1216,  126, -188,  107,  142,  440,  441,  707,-32766,-32766,\r\n        -32766,  107, -254,-32766,  247,-32766,-32766,-32766,-32766,-32766,\r\n        -32766,  708,  709,  710,  711,  712,  713,  714,  293,-32766,\r\n          776,-32766,-32766,-32766,-32766,-32766,  295,  715,  716,  717,\r\n          718,  719,  720,  721,  722,  723,  724,  725,  745,  768,\r\n          746,  747,  748,  749,  737,  738,  739,  767,  740,  741,\r\n          726,  727,  728,  730,  731,  732,  770,  771,  772,  773,\r\n          774,  775,  733,  734,  735,  736,  766,  757,  755,  756,\r\n          752,  753,  529,  311,  744,  750,  751,  758,  759,  761,\r\n          760,  762,  763,  234,-32766,-32766,-32766,  307,  754,  765,\r\n          764,   48,   49,   50,  486,   51,   52,  481,  397,   18,\r\n          321,   53,   54,  345,   55,-32766,  982,-32766,-32766,-32766,\r\n        -32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,  349,-32767,\r\n        -32767,-32767,-32767,   99,  100,  101,  102,  103,  814,  354,\r\n          815, 1191,  356, 1152,  871,  271,  408,  871,   56,   57,\r\n          409,  814,  410,  815,   58, -188,   59,  240,  241,   60,\r\n           61,   62,   63,   64,   65,   66,   67,-32766,   26,  262,\r\n           68,  412,  487,  411,  672,  967, 1185, 1186,  488, 1150,\r\n         1216, 1154, 1153, 1155, 1183,   40,   23,  489, 1009,  490,\r\n          -82,  491,  147,  492,  969,  970,  493,  494,  786,  429,\r\n          430,   42,   43,  413,  418,  415,  871,   44,  495,  391,\r\n          496,  497,  248,  344,  320, 1159, 1154, 1153, 1155,  793,\r\n          896,  498,  499,  500,  148, 1008,  861,  692,  787,  861,\r\n          967, 1254,  501,  502,  150, 1173, 1174, 1175, 1176, 1170,\r\n         1171,  281,  624,   24,   26,  -14,  151, 1177, 1172,  969,\r\n          970, 1154, 1153, 1155,  282,  -82, 1216, -502,  152,   69,\r\n         1183,  305,  306,  311,   34,  108,  109,  110,  111,  112,\r\n          113,  114,  115,  116,  117,  118,  119,  120,  154, -149,\r\n         -149, -149,  639,  640,  146,  376, 1159, 1159,  861,  615,\r\n          616,   32,  243,   35, -149, 1216, -149,  121, -149,  873,\r\n         -149,  667,  873,  122,  667,  242, 1067, 1069,  501,  502,\r\n          414, 1173, 1174, 1175, 1176, 1170, 1171, -501,  127, -502,\r\n         -502,  496,  497, 1177, 1172, -504,  128,  871,  424,  425,\r\n          847,  896, -107, -107, -502,   71,  442,  443,  306,  311,\r\n         -107,-32766,  432,  433,  -49,  141, -502, 1152, -508,  155,\r\n          156,  780,  157,  -84,-32766,-32766,-32766,  673,-32766,  -76,\r\n        -32766,  873,-32766,  667, -149,-32766, 1216, 1216, 1179,  282,\r\n        -32766,-32766,-32766,  -73,   73,  -71,-32766,-32766,  311, -501,\r\n         -501,  129,-32766,  388,  -70,  -69,-32766, -504, -504,  -68,\r\n        -32766,  -67, 1152,  -66, -501,  -65,  871,  -64,  275,-32766,\r\n        -32766,-32766, -504,-32766,  -45,-32766, -501,-32766,  -16,  861,\r\n        -32766,  145, -107,  264, -504,-32766,-32766,-32766,  682,   72,\r\n          244,-32766,-32766,-32766,  685,  782,  674,-32766,  388, 1152,\r\n          669,  871, -501,  870,  144,-32766,-32766,-32766,-32766,  272,\r\n        -32766,  282,-32766,  273,-32766,   73,   73,-32766, 1216,  311,\r\n          311,  276,-32766,-32766,-32766,  885,-32766,  246,-32766,-32766,\r\n          277,  677, 1152,  314,-32766,  388,   -4,  871,  263,-32766,\r\n        -32766,-32766,-32766,-32766,  107,-32766,  143,-32766,  861,  778,\r\n        -32766,  871,  873,-32766,  667,-32766,-32766,-32766,  625,  647,\r\n          871,-32766,-32766,-32766, -501, -501,  787,-32766,  388, 1152,\r\n         1037,-32766,  969,  970, 1266,-32766,-32766,-32766,-32766, -501,\r\n        -32766,  531,-32766,  861,-32766,  660,  871,-32766,  630,  535,\r\n          683, -501,-32766,-32766,-32766,  138,-32766,  642,-32766,-32766,\r\n         1023,  311, 1152,   20,-32766,  388,  437,  466,  631,-32766,\r\n        -32766,-32766,-32766,-32766,  643,-32766,  286,-32766, -506,  861,\r\n        -32766,  913,  407,  667,  613,-32766,-32766,-32766,-32766,  284,\r\n         -467,-32766,-32766,  861,   46,  283,  282,-32766,  388,  686,\r\n          897,  414,  861,  402,  898,-32766,  294,   38,  280, -232,\r\n         -232, -232,  496,  497, 1007,  414,  873,   26,  667, 1190,\r\n          786,  806,  896, -107, -107, 1192,  496,  497,  861, 1216,\r\n           47, -457,    8, 1183,   22,  847,  896, -107, -107,  347,\r\n         -506, -506,  541,    9, -231, -231, -231,  581, 1180,  887,\r\n          414,   39,  873,  848,  667,   -4,  289,  290,  689,  690,\r\n          852,  496,  497,  937,  914, 1261,  873, -506,  667, -232,\r\n          847,  896, -107, -107,  921,  873,  911,  667,  922,  850,\r\n          909, -537,  502,  123, 1173, 1174, 1175, 1176, 1170, 1171,\r\n         1012, 1015,  291,  292, 1016, 1013, 1177, 1172, 1014, 1020,\r\n         1263,  873,   30,  667, -231,  304,  798,  348,   71, 1205,\r\n         1223,  306,  311, 1257,  618, -535,  346,  668, -107,  125,\r\n         -107,  671,  675,  676,  678,  285,  679,  680, -107, -107,\r\n         -107, -107, -107, -107, -107,  684,  670, -257,  809,  808,\r\n          817,  895,  929,  816, 1262,  894,  892,  893, 1138,  880,\r\n          888,  878,  919,  920, 1260, 1217, 1206, 1224, 1230, 1233,\r\n            0, -509, -508, -507,    1,   27,   28,   37,   41,   45,\r\n           70,   74, -308, -255,   75,   76,   77,   78,   79,  140,\r\n          149,  153,  239,  310,  333,  334,  335,  336,  337,  338,\r\n          339,  340,  341,  342,  343,  403,  404,    0, -254,   12,\r\n           13,   14,   15,   17,  375,  457,  458,  465,  468,  469,\r\n          470,  471,  475,  476,  477,  484,  654, 1163, 1106, 1181,\r\n          984, 1142, -259,  -99,   11,   16,   25,  279,  374,  574,\r\n          578,  605,  659, 1110, 1158, 1107, 1236,    0, -471, 1123,\r\n            0, 1184\r\n    );\r\n\r\n    protected $actionCheck = array(\r\n            2,    3,    4,    5,    6,    7,  115,    9,   10,   11,\r\n           12,   13,  157,    1,   31,   73,  161,    9,   10,   11,\r\n            8,   79,   79,   31,    1,  134,  135,    0,   86,   87,\r\n           88,    8,   90,    1,   92,   37,   94,    1,   30,   97,\r\n           32,   33,   34,  101,  102,  103,  104,    9,   10,   11,\r\n          108,  109,   14,  105,   56,  107,  114,  115,  115,  116,\r\n          117,  118,  119,  120,  122,  105,  106,    8,   70,   71,\r\n           72,   73,   74,   75,   76,  115,    1,   79,  115,  116,\r\n          117,  118,  119,  120,   86,   87,   88,   89,   90,   91,\r\n           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,\r\n          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,\r\n          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,\r\n          122,  123,  124,  125,  126,  127,  128,  129,  130,    8,\r\n            8,  133,  134,  135,  136,  137,  138,  139,  140,  141,\r\n            1,  158,   79,   69,    1,  147,  148,  149,  156,  151,\r\n            9,   10,   11,    2,    3,    4,    5,    6,    7,  161,\r\n            9,   10,   11,   12,   13,    9,   10,   11,   73,  157,\r\n            9,   10,   11,  161,   79,   80,   49,   50,   51,   50,\r\n          157,   86,   87,   88,  161,   90,   30,   92,   37,   94,\r\n          158,   30,   97,   32,   33,   34,   35,  102,  103,  104,\r\n          118,  119,  120,  108,  109,  131,  132,   56,   79,  114,\r\n          115,   82,    9,   10,   11,   14,  153,  122,   79,    8,\r\n          146,   70,   71,   72,   73,   74,   75,   76,    9,   10,\r\n           79,  156,  158,   30,  160,   32,   33,   86,   87,   88,\r\n           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,\r\n           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,\r\n          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,\r\n          119,  120,  121,  122,  123,  124,  125,  126,  127,  128,\r\n          129,  130,  161,  161,  133,  134,  135,  136,  137,  138,\r\n          139,  140,  141,   69,    9,   10,   11,  158,  147,  148,\r\n          149,  158,  151,    2,    3,    4,    5,    6,    7,    1,\r\n            9,   10,   11,   12,   13,   30,    8,   32,   33,   34,\r\n           35,   36,   37,   38,   39,   40,   41,   42,   43,   44,\r\n           45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\r\n            8,   56,    9,   10,   11,   52,   53,   54,    1,   56,\r\n           81,    8,    8,   68,    8,  131,  132,   56,    9,   10,\r\n           11,   68,  161,   30,    8,   32,   33,   34,   35,   36,\r\n           37,   70,   71,   72,   73,   74,   75,   76,    8,   30,\r\n           79,   32,   33,   34,   35,   36,    8,   86,   87,   88,\r\n           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,\r\n           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,\r\n          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,\r\n          119,  120,  121,  122,  123,  124,  125,  126,  127,  128,\r\n          129,  130,   84,  164,  133,  134,  135,  136,  137,  138,\r\n          139,  140,  141,   96,    9,   10,   11,    8,  147,  148,\r\n          149,    2,    3,    4,    5,    6,    7,  105,   79,  107,\r\n            8,   12,   13,    8,   15,   30,    1,   32,   33,   34,\r\n           35,   36,   37,   38,   39,   40,   41,   42,    8,   43,\r\n           44,   45,   46,   47,   48,   49,   50,   51,  105,    8,\r\n          107,  143,    8,   79,    1,   30,    8,    1,   49,   50,\r\n            8,  105,    8,  107,   55,  161,   57,   58,   59,   60,\r\n           61,   62,   63,   64,   65,   66,   67,    9,   69,   70,\r\n           71,   72,   73,    8,   31,  115,   77,   78,   79,  115,\r\n           81,  152,  153,  154,   85,   86,   87,   88,  159,   90,\r\n           31,   92,   14,   94,  134,  135,   97,   98,  152,  105,\r\n          106,  102,  103,  104,  105,  106,    1,  108,  109,  115,\r\n          116,  117,   37,  114,  115,    1,  152,  153,  154,    8,\r\n          126,  122,  123,  124,   14,  156,   83,  158,   81,   83,\r\n          115,   84,  133,  134,   14,  136,  137,  138,  139,  140,\r\n          141,  142,   74,   75,   69,   31,   14,  148,  149,  134,\r\n          135,  152,  153,  154,  155,   96,   81,   69,   14,  160,\r\n           85,  162,  163,  164,   16,   17,   18,   19,   20,   21,\r\n           22,   23,   24,   25,   26,   27,   28,   29,   14,   74,\r\n           75,   76,   74,   75,  100,  101,    1,    1,   83,  110,\r\n          111,  144,  145,   14,   89,   81,   91,   16,   93,  156,\r\n           95,  158,  156,   16,  158,   37,   58,   59,  133,  134,\r\n          105,  136,  137,  138,  139,  140,  141,   69,   16,  131,\r\n          132,  116,  117,  148,  149,   69,   16,    1,  105,  106,\r\n          125,  126,  127,  128,  146,  160,  105,  106,  163,  164,\r\n          126,   73,  127,  128,   31,   16,  158,   79,  160,   16,\r\n           16,   79,   16,   31,   86,   87,   88,   31,   90,   31,\r\n           92,  156,   94,  158,  159,   97,   81,   81,    1,  155,\r\n          102,  103,  104,   31,  160,   31,  108,  109,  164,  131,\r\n          132,   31,  114,  115,   31,   31,   73,  131,  132,   31,\r\n          122,   31,   79,   31,  146,   31,    1,   31,   30,   86,\r\n           87,   88,  146,   90,   31,   92,  158,   94,   31,   83,\r\n           97,   31,  126,   31,  158,  102,  103,  104,   31,  151,\r\n           37,  108,  109,   73,   31,  153,   31,  114,  115,   79,\r\n          158,    1,   69,   31,   31,  122,   86,   87,   88,   35,\r\n           90,  155,   92,   35,   94,  160,  160,   97,   81,  164,\r\n          164,   35,  102,  103,  104,   37,   73,   37,  108,  109,\r\n           35,   31,   79,   35,  114,  115,    0,    1,   56,   86,\r\n           87,   88,  122,   90,   68,   92,   69,   94,   83,   79,\r\n           97,    1,  156,  115,  158,  102,  103,  104,   89,   76,\r\n            1,  108,  109,   73,  131,  132,   81,  114,  115,   79,\r\n           81,   84,  134,  135,   82,  122,   86,   87,   88,  146,\r\n           90,   84,   92,   83,   94,   91,    1,   97,   95,   88,\r\n           31,  158,  102,  103,  104,  158,   73,   93,  108,  109,\r\n          121,  164,   79,   96,  114,  115,   96,   96,   99,   86,\r\n           87,   88,  122,   90,   99,   92,  113,   94,   69,   83,\r\n           97,  156,  126,  158,  112,  102,  103,  104,  115,  130,\r\n          146,  108,  109,   83,   69,  129,  155,  114,  115,  159,\r\n          126,  105,   83,  107,  126,  122,  129,  156,  112,   99,\r\n          100,  101,  116,  117,    1,  105,  156,   69,  158,  143,\r\n          152,  125,  126,  127,  128,  143,  116,  117,   83,   81,\r\n           69,  146,  146,   85,  146,  125,  126,  127,  128,  146,\r\n          131,  132,  150,  147,   99,  100,  101,  150,  157,  151,\r\n          105,  156,  156,  159,  158,  159,  131,  132,  156,  156,\r\n          156,  116,  117,  156,  156,  159,  156,  158,  158,  159,\r\n          125,  126,  127,  128,  156,  156,  156,  158,  156,  156,\r\n          156,  160,  134,  158,  136,  137,  138,  139,  140,  141,\r\n          156,  156,  131,  132,  156,  156,  148,  149,  156,  156,\r\n          159,  156,  158,  158,  159,  158,  157,  146,  160,  157,\r\n          157,  163,  164,  157,  157,  160,  158,  158,  105,  158,\r\n          107,  158,  158,  158,  158,  112,  158,  158,  115,  116,\r\n          117,  118,  119,  120,  121,  158,  158,  161,  159,  159,\r\n          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,\r\n          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,\r\n           -1,  160,  160,  160,  160,  160,  160,  160,  160,  160,\r\n          160,  160,  159,  161,  160,  160,  160,  160,  160,  160,\r\n          160,  160,  160,  160,  160,  160,  160,  160,  160,  160,\r\n          160,  160,  160,  160,  160,  160,  160,   -1,  161,  161,\r\n          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,\r\n          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,\r\n          161,  161,  161,  161,  161,  161,  161,  161,  161,  161,\r\n          161,  161,  161,  161,  161,  161,  161,   -1,  162,  162,\r\n           -1,  163\r\n    );\r\n\r\n    protected $actionBase = array(\r\n            0,   -2,  151,  555,  816,  830,  865,  379,  717,  622,\r\n          862,  676,  780,  780,  839,  780,  493,  745,  301,  301,\r\n          -57,  301,  301,  496,  496,  496,  618,  618,  618,  618,\r\n          -58,  -58,   95,  700,  733,  770,  663,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,  803,  803,\r\n          803,  803,  803,  803,  803,  803,  803,  803,   75,   -8,\r\n          347,  629,  986,  992,  988,  993,  984,  983,  987,  989,\r\n          994,  915,  916,  753,  917,  918,  919,  920,  990,  877,\r\n          985,  991,  285,  285,  285,  285,  285,  285,  285,  285,\r\n          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,\r\n          285,  285,  285,  508,   38,  219,  141,  141,  141,  141,\r\n          141,  141,  141,  141,  141,  141,  141,  141,  141,  141,\r\n          141,  141,  141,  141,  141,  141,  141,  141,  141,  141,\r\n          156,  156,  156,  203,  525,  525,    8,  598,  161,  868,\r\n          868,  868,  868,  868,  868,  868,  868,  868,  868,  349,\r\n          333,  435,  435,  435,  435,  435,  436,  436,  436,  436,\r\n          933,  564,  636,  635,  465,  -52,  127,  127,  718,  718,\r\n          759,  410,  410,  410,  444, -109, -109, -109,   74,  538,\r\n          396,  348,  414,  414,  414,  414,  414,  802,  998,  139,\r\n          139,  139,  139,  414,  414,  414,  606,  713,  713,  881,\r\n          293,  293,  293,  713,  383,  777,  497,  383,  497,  129,\r\n          793,   32,  -40, -145,  793,  829,  845,   23,   12,  788,\r\n          573,  788,  767,  863,  898,  995,   82,  789,  913,  795,\r\n          914,  224,  678,  981,  981,  981,  981,  981,  981,  981,\r\n          981,  981,  981,  981,  269,  982,   63,  269,  269,  269,\r\n          529,   63,  518,  558,   63,  778,  982,   75,  805,   75,\r\n           75,   75,   75,  944,   75,   75,   75,   75,   75,   75,\r\n          949,  727,  723,  692,  -17,   75,   -8,  143,  143,  419,\r\n           36,  143,  143,  143,  143,   75,   75,  565,  573,  762,\r\n          812,  581,  817,  344,  762,  762,  762,  509,  121,  201,\r\n          122,  352,  750,  750,  768,  769,  924,  924,  750,  765,\r\n          750,  769,  929,  750,  768,  768,  750,  924,  768,  761,\r\n          343,  488,  452,  470,  768,  768,  492,  924,  370,  768,\r\n          768,  750,  750,  750,  797,  768,  494,  750,  356,  346,\r\n          750,  750,  768,  768,  797,  786,   59,  779,  924,  924,\r\n          924,  797,  455,  779,  779,  822,  823,  792,  732,  439,\r\n          378,  561,  332,  768,  732,  732,  750,  481,  792,  732,\r\n          792,  732,  818,  732,  732,  732,  792,  732,  765,  484,\r\n          732,  768,  515,  211,  732,   27,  930,  931,  672,  934,\r\n          927,  935,  955,  936,  937,  879,  794,  798,  942,  928,\r\n          938,  926,  925,  752,  631,  637,  806,  764,  923,  756,\r\n          756,  756,  921,  756,  756,  756,  756,  756,  756,  756,\r\n          756,  631,  811,  813,  776,  781,  945,  652,  660,  796,\r\n          814,  996,  997,  944,  976,  939,  771,  679,  962,  946,\r\n          760,  867,  947,  948,  963,  977,  978,  826,  757,  861,\r\n          899,  869,  950,  883,  756,  930,  937,  928,  938,  926,\r\n          925,  716,  714,  710,  712,  708,  704,  694,  703,  730,\r\n          875,  841,  872,  949,  922,  631,  873,  958,  864,  964,\r\n          965,  878,  790,  772,  876,  900,  951,  952,  953,  884,\r\n          979,  885,  815,  959,  896,  966,  791,  901,  967,  968,\r\n          969,  970,  886,  902,  888,  824,  749,  932,  773,  903,\r\n          528,  766,  775,  956,  560,  943,  889,  904,  905,  971,\r\n          972,  973,  906,  907,  940,  827,  960,  784,  961,  957,\r\n          828,  838,  570,  754,  758,  582,  594,  908,  909,  941,\r\n          737,  763,  840,  842,  980,  910,  614,  843,  683,  911,\r\n          975,  684,  686,  774,  897,  808,  783,  787,  954,  743,\r\n          844,  912,  854,  855,  858,  974,  859,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,  449,  449,  449,  449,  449,\r\n          449,  301,  301,  301,  301,  449,  449,  449,  449,  449,\r\n          449,  449,    0,    0,  301,    0,    0,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,\r\n          449,  449,  285,  285,  285,  285,  285,  285,  285,  285,\r\n          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,\r\n          285,  285,  285,  285,  285,  285,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,  285,  285,  285,\r\n          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,\r\n          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,\r\n          285,  285,  285,  285,  285,  285,  285,  285,  414,  414,\r\n          285,    0,  285,  414,  414,  414,  414,  414,  414,  414,\r\n          414,  414,  414,  285,  285,  285,  285,  285,  285,  285,\r\n          293,  293,  293,  293,  761,  414,  414,  414,  414,  -37,\r\n          293,  293,  414,  414,  -37,  414,  414,  414,  761,  414,\r\n          414,  414,    0,    0,   63,  497,    0,    0,    0,    0,\r\n            0,  497,  497,  269,  269,  269,  269,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,   63,  497,\r\n            0,   63,    0,  765,  414,  269,  761,  308,  414,    0,\r\n            0,    0,    0,   63,  765,   63,  497,  143,   75,  308,\r\n            0,  534,  534,  534,  534,    0,  573,  761,  761,  761,\r\n          761,  761,  761,  761,  761,  761,  761,  761,    0,  761,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,  765,\r\n          768,    0,  924,    0,    0,    0,    0,  750,    0,    0,\r\n            0,    0,    0,    0,  750,  929,  768,  768,    0,    0,\r\n            0,    0,    0,    0,  765,    0,    0,    0,    0,    0,\r\n            0,    0,    0,  756,  790,    0,  790,    0,  756,  756,\r\n          756\r\n    );\r\n\r\n    protected $actionDefault = array(\r\n            3,32767,   99,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,   97,\r\n        32767,32767,32767,32767,32767,32767,  555,  555,  555,  555,\r\n          236,   99,32767,32767,32767,32767,  431,  350,  350,  350,\r\n        32767,32767,  499,  499,  499,  499,  499,  499,32767,32767,\r\n        32767,32767,32767,32767,  431,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,   97,32767,32767,32767,\r\n           35,    5,    6,    8,    9,   48,   15,32767,32767,32767,\r\n        32767,32767,   99,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,  548,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,  435,  414,  415,  417,  418,  349,  500,  554,\r\n          293,  551,  348,  142,  305,  295,  224,  296,  240,  241,\r\n          267,  345,  146,  379,  432,  381,  430,  434,  380,  355,\r\n          360,  361,  362,  363,  364,  365,  366,  367,  368,  369,\r\n          370,  371,  372,  353,  354,  433,  436,  437,  440,  441,\r\n          411,  410,  409,  377,32767,32767,  378,  352,  382,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,   99,32767,  384,\r\n          383,  400,  401,  398,  399,  402,  403,  404,  405,  406,\r\n        32767,32767,32767,32767,32767,  328,  391,  392,  284,  284,\r\n          330,32767,32767,32767,  108,32767,32767,32767,  493,  408,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,   99,32767,   97,  495,  374,  376,  463,\r\n          386,  387,  385,  356,32767,  470,32767,   99,  472,32767,\r\n        32767,32767,32767,32767,32767,  494,32767,  501,  501,32767,\r\n          456,   97,32767,32767,32767,32767,  262,32767,32767,32767,\r\n        32767,  562,  456,  107,  107,  107,  107,  107,  107,  107,\r\n          107,  107,  107,  107,32767,  107,32767,32767,32767,   97,\r\n          185,32767,  250,  252,   99,  516,  190,32767,  475,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,  468,  190,  190,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,  456,  396,\r\n          135,32767,  135,  501,  388,  389,  390,  458,  501,  501,\r\n          501,32767,32767,32767,  190,32767,  473,  473,   97,   97,\r\n           97,   97,  468,32767,  190,  190,32767,32767,  190,  108,\r\n           96,   96,   96,   96,  190,  190,   96,  100,   98,  190,\r\n          190,32767,32767,32767,  205,  190,   96,32767,   98,   98,\r\n        32767,32767,  190,  190,  205,  207,   98,  209,32767,  520,\r\n          521,  205,   98,  209,  209,  229,  229,  447,  286,   98,\r\n           96,   98,   98,  190,  286,  286,32767,   98,  447,  286,\r\n          447,  286,  192,  286,  286,  286,  447,  286,32767,   98,\r\n          286,  190,   96,   96,  286,32767,32767,32767,  458,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,  488,32767,  505,  518,  394,\r\n          395,  397,  503,  419,  420,  421,  422,  423,  424,  425,\r\n          427,  550,32767,  462,32767,32767,32767,32767,  304,  560,\r\n        32767,  560,32767,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,  561,32767,  501,\r\n        32767,32767,32767,32767,  393,    7,   74,   41,   42,   50,\r\n           56,  479,  480,  481,  482,  476,  477,  483,  478,32767,\r\n          484,  526,32767,32767,  502,  553,32767,32767,32767,32767,\r\n        32767,32767,  135,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,  488,32767,  133,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,  501,32767,32767,\r\n        32767,  281,  283,32767,32767,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,32767,  501,\r\n        32767,32767,32767,  269,  271,32767,32767,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,32767,  266,32767,\r\n        32767,  344,32767,32767,32767,32767,  324,32767,32767,32767,\r\n        32767,32767,32767,32767,32767,32767,32767,  148,  148,    3,\r\n            3,  307,  148,  148,  148,  307,  307,  148,  307,  307,\r\n          148,  148,  148,  148,  148,  148,  180,  244,  247,  229,\r\n          229,  148,  316,  148\r\n    );\r\n\r\n    protected $goto = array(\r\n          190,  190,  655,  781,  663,  399,  629,  964,  971,  972,\r\n          393,  297,  298,  317,  549,  303,  398,  318,  400,  607,\r\n          361,  365,  534,  572,  576,  161,  161,  161,  161,  187,\r\n          187,  171,  173,  209,  191,  204,  187,  187,  187,  187,\r\n          187,  188,  188,  188,  188,  188,  188,  182,  183,  184,\r\n          185,  186,  206,  204,  207,  509,  510,  389,  511,  513,\r\n          514,  515,  516,  517,  518,  519,  520, 1053,  162,  163,\r\n          164,  189,  165,  166,  167,  160,  168,  169,  170,  172,\r\n          203,  205,  208,  230,  233,  236,  238,  249,  250,  251,\r\n          252,  253,  254,  255,  256,  257,  258,  259,  266,  267,\r\n          300,  301,  302,  394,  395,  396,  554,  210,  211,  212,\r\n          213,  214,  215,  216,  217,  218,  219,  220,  221,  222,\r\n          223,  224,  174,  225,  175,  192,  193,  194,  231,  182,\r\n          183,  184,  185,  186,  206, 1053,  195,  176,  177,  178,\r\n          196,  192,  179,  232,  197,  159,  198,  226,  180,  199,\r\n          227,  228,  181,  229,  200,  201,  202,  807,  611,  611,\r\n          804,  274,  274,  274,  274,  976,  973,  974,  592,  626,\r\n         1147,  594,  594,  571,  533,  526, 1182, 1182, 1182, 1182,\r\n         1182, 1182, 1182, 1182, 1182, 1182, 1250, 1250,  986,  328,\r\n          812, 1027,  860,  855,  856,  869, 1026,  813,  857,  810,\r\n          858,  859,  811,  803, 1251, 1251,  805, 1250,  863,  912,\r\n          936,  910,  910,  908,  910,  687,  363,  526, 1003, 1004,\r\n          533, 1253,  525,  945,  940, 1251,  542,  543,  820, 1148,\r\n          838,  370,  552,  832,  308,  288,  819,  573,  864,  795,\r\n          865, 1200, 1200,  785,  587,  588, 1200, 1200, 1200, 1200,\r\n         1200, 1200, 1200, 1200, 1200, 1200, 1151, 1151, 1151,  968,\r\n         1149, 1208, 1209,  968,  968,  472,  968,  968,  968,  779,\r\n          968,  968,  968, 1232, 1232, 1232, 1232, 1151, 1151, 1151,\r\n         1151, 1151,  785,   21,  785,  546, 1198, 1198, 1151, 1151,\r\n         1151, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,\r\n         1198,  523,  523,  523,  325,  876,  512,  512,  392,  877,\r\n          582,  512,  512,  512,  512,  512,  512,  512,  512,  512,\r\n          512, 1240,  427,  906,  906,  906,  906,  387,  387,  387,\r\n          387,  602,  604,  427,  900,  907,  540,  904,  379,  662,\r\n          688,  606,  608,  933,    5,  627,    6,  539,  645,  649,\r\n          947,  653,  661,  943,  586,  377,  378,  800, 1019,  570,\r\n          635,  666,  636,  359,  381,  382,  383,  453,  646,  652,\r\n          652,  384,  658, 1017,  454,  323,  580,  595,  598,  599,\r\n          600,  601,  619,  620,  621,  665,  527,  537, 1267,  450,\r\n         1225, 1226,  527,  545,  537,  800,  628,  362, 1101,  528,\r\n          434,  521,  521,  521,  521, 1227, 1228, 1132,  890,  405,\r\n          575, 1133, 1136,  891, 1137,  444,  553,  445,  419,  419,\r\n          419,  830,  329,  330, 1258, 1259, 1222, 1222, 1222,  622,\r\n          623,  431,  637,  638, 1211,  439,  439,  550,  585,  881,\r\n         1041,  797,  319,  833,  821,  991,  439,  590,  995,  825,\r\n          828,  369,  822,  952, 1234, 1234, 1234, 1234,  915,  648,\r\n          824,  955,  632,  931,  473,  691,  474,  992,  818, 1144,\r\n          451,  996,  480,    0,  834, 1036, 1218,  917,    0,    0,\r\n         1143,    0,  905,    0,    0,    0,    0,    0,  528,    0,\r\n            0,  419,  419,  419,  419,  419,  419,  419,  419,  419,\r\n          419,  419,  800,  419, 1034,  837,    0,    0,    0,  994,\r\n            0,    0, 1220, 1220,  994,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0, 1146,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,  270,  524,  524,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,    0,  950,\r\n          950\r\n    );\r\n\r\n    protected $gotoCheck = array(\r\n           41,   41,   71,    6,    8,   64,   64,  105,  105,  105,\r\n           64,   64,   64,   64,   64,   64,   64,   64,   64,   64,\r\n           57,   57,   57,   57,   57,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   14,  107,  107,\r\n           25,   22,   22,   22,   22,  107,  107,  107,   54,   54,\r\n           19,   99,   99,  114,   74,   74,   99,   99,   99,   99,\r\n           99,   99,   99,   99,   99,   99,  164,  164,  111,   88,\r\n           14,  128,   14,   14,   14,   14,  128,   14,   14,   14,\r\n           14,   14,   14,   24,  165,  165,   26,  164,   14,   48,\r\n           24,   24,   24,   24,   24,   24,   74,   74,   14,   14,\r\n           74,  164,   24,   24,   24,  165,   74,   74,   34,   19,\r\n           44,   74,   74,   34,  151,  151,   34,   74,   63,   19,\r\n           63,  152,  152,   11,   74,   74,  152,  152,  152,  152,\r\n          152,  152,  152,  152,  152,  152,   71,   71,   71,   71,\r\n           19,   19,   19,   71,   71,   74,   71,   71,   71,    5,\r\n           71,   71,   71,    8,    8,    8,    8,   71,   71,   71,\r\n           71,   71,   11,   74,   11,  154,  153,  153,   71,   71,\r\n           71,  153,  153,  153,  153,  153,  153,  153,  153,  153,\r\n          153,   18,   18,   18,  161,   71,  155,  155,   12,   71,\r\n           12,  155,  155,  155,  155,  155,  155,  155,  155,  155,\r\n          155,  163,   18,   18,   18,   18,   18,   23,   23,   23,\r\n           23,   81,   81,   18,   18,   18,   47,   84,   84,   84,\r\n           47,   47,   47,   94,   45,   47,   45,    8,   47,   47,\r\n           47,   47,   47,   47,    8,   78,   78,   21,    7,    7,\r\n           78,    7,   78,   60,   78,   78,   78,   80,   78,    7,\r\n            7,   78,    7,    7,   80,   78,   77,   77,   77,   77,\r\n           77,   77,   77,   77,   77,   77,    8,    8,   13,  158,\r\n          158,  158,    8,   95,    8,   21,   62,    8,  135,   13,\r\n            8,   98,   98,   98,   98,  160,  160,   76,   76,  103,\r\n           98,   76,   76,   76,   76,    8,    8,    8,   22,   22,\r\n           22,    8,   88,   88,    8,    8,  114,  114,  114,   82,\r\n           82,   79,   82,   82,   13,  133,  133,    2,    2,   16,\r\n           16,   17,   28,   15,   15,   15,  133,   16,   15,   38,\r\n            8,   27,   36,   16,  114,  114,  114,  114,   15,   13,\r\n           16,  101,   16,   16,  139,   90,  139,  113,   16,  144,\r\n          141,  116,  139,   -1,   40,  131,  114,   87,   -1,   -1,\r\n           16,   -1,   15,   -1,   -1,   -1,   -1,   -1,   13,   -1,\r\n           -1,   22,   22,   22,   22,   22,   22,   22,   22,   22,\r\n           22,   22,   21,   22,   15,   15,   -1,   -1,   -1,  114,\r\n           -1,   -1,  114,  114,  114,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   13,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   23,   23,   23,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\r\n           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   98,\r\n           98\r\n    );\r\n\r\n    protected $gotoBase = array(\r\n            0,    0, -232,    0,    0,  249,   -6,  351,  -16,    0,\r\n            0,  -37,  -11,   79, -167,   22,    1,  148,   40, -188,\r\n            0,   83,  158,  324,  199,  156,  202,  132,  162,    0,\r\n            0,    0,    0,    0, -118,    0,  131,    0,  142,    0,\r\n           66,   -1,    0,    0,  211, -347,    0, -332,  192,    0,\r\n            0,    0,    0,    0,  130,    0,    0,  -23,    0,    0,\r\n          323,    0,  161,  225, -229,    0,    0,    0,    0,    0,\r\n            0,   -5,    0,    0, -198,    0,   30,   42, -109,  157,\r\n          -77, -122, -246,    0,   53,    0,    0,   67, -267,    0,\r\n           89,    0,    0,    0,  312,  352,    0,    0,  375,  -63,\r\n            0,  116,    0,  140,    0, -264,    0, -110,    0,    0,\r\n            0,  186,    0,  118,  165,    0,   62,    0,    0,    0,\r\n            0,    0,    0,    0,    0,    0,    0,    0,  -74,    0,\r\n            0,   64,    0,  405,    0,  135,    0,    0,    0,   -4,\r\n            0,   63,    0,    0,   65,    0,    0,    0,    0,    0,\r\n            0,  -71,    7,   52,  258,   72,    0,    0,   99,    0,\r\n           58,  276,    0,  292, -101,  -83,    0,    0\r\n    );\r\n\r\n    protected $gotoDefault = array(\r\n        -32768,  485,  695,    4,  696,  769,  777,  569,  503,  664,\r\n          324,  596,  390,  331,  862, 1040,  551,  796, 1160, 1168,\r\n          428,  799,  312,  326,  844,  845,  846,  366,  351,  357,\r\n          364,  617,  597,  467,  831,  422,  823,  459,  826,  421,\r\n          835,  158,  386,  483,  839,    3,  841,  530,  872,  352,\r\n          849,  353,  641,  851,  536,  853,  854,  360,  367,  368,\r\n         1045,  544,  593,  866,  237,  538,  867,  350,  868,  875,\r\n          355,  358,  650,  438,  478,  380, 1021,  579,  614,  416,\r\n          447,  591,  603,  589,  902,  460,  436,  916,  327,  924,\r\n          693, 1052,  609,  462,  932,  610,  939,  942,  504,  505,\r\n          452,  954,  268,  463,  981,  633,  634,  966,  612,  979,\r\n          446,  985,  423,  993, 1204,  426,  997,  260, 1000,  269,\r\n          385,  401, 1005, 1006,    7, 1011,  656,  657,   10,  265,\r\n          482, 1035,  651,  420, 1051,  406, 1120, 1122,  532,  464,\r\n         1140, 1139,  644,  479, 1145, 1207,  417,  506,  448,  299,\r\n          507,  287,  315,  296,  522,  278,  316,  508,  449, 1213,\r\n         1221,  313,   29, 1241, 1252,  322,  548,  584\r\n    );\r\n\r\n    protected $ruleToNonTerminal = array(\r\n            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,\r\n            5,    5,    5,    5,    5,    6,    6,    6,    6,    6,\r\n            6,    6,    7,    7,    8,    9,   10,   10,   10,   11,\r\n           11,   12,   12,   13,   14,   14,   15,   15,   16,   16,\r\n           17,   17,   20,   20,   21,   22,   22,   23,   23,    4,\r\n            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,\r\n           28,   28,   29,   29,   31,   33,   33,   27,   35,   35,\r\n           32,   37,   37,   34,   34,   36,   36,   38,   38,   30,\r\n           39,   39,   40,   42,   43,   43,   44,   45,   45,   47,\r\n           46,   46,   46,   46,   48,   48,   48,   48,   48,   48,\r\n           48,   48,   48,   48,   48,   48,   48,   48,   48,   48,\r\n           48,   48,   48,   48,   48,   48,   48,   48,   24,   24,\r\n           67,   67,   70,   70,   69,   68,   68,   61,   73,   73,\r\n           74,   74,   75,   75,   76,   76,   25,   25,   26,   26,\r\n           26,   26,   79,   79,   79,   80,   80,   83,   83,   81,\r\n           81,   84,   85,   85,   55,   55,   63,   63,   66,   66,\r\n           66,   65,   86,   86,   87,   56,   56,   56,   56,   88,\r\n           88,   89,   89,   90,   90,   91,   92,   92,   93,   93,\r\n           94,   94,   53,   53,   49,   49,   96,   51,   51,   97,\r\n           50,   50,   52,   52,   62,   62,   62,   62,   77,   77,\r\n          100,  100,  102,  102,  102,  102,  101,  101,  101,  104,\r\n          104,  104,  105,  105,  107,  107,  107,  106,  106,  108,\r\n          108,  109,  109,  109,  103,  103,   78,   78,   78,   19,\r\n           19,  110,  110,  111,  111,  111,  111,   58,  112,  112,\r\n          113,   59,  115,  115,  116,  116,  117,  117,   82,  118,\r\n          118,  118,  118,  118,  123,  123,  124,  124,  125,  125,\r\n          125,  125,  125,  126,  127,  127,  122,  122,  119,  119,\r\n          121,  121,  129,  129,  128,  128,  128,  128,  128,  128,\r\n          120,  130,  130,  132,  131,  131,   60,   95,  133,  133,\r\n           54,   54,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,   41,   41,   41,   41,   41,   41,\r\n           41,   41,   41,   41,  140,  134,  134,  139,  139,  142,\r\n          143,  143,  144,  145,  145,  145,   18,   18,   71,   71,\r\n           71,   71,  135,  135,  135,  135,  147,  147,  136,  136,\r\n          138,  138,  138,  141,  141,  152,  152,  152,  152,  152,\r\n          152,  152,  152,  152,  153,  153,   99,  155,  155,  155,\r\n          155,  137,  137,  137,  137,  137,  137,  137,  137,   57,\r\n           57,  150,  150,  150,  150,  156,  156,  146,  146,  146,\r\n          157,  157,  157,  157,  157,  157,   72,   72,   64,   64,\r\n           64,   64,  114,  114,  114,  114,  160,  159,  149,  149,\r\n          149,  149,  149,  149,  149,  148,  148,  148,  158,  158,\r\n          158,  158,   98,  154,  162,  162,  161,  161,  163,  163,\r\n          163,  163,  163,  163,  163,  163,  151,  151,  151,  151,\r\n          165,  166,  164,  164,  164,  164,  164,  164,  164,  164,\r\n          167,  167,  167,  167\r\n    );\r\n\r\n    protected $ruleToLength = array(\r\n            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    1,    1,    0,    1,    0,    1,\r\n            1,    2,    1,    3,    4,    1,    2,    0,    1,    1,\r\n            1,    1,    1,    3,    5,    4,    3,    4,    2,    3,\r\n            1,    1,    7,    6,    2,    3,    1,    2,    3,    1,\r\n            2,    3,    1,    1,    3,    1,    3,    1,    2,    2,\r\n            3,    1,    3,    2,    3,    1,    3,    2,    0,    1,\r\n            1,    1,    1,    1,    3,    7,   10,    5,    7,    9,\r\n            5,    3,    3,    3,    3,    3,    3,    1,    2,    5,\r\n            7,    9,    6,    5,    6,    3,    2,    1,    1,    1,\r\n            0,    2,    1,    3,    8,    0,    4,    2,    1,    3,\r\n            0,    1,    0,    1,    3,    1,    8,    9,    7,    8,\r\n            7,    6,    1,    2,    2,    0,    2,    0,    2,    0,\r\n            2,    2,    1,    3,    1,    4,    1,    4,    1,    1,\r\n            4,    2,    1,    3,    3,    3,    4,    4,    5,    0,\r\n            2,    4,    3,    1,    1,    7,    0,    2,    1,    3,\r\n            3,    4,    1,    4,    0,    2,    5,    0,    2,    6,\r\n            0,    2,    0,    3,    1,    2,    1,    1,    2,    0,\r\n            1,    3,    0,    1,    1,    1,    6,    8,    6,    1,\r\n            2,    1,    1,    1,    1,    1,    1,    3,    3,    3,\r\n            3,    1,    2,    1,    0,    1,    0,    2,    2,    2,\r\n            4,    1,    3,    1,    2,    2,    3,    2,    3,    1,\r\n            1,    2,    3,    1,    1,    3,    2,    0,    1,    5,\r\n            5,   10,    3,    1,    1,    3,    0,    2,    4,    5,\r\n            4,    4,    4,    3,    1,    1,    1,    1,    1,    1,\r\n            0,    1,    1,    2,    1,    1,    1,    1,    1,    1,\r\n            2,    1,    3,    1,    1,    3,    2,    2,    3,    1,\r\n            0,    1,    1,    3,    3,    3,    4,    1,    1,    2,\r\n            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,\r\n            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,\r\n            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,\r\n            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,\r\n            3,    3,    3,    3,    3,    3,    3,    3,    3,    5,\r\n            4,    3,    4,    4,    2,    2,    4,    2,    2,    2,\r\n            2,    2,    2,    2,    2,    2,    2,    2,    1,    3,\r\n            2,    1,    2,    4,    2,    2,    8,    9,    8,    9,\r\n            9,   10,    9,   10,    8,    3,    2,    0,    4,    2,\r\n            1,    3,    2,    2,    2,    4,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    3,    1,    1,    1,    0,    3,\r\n            0,    1,    1,    0,    1,    1,    1,    1,    1,    1,\r\n            1,    1,    1,    1,    3,    3,    3,    4,    1,    1,\r\n            3,    1,    1,    1,    1,    1,    3,    2,    3,    0,\r\n            1,    1,    3,    1,    1,    1,    1,    1,    3,    1,\r\n            1,    4,    4,    1,    4,    4,    0,    1,    1,    1,\r\n            3,    3,    1,    4,    2,    2,    1,    3,    1,    4,\r\n            4,    3,    3,    3,    3,    1,    3,    1,    1,    3,\r\n            1,    1,    4,    1,    1,    1,    3,    1,    1,    2,\r\n            1,    3,    4,    3,    2,    0,    2,    2,    1,    2,\r\n            1,    1,    1,    4,    3,    3,    3,    3,    6,    3,\r\n            1,    1,    2,    1\r\n    );\r\n\r\n    protected function initReduceCallbacks() {\r\n        $this->reduceCallbacks = [\r\n            0 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            1 => function ($stackPos) {\r\n                 $this->semValue = $this->handleNamespaces($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            2 => function ($stackPos) {\r\n                 if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };\r\n            },\r\n            3 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            4 => function ($stackPos) {\r\n                 $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };\r\n            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            5 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            6 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            7 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            8 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            9 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            10 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            11 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            12 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            13 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            14 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            15 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            16 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            17 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            18 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            19 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            20 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            21 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            22 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            23 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            24 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            25 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            26 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            27 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            28 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            29 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            30 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            31 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            32 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            33 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            34 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            35 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            36 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            37 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            38 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            39 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            40 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            41 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            42 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            43 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            44 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            45 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            46 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            47 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            48 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            49 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            50 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            51 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            52 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            53 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            54 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            55 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            56 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            57 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            58 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            59 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            60 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            61 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            62 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            63 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            64 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            65 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            66 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            67 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            68 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            69 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            70 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            71 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            72 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            73 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            74 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            75 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            76 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            77 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            78 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            79 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            80 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            81 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            82 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            83 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            84 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            85 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Identifier($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            86 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            87 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            88 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            89 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            90 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            91 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            92 => function ($stackPos) {\r\n                 $this->semValue = new Name(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            93 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            94 => function ($stackPos) {\r\n                 /* nothing */\r\n            },\r\n            95 => function ($stackPos) {\r\n                 /* nothing */\r\n            },\r\n            96 => function ($stackPos) {\r\n                 /* nothing */\r\n            },\r\n            97 => function ($stackPos) {\r\n                 $this->emitError(new Error('A trailing comma is not allowed here', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));\r\n            },\r\n            98 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            99 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            100 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Attribute($this->semStack[$stackPos-(1-1)], [], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            101 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Attribute($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            102 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            103 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            104 => function ($stackPos) {\r\n                 $this->semValue = new Node\\AttributeGroup($this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            105 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            106 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            107 => function ($stackPos) {\r\n                 $this->semValue = [];\r\n            },\r\n            108 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            109 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            110 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            111 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            112 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\HaltCompiler($this->lexer->handleHaltCompiler(), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            113 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Namespace_($this->semStack[$stackPos-(3-2)], null, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            $this->semValue->setAttribute('kind', Stmt\\Namespace_::KIND_SEMICOLON);\r\n            $this->checkNamespace($this->semValue);\r\n            },\r\n            114 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Namespace_($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            $this->semValue->setAttribute('kind', Stmt\\Namespace_::KIND_BRACED);\r\n            $this->checkNamespace($this->semValue);\r\n            },\r\n            115 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Namespace_(null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            $this->semValue->setAttribute('kind', Stmt\\Namespace_::KIND_BRACED);\r\n            $this->checkNamespace($this->semValue);\r\n            },\r\n            116 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Use_($this->semStack[$stackPos-(3-2)], Stmt\\Use_::TYPE_NORMAL, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            117 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Use_($this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            118 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            119 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Const_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            120 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Use_::TYPE_FUNCTION;\r\n            },\r\n            121 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Use_::TYPE_CONSTANT;\r\n            },\r\n            122 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\GroupUse($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-6)], $this->semStack[$stackPos-(7-2)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            },\r\n            123 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\GroupUse($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-5)], Stmt\\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);\r\n            },\r\n            124 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            125 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            126 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            127 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            128 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            129 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            130 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            131 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            132 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            133 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\UseUse($this->semStack[$stackPos-(1-1)], null, Stmt\\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(1-1));\r\n            },\r\n            134 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\UseUse($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Stmt\\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(3-3));\r\n            },\r\n            135 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\UseUse($this->semStack[$stackPos-(1-1)], null, Stmt\\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(1-1));\r\n            },\r\n            136 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\UseUse($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], Stmt\\Use_::TYPE_UNKNOWN, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->checkUseUse($this->semValue, $stackPos-(3-3));\r\n            },\r\n            137 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)]; $this->semValue->type = Stmt\\Use_::TYPE_NORMAL;\r\n            },\r\n            138 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-2)]; $this->semValue->type = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            139 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            140 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            141 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            142 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            143 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            144 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            145 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            146 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Const_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            147 => function ($stackPos) {\r\n                 if (is_array($this->semStack[$stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]); } else { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; };\r\n            },\r\n            148 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            149 => function ($stackPos) {\r\n                 $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };\r\n            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            150 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            151 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            152 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            153 => function ($stackPos) {\r\n                 throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            154 => function ($stackPos) {\r\n\r\n        if ($this->semStack[$stackPos-(3-2)]) {\r\n            $this->semValue = $this->semStack[$stackPos-(3-2)]; $attrs = $this->startAttributeStack[$stackPos-(3-1)]; $stmts = $this->semValue; if (!empty($attrs['comments'])) {$stmts[0]->setAttribute('comments', array_merge($attrs['comments'], $stmts[0]->getAttribute('comments', []))); };\r\n        } else {\r\n            $startAttributes = $this->startAttributeStack[$stackPos-(3-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\\Nop($startAttributes + $this->endAttributes); } else { $this->semValue = null; };\r\n            if (null === $this->semValue) { $this->semValue = array(); }\r\n        }\r\n\r\n            },\r\n            155 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\If_($this->semStack[$stackPos-(7-3)], ['stmts' => is_array($this->semStack[$stackPos-(7-5)]) ? $this->semStack[$stackPos-(7-5)] : array($this->semStack[$stackPos-(7-5)]), 'elseifs' => $this->semStack[$stackPos-(7-6)], 'else' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            },\r\n            156 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\If_($this->semStack[$stackPos-(10-3)], ['stmts' => $this->semStack[$stackPos-(10-6)], 'elseifs' => $this->semStack[$stackPos-(10-7)], 'else' => $this->semStack[$stackPos-(10-8)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);\r\n            },\r\n            157 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\While_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            158 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Do_($this->semStack[$stackPos-(7-5)], is_array($this->semStack[$stackPos-(7-2)]) ? $this->semStack[$stackPos-(7-2)] : array($this->semStack[$stackPos-(7-2)]), $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            },\r\n            159 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\For_(['init' => $this->semStack[$stackPos-(9-3)], 'cond' => $this->semStack[$stackPos-(9-5)], 'loop' => $this->semStack[$stackPos-(9-7)], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            160 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Switch_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            161 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Break_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            162 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Continue_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            163 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Return_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            164 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Global_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            165 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Static_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            166 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Echo_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            167 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\InlineHTML($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            168 => function ($stackPos) {\r\n\r\n        $e = $this->semStack[$stackPos-(2-1)];\r\n        if ($e instanceof Expr\\Throw_) {\r\n            // For backwards-compatibility reasons, convert throw in statement position into\r\n            // Stmt\\Throw_ rather than Stmt\\Expression(Expr\\Throw_).\r\n            $this->semValue = new Stmt\\Throw_($e->expr, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n        } else {\r\n            $this->semValue = new Stmt\\Expression($e, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n        }\r\n\r\n            },\r\n            169 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Unset_($this->semStack[$stackPos-(5-3)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            170 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Foreach_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $this->semStack[$stackPos-(7-5)][1], 'stmts' => $this->semStack[$stackPos-(7-7)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            },\r\n            171 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Foreach_($this->semStack[$stackPos-(9-3)], $this->semStack[$stackPos-(9-7)][0], ['keyVar' => $this->semStack[$stackPos-(9-5)], 'byRef' => $this->semStack[$stackPos-(9-7)][1], 'stmts' => $this->semStack[$stackPos-(9-9)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            172 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Foreach_($this->semStack[$stackPos-(6-3)], new Expr\\Error($this->startAttributeStack[$stackPos-(6-4)] + $this->endAttributeStack[$stackPos-(6-4)]), ['stmts' => $this->semStack[$stackPos-(6-6)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);\r\n            },\r\n            173 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Declare_($this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            174 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TryCatch($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-5)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes); $this->checkTryCatch($this->semValue);\r\n            },\r\n            175 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Goto_($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            176 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Label($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            177 => function ($stackPos) {\r\n                 $this->semValue = array(); /* means: no statement */\r\n            },\r\n            178 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            179 => function ($stackPos) {\r\n                 $startAttributes = $this->startAttributeStack[$stackPos-(1-1)]; if (isset($startAttributes['comments'])) { $this->semValue = new Stmt\\Nop($startAttributes + $this->endAttributes); } else { $this->semValue = null; };\r\n            if ($this->semValue === null) $this->semValue = array(); /* means: no statement */\r\n            },\r\n            180 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            181 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            182 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            183 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            184 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Catch_($this->semStack[$stackPos-(8-3)], $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-7)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);\r\n            },\r\n            185 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            186 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Finally_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            187 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            188 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            189 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            190 => function ($stackPos) {\r\n                 $this->semValue = false;\r\n            },\r\n            191 => function ($stackPos) {\r\n                 $this->semValue = true;\r\n            },\r\n            192 => function ($stackPos) {\r\n                 $this->semValue = false;\r\n            },\r\n            193 => function ($stackPos) {\r\n                 $this->semValue = true;\r\n            },\r\n            194 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            195 => function ($stackPos) {\r\n                 $this->semValue = [];\r\n            },\r\n            196 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Function_($this->semStack[$stackPos-(8-3)], ['byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-5)], 'returnType' => $this->semStack[$stackPos-(8-7)], 'stmts' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);\r\n            },\r\n            197 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Function_($this->semStack[$stackPos-(9-4)], ['byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-6)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            198 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Class_($this->semStack[$stackPos-(7-2)], ['type' => $this->semStack[$stackPos-(7-1)], 'extends' => $this->semStack[$stackPos-(7-3)], 'implements' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            $this->checkClass($this->semValue, $stackPos-(7-2));\r\n            },\r\n            199 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Class_($this->semStack[$stackPos-(8-3)], ['type' => $this->semStack[$stackPos-(8-2)], 'extends' => $this->semStack[$stackPos-(8-4)], 'implements' => $this->semStack[$stackPos-(8-5)], 'stmts' => $this->semStack[$stackPos-(8-7)], 'attrGroups' => $this->semStack[$stackPos-(8-1)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);\r\n            $this->checkClass($this->semValue, $stackPos-(8-3));\r\n            },\r\n            200 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Interface_($this->semStack[$stackPos-(7-3)], ['extends' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)], 'attrGroups' => $this->semStack[$stackPos-(7-1)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            $this->checkInterface($this->semValue, $stackPos-(7-3));\r\n            },\r\n            201 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Trait_($this->semStack[$stackPos-(6-3)], ['stmts' => $this->semStack[$stackPos-(6-5)], 'attrGroups' => $this->semStack[$stackPos-(6-1)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);\r\n            },\r\n            202 => function ($stackPos) {\r\n                 $this->semValue = 0;\r\n            },\r\n            203 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_ABSTRACT;\r\n            },\r\n            204 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_FINAL;\r\n            },\r\n            205 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            206 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-2)];\r\n            },\r\n            207 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            208 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-2)];\r\n            },\r\n            209 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            210 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-2)];\r\n            },\r\n            211 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            212 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            213 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            214 => function ($stackPos) {\r\n                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            215 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-2)];\r\n            },\r\n            216 => function ($stackPos) {\r\n                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            217 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-2)];\r\n            },\r\n            218 => function ($stackPos) {\r\n                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            219 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            220 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-2)];\r\n            },\r\n            221 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            222 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            223 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            224 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\DeclareDeclare($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            225 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            226 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-3)];\r\n            },\r\n            227 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-2)];\r\n            },\r\n            228 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(5-3)];\r\n            },\r\n            229 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            230 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            231 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Case_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            232 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Case_(null, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            233 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            234 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            235 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Match_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-6)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);\r\n            },\r\n            236 => function ($stackPos) {\r\n                 $this->semValue = [];\r\n            },\r\n            237 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            238 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            239 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            240 => function ($stackPos) {\r\n                 $this->semValue = new Node\\MatchArm($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            241 => function ($stackPos) {\r\n                 $this->semValue = new Node\\MatchArm(null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            242 => function ($stackPos) {\r\n                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            243 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-2)];\r\n            },\r\n            244 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            245 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            246 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\ElseIf_($this->semStack[$stackPos-(5-3)], is_array($this->semStack[$stackPos-(5-5)]) ? $this->semStack[$stackPos-(5-5)] : array($this->semStack[$stackPos-(5-5)]), $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            247 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            248 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            249 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\ElseIf_($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);\r\n            },\r\n            250 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            251 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Else_(is_array($this->semStack[$stackPos-(2-2)]) ? $this->semStack[$stackPos-(2-2)] : array($this->semStack[$stackPos-(2-2)]), $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            252 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            253 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Else_($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            254 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);\r\n            },\r\n            255 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(2-2)], true);\r\n            },\r\n            256 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);\r\n            },\r\n            257 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);\r\n            },\r\n            258 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            259 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            260 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            261 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            262 => function ($stackPos) {\r\n                 $this->semValue = 0;\r\n            },\r\n            263 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_PUBLIC;\r\n            },\r\n            264 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_PROTECTED;\r\n            },\r\n            265 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_PRIVATE;\r\n            },\r\n            266 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Param($this->semStack[$stackPos-(6-6)], null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);\r\n            $this->checkParam($this->semValue);\r\n            },\r\n            267 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Param($this->semStack[$stackPos-(8-6)], $this->semStack[$stackPos-(8-8)], $this->semStack[$stackPos-(8-3)], $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-5)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes, $this->semStack[$stackPos-(8-2)], $this->semStack[$stackPos-(8-1)]);\r\n            $this->checkParam($this->semValue);\r\n            },\r\n            268 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Param(new Expr\\Error($this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes), null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);\r\n            },\r\n            269 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            270 => function ($stackPos) {\r\n                 $this->semValue = new Node\\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            271 => function ($stackPos) {\r\n                 $this->semValue = new Node\\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            272 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            273 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Name('static', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            274 => function ($stackPos) {\r\n                 $this->semValue = $this->handleBuiltinTypes($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            275 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Identifier('array', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            276 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Identifier('callable', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            277 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);\r\n            },\r\n            278 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            279 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);\r\n            },\r\n            280 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            281 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            282 => function ($stackPos) {\r\n                 $this->semValue = new Node\\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            283 => function ($stackPos) {\r\n                 $this->semValue = new Node\\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            284 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            285 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            286 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            287 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-2)];\r\n            },\r\n            288 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            289 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            290 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-2)];\r\n            },\r\n            291 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            292 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            293 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Arg($this->semStack[$stackPos-(1-1)], false, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            294 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Arg($this->semStack[$stackPos-(2-2)], true, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            295 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Arg($this->semStack[$stackPos-(2-2)], false, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            296 => function ($stackPos) {\r\n                 $this->semValue = new Node\\Arg($this->semStack[$stackPos-(3-3)], false, false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->semStack[$stackPos-(3-1)]);\r\n            },\r\n            297 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            298 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            299 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            300 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            301 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            302 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            303 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            304 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\StaticVar($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            305 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\StaticVar($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            306 => function ($stackPos) {\r\n                 if ($this->semStack[$stackPos-(2-2)] !== null) { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; }\r\n            },\r\n            307 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            308 => function ($stackPos) {\r\n                 $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };\r\n            if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            309 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\Property($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes, $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-1)]);\r\n            $this->checkProperty($this->semValue, $stackPos-(5-2));\r\n            },\r\n            310 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\ClassConst($this->semStack[$stackPos-(5-4)], $this->semStack[$stackPos-(5-2)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes, $this->semStack[$stackPos-(5-1)]);\r\n            $this->checkClassConst($this->semValue, $stackPos-(5-2));\r\n            },\r\n            311 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\ClassMethod($this->semStack[$stackPos-(10-5)], ['type' => $this->semStack[$stackPos-(10-2)], 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-7)], 'returnType' => $this->semStack[$stackPos-(10-9)], 'stmts' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);\r\n            $this->checkClassMethod($this->semValue, $stackPos-(10-2));\r\n            },\r\n            312 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TraitUse($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            313 => function ($stackPos) {\r\n                 $this->semValue = null; /* will be skipped */\r\n            },\r\n            314 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            315 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            316 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            317 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            318 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TraitUseAdaptation\\Precedence($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            319 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TraitUseAdaptation\\Alias($this->semStack[$stackPos-(5-1)][0], $this->semStack[$stackPos-(5-1)][1], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            320 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TraitUseAdaptation\\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            321 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TraitUseAdaptation\\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            322 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\TraitUseAdaptation\\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            323 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);\r\n            },\r\n            324 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            325 => function ($stackPos) {\r\n                 $this->semValue = array(null, $this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            326 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            327 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            328 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            329 => function ($stackPos) {\r\n                 $this->semValue = 0;\r\n            },\r\n            330 => function ($stackPos) {\r\n                 $this->semValue = 0;\r\n            },\r\n            331 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            332 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            333 => function ($stackPos) {\r\n                 $this->checkModifier($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $this->semValue = $this->semStack[$stackPos-(2-1)] | $this->semStack[$stackPos-(2-2)];\r\n            },\r\n            334 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_PUBLIC;\r\n            },\r\n            335 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_PROTECTED;\r\n            },\r\n            336 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_PRIVATE;\r\n            },\r\n            337 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_STATIC;\r\n            },\r\n            338 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_ABSTRACT;\r\n            },\r\n            339 => function ($stackPos) {\r\n                 $this->semValue = Stmt\\Class_::MODIFIER_FINAL;\r\n            },\r\n            340 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            341 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            342 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            343 => function ($stackPos) {\r\n                 $this->semValue = new Node\\VarLikeIdentifier(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            344 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\PropertyProperty($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            345 => function ($stackPos) {\r\n                 $this->semValue = new Stmt\\PropertyProperty($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            346 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            347 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            348 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            349 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            350 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            351 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            352 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            353 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            354 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            355 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            356 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            357 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            358 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            359 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Clone_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            360 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            361 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            362 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            363 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            364 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            365 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            366 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            367 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            368 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            369 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            370 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            371 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            372 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\AssignOp\\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            373 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PostInc($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            374 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PreInc($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            375 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PostDec($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            376 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PreDec($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            377 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\BooleanOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            378 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\BooleanAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            379 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            380 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            381 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\LogicalXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            382 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            383 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            384 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            385 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            386 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            387 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            388 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            389 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            390 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            391 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            392 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            393 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            394 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\UnaryPlus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            395 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            396 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            397 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            398 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Identical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            399 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\NotIdentical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            400 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Equal($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            401 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            402 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Spaceship($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            403 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Smaller($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            404 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\SmallerOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            405 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Greater($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            406 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            407 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Instanceof_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            408 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            409 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Ternary($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);\r\n            },\r\n            410 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Ternary($this->semStack[$stackPos-(4-1)], null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            411 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\BinaryOp\\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            412 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Isset_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            413 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Empty_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            414 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Include_($this->semStack[$stackPos-(2-2)], Expr\\Include_::TYPE_INCLUDE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            415 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Include_($this->semStack[$stackPos-(2-2)], Expr\\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            416 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Eval_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            417 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Include_($this->semStack[$stackPos-(2-2)], Expr\\Include_::TYPE_REQUIRE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            418 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Include_($this->semStack[$stackPos-(2-2)], Expr\\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            419 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Cast\\Int_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            420 => function ($stackPos) {\r\n                 $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;\r\n            $attrs['kind'] = $this->getFloatCastKind($this->semStack[$stackPos-(2-1)]);\r\n            $this->semValue = new Expr\\Cast\\Double($this->semStack[$stackPos-(2-2)], $attrs);\r\n            },\r\n            421 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Cast\\String_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            422 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Cast\\Array_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            423 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Cast\\Object_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            424 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Cast\\Bool_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            425 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Cast\\Unset_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            426 => function ($stackPos) {\r\n                 $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;\r\n            $attrs['kind'] = strtolower($this->semStack[$stackPos-(2-1)]) === 'exit' ? Expr\\Exit_::KIND_EXIT : Expr\\Exit_::KIND_DIE;\r\n            $this->semValue = new Expr\\Exit_($this->semStack[$stackPos-(2-2)], $attrs);\r\n            },\r\n            427 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ErrorSuppress($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            428 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            429 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ShellExec($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            430 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Print_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            431 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Yield_(null, null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            432 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Yield_($this->semStack[$stackPos-(2-2)], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            433 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Yield_($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            434 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\YieldFrom($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            435 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Throw_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            436 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-4)], 'returnType' => $this->semStack[$stackPos-(8-6)], 'expr' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);\r\n            },\r\n            437 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            438 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-4)], 'uses' => $this->semStack[$stackPos-(8-6)], 'returnType' => $this->semStack[$stackPos-(8-7)], 'stmts' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);\r\n            },\r\n            439 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            440 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            441 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'returnType' => $this->semStack[$stackPos-(10-8)], 'expr' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);\r\n            },\r\n            442 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);\r\n            },\r\n            443 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'uses' => $this->semStack[$stackPos-(10-8)], 'returnType' => $this->semStack[$stackPos-(10-9)], 'stmts' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);\r\n            },\r\n            444 => function ($stackPos) {\r\n                 $this->semValue = array(new Stmt\\Class_(null, ['type' => 0, 'extends' => $this->semStack[$stackPos-(8-4)], 'implements' => $this->semStack[$stackPos-(8-5)], 'stmts' => $this->semStack[$stackPos-(8-7)], 'attrGroups' => $this->semStack[$stackPos-(8-1)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes), $this->semStack[$stackPos-(8-3)]);\r\n            $this->checkClass($this->semValue[0], -1);\r\n            },\r\n            445 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\New_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            446 => function ($stackPos) {\r\n                 list($class, $ctorArgs) = $this->semStack[$stackPos-(2-2)]; $this->semValue = new Expr\\New_($class, $ctorArgs, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            447 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            448 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-3)];\r\n            },\r\n            449 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            450 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            451 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            452 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ClosureUse($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            453 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            454 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            455 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\StaticCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            456 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            457 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            458 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            459 => function ($stackPos) {\r\n                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            460 => function ($stackPos) {\r\n                 $this->semValue = new Name\\FullyQualified(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            461 => function ($stackPos) {\r\n                 $this->semValue = new Name\\Relative(substr($this->semStack[$stackPos-(1-1)], 10), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            462 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            463 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            464 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            465 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;\r\n            },\r\n            466 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            467 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            468 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            469 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            470 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            471 => function ($stackPos) {\r\n                 $this->semValue = array(new Scalar\\EncapsedStringPart(Scalar\\String_::parseEscapeSequences($this->semStack[$stackPos-(1-1)], '`'), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));\r\n            },\r\n            472 => function ($stackPos) {\r\n                 foreach ($this->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\\Scalar\\EncapsedStringPart) { $s->value = Node\\Scalar\\String_::parseEscapeSequences($s->value, '`', true); } }; $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            473 => function ($stackPos) {\r\n                 $this->semValue = array();\r\n            },\r\n            474 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            475 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ConstFetch($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            476 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Line($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            477 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\File($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            478 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Dir($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            479 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Class_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            480 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Trait_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            481 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Method($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            482 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Function_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            483 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\MagicConst\\Namespace_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            484 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ClassConstFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            485 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ClassConstFetch($this->semStack[$stackPos-(3-1)], new Expr\\Error($this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)]), $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->errorState = 2;\r\n            },\r\n            486 => function ($stackPos) {\r\n                 $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\\Array_::KIND_SHORT;\r\n            $this->semValue = new Expr\\Array_($this->semStack[$stackPos-(3-2)], $attrs);\r\n            },\r\n            487 => function ($stackPos) {\r\n                 $attrs = $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\\Array_::KIND_LONG;\r\n            $this->semValue = new Expr\\Array_($this->semStack[$stackPos-(4-3)], $attrs);\r\n            },\r\n            488 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            489 => function ($stackPos) {\r\n                 $attrs = $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$stackPos-(1-1)][0] === \"'\" || ($this->semStack[$stackPos-(1-1)][1] === \"'\" && ($this->semStack[$stackPos-(1-1)][0] === 'b' || $this->semStack[$stackPos-(1-1)][0] === 'B')) ? Scalar\\String_::KIND_SINGLE_QUOTED : Scalar\\String_::KIND_DOUBLE_QUOTED);\r\n            $this->semValue = new Scalar\\String_(Scalar\\String_::parse($this->semStack[$stackPos-(1-1)]), $attrs);\r\n            },\r\n            490 => function ($stackPos) {\r\n                 $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\\String_::KIND_DOUBLE_QUOTED;\r\n            foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\\Scalar\\EncapsedStringPart) { $s->value = Node\\Scalar\\String_::parseEscapeSequences($s->value, '\"', true); } }; $this->semValue = new Scalar\\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);\r\n            },\r\n            491 => function ($stackPos) {\r\n                 $this->semValue = $this->parseLNumber($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            492 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\DNumber(Scalar\\DNumber::parse($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            493 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            494 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            495 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            496 => function ($stackPos) {\r\n                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);\r\n            },\r\n            497 => function ($stackPos) {\r\n                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(2-1)], '', $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(2-2)] + $this->endAttributeStack[$stackPos-(2-2)], true);\r\n            },\r\n            498 => function ($stackPos) {\r\n                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);\r\n            },\r\n            499 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            500 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            501 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            502 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            503 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            504 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            505 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            506 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            507 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            508 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            509 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            510 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            511 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            512 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            513 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            514 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\MethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            515 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\NullsafeMethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            516 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            517 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            518 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            519 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            520 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            521 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            522 => function ($stackPos) {\r\n                 $this->semValue = substr($this->semStack[$stackPos-(1-1)], 1);\r\n            },\r\n            523 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(4-3)];\r\n            },\r\n            524 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            525 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Error($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); $this->errorState = 2;\r\n            },\r\n            526 => function ($stackPos) {\r\n                 $var = $this->semStack[$stackPos-(1-1)]; $this->semValue = \\is_string($var) ? new Node\\VarLikeIdentifier($var, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $var;\r\n            },\r\n            527 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            528 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            529 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            530 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            531 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            532 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            533 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            534 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            535 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            536 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            537 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            538 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            539 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            540 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            541 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;\r\n            },\r\n            542 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\List_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            543 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)]; $end = count($this->semValue)-1; if ($this->semValue[$end] === null) array_pop($this->semValue);\r\n            },\r\n            544 => function ($stackPos) {\r\n                $this->semValue = $this->semStack[$stackPos];\r\n            },\r\n            545 => function ($stackPos) {\r\n                 /* do nothing -- prevent default action of $$=$this->semStack[$1]. See $551. */\r\n            },\r\n            546 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];\r\n            },\r\n            547 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            548 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            549 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(2-2)], null, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            550 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            551 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            552 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-1)], true, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            553 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            554 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayItem($this->semStack[$stackPos-(2-2)], null, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            555 => function ($stackPos) {\r\n                 $this->semValue = null;\r\n            },\r\n            556 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            557 => function ($stackPos) {\r\n                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];\r\n            },\r\n            558 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);\r\n            },\r\n            559 => function ($stackPos) {\r\n                 $this->semValue = array($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]);\r\n            },\r\n            560 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\EncapsedStringPart($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            561 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            562 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n            563 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);\r\n            },\r\n            564 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            565 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            566 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            567 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);\r\n            },\r\n            568 => function ($stackPos) {\r\n                 $this->semValue = new Expr\\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);\r\n            },\r\n            569 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(3-2)];\r\n            },\r\n            570 => function ($stackPos) {\r\n                 $this->semValue = new Scalar\\String_($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            571 => function ($stackPos) {\r\n                 $this->semValue = $this->parseNumString($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);\r\n            },\r\n            572 => function ($stackPos) {\r\n                 $this->semValue = $this->parseNumString('-' . $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);\r\n            },\r\n            573 => function ($stackPos) {\r\n                 $this->semValue = $this->semStack[$stackPos-(1-1)];\r\n            },\r\n        ];\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php b/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php
--- a/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php	
+++ b/vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php	
@@ -19,7 +19,7 @@
 {
     protected $tokenToSymbolMapSize = 392;
     protected $actionTableSize = 1162;
-    protected $gotoTableSize = 611;
+    protected $gotoTableSize = 588;
 
     protected $invalidSymbol = 165;
     protected $errorSymbol = 1;
@@ -27,7 +27,7 @@
     protected $unexpectedTokenRule = 32767;
 
     protected $YY2TBLSTATE = 397;
-    protected $numNonLeafStates = 694;
+    protected $numNonLeafStates = 688;
 
     protected $symbolToName = array(
         "EOF",
@@ -241,249 +241,249 @@
     );
 
     protected $action = array(
-          130,  131,  132,  555,  133,  134,-32766,  704,  705,  706,
-          135,   36, -543, -552,  455,-32766, -543,-32766,-32766,-32766,
-         -552, 1152,  778,  927, -549,  969,  970,    0,-32766,-32766,
-        -32766, -549,-32766, 1219,-32766,  245,-32766,  962,-32766,-32766,
-        -32766,-32766,-32766,  461,-32766,-32766,-32766,-32766,-32766,-32766,
-        -32766,-32766,  124, -331,  707, -331,-32766,  388, 1031, 1032,
-         1033, 1030, 1029, 1028,-32766,  435,  430,    2,  261,  136,
-          371,  711,  712,  713,  714,  391,  789,  397, 1031, 1032,
-         1033, 1030, 1029, 1028,  715,  716,  717,  718,  719,  720,
-          721,  722,  723,  724,  725,  745,  556,  746,  747,  748,
-          749,  737,  738,  372,  373,  740,  741,  726,  727,  728,
-          730,  731,  732,  332,  771,  772,  773,  774,  775,  733,
-          734,  557,  558,  766,  757,  755,  756,  752,  753, -294,
-         -189,  559,  560,  751,  561,  562,  563,  564,  565,  566,
-         1235,  456,  783, -503,  889,  754,  567,  568,  928,  137,
-        -32766,-32766,-32766,  130,  131,  132,  555,  133,  134,  983,
-          704,  705,  706,  135,   36,-32766,-32766,-32766,-32766, -552,
-        -32766,-32766,-32766, -552, 1152,  547,  101,  102,  103,  583,
-         -549,-32766,-32766,-32766, -549,-32766,-32766,-32766,  245,-32766,
-           80,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
-          959,  958,  957,-32766,-32766, -503, -503,  707, 1264,-32766,
-          388, 1265,-32766,-32766,-32766,  235,  784,-32766,  778,   19,
-         -503,  261,  136,  371,  711,  712,  713,  714,-32766,-32766,
-          397,  788, -503,-32766, -509,-32766,-32766,  715,  716,  717,
-          718,  719,  720,  721,  722,  723,  724,  725,  745,  556,
-          746,  747,  748,  749,  737,  738,  372,  373,  740,  741,
-          726,  727,  728,  730,  731,  732,  332,  771,  772,  773,
-          774,  775,  733,  734,  557,  558,  766,  757,  755,  756,
-          752,  753, -294, -189,  559,  560,  751,  561,  562,  563,
-          564,  565,  566,  309,   81,   82,   83,  139,  754,  567,
-          568,  681,  137,  729,  699,  700,  701,  702,  703, 1239,
-          704,  705,  706,  742,  743,   33, 1238,   84,   85,   86,
+          130,  131,  132,  552,  133,  134,    0,  698,  699,  700,
+          135,   36,  883,  528,  529,-32766, 1212,-32766,-32766,-32766,
+         -551, 1145,  772,  889,  430,  431, 1232, -551,-32766,-32766,
+        -32766, -293,-32766, 1231,-32766,  245,-32766, -189,-32766,-32766,
+        -32766,-32766,-32766,  458,-32766,-32766,-32766,-32766,-32766,-32766,
+        -32766,-32766,  124,  783,  701,  777,-32766,  388, 1024, 1025,
+         1026, 1023, 1022, 1021,-32766,  428,  429,  955,  261,  136,
+          372,  705,  706,  707,  708,  391, -188,  397, 1024, 1025,
+         1026, 1023, 1022, 1021,  709,  710,  711,  712,  713,  714,
+          715,  716,  717,  718,  719,  739,  553,  740,  741,  742,
+          743,  731,  732,  373,  374,  734,  735,  720,  721,  722,
+          724,  725,  726,  333,  765,  766,  767,  768,  769,  727,
+          728,  554,  555,  760,  751,  749,  750,  746,  747,  778,
+            2,  556,  557,  745,  558,  559,  560,  561,  562,  563,
+         -542, -548,   19, -502, -542,  748,  564,  565, -548,  137,
+        -32766,-32766,-32766,  130,  131,  132,  552,  133,  134,  976,
+          698,  699,  700,  135,   36,-32766,-32766,-32766,-32766,  675,
+        -32766,-32766,-32766,   80, 1145,  544, -551,-32766,-32766,  309,
+         -551,-32766,-32766,-32766, -293,-32766,-32766,-32766,  245,-32766,
+         -189,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
+           31,  433,  429,-32766,-32766, -502, -502,  701,  782,-32766,
+          388,  391,-32766,-32766,-32766,  235,  126,-32766,  -82,  142,
+         -502,  261,  136,  372,  705,  706,  707,  708,  247, -188,
+          397,  292, -502,-32766, -508,-32766,-32766,  709,  710,  711,
+          712,  713,  714,  715,  716,  717,  718,  719,  739,  553,
+          740,  741,  742,  743,  731,  732,  373,  374,  734,  735,
+          720,  721,  722,  724,  725,  726,  333,  765,  766,  767,
+          768,  769,  727,  728,  554,  555,  760,  751,  749,  750,
+          746,  747,  294,  -82,  556,  557,  745,  558,  559,  560,
+          561,  562,  563,  310,   81,   82,   83, -548,  748,  564,
+          565, -548,  137,  723,  693,  694,  695,  696,  697,-32766,
+          698,  699,  700,  736,  737,   33,  307,   84,   85,   86,
            87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
            97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
-           31,  263,-32766,-32766,-32766,  104,  105,  106,  577,  263,
-         1216,  126, -188,  107,  142,  440,  441,  707,-32766,-32766,
-        -32766,  107, -254,-32766,  247,-32766,-32766,-32766,-32766,-32766,
-        -32766,  708,  709,  710,  711,  712,  713,  714,  293,-32766,
-          776,-32766,-32766,-32766,-32766,-32766,  295,  715,  716,  717,
-          718,  719,  720,  721,  722,  723,  724,  725,  745,  768,
-          746,  747,  748,  749,  737,  738,  739,  767,  740,  741,
-          726,  727,  728,  730,  731,  732,  770,  771,  772,  773,
-          774,  775,  733,  734,  735,  736,  766,  757,  755,  756,
-          752,  753,  529,  311,  744,  750,  751,  758,  759,  761,
-          760,  762,  763,  234,-32766,-32766,-32766,  307,  754,  765,
-          764,   48,   49,   50,  486,   51,   52,  481,  397,   18,
-          321,   53,   54,  345,   55,-32766,  982,-32766,-32766,-32766,
-        -32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,  349,-32767,
-        -32767,-32767,-32767,   99,  100,  101,  102,  103,  814,  354,
-          815, 1191,  356, 1152,  871,  271,  408,  871,   56,   57,
-          409,  814,  410,  815,   58, -188,   59,  240,  241,   60,
-           61,   62,   63,   64,   65,   66,   67,-32766,   26,  262,
-           68,  412,  487,  411,  672,  967, 1185, 1186,  488, 1150,
-         1216, 1154, 1153, 1155, 1183,   40,   23,  489, 1009,  490,
-          -82,  491,  147,  492,  969,  970,  493,  494,  786,  429,
-          430,   42,   43,  413,  418,  415,  871,   44,  495,  391,
-          496,  497,  248,  344,  320, 1159, 1154, 1153, 1155,  793,
-          896,  498,  499,  500,  148, 1008,  861,  692,  787,  861,
-          967, 1254,  501,  502,  150, 1173, 1174, 1175, 1176, 1170,
-         1171,  281,  624,   24,   26,  -14,  151, 1177, 1172,  969,
-          970, 1154, 1153, 1155,  282,  -82, 1216, -502,  152,   69,
-         1183,  305,  306,  311,   34,  108,  109,  110,  111,  112,
-          113,  114,  115,  116,  117,  118,  119,  120,  154, -149,
-         -149, -149,  639,  640,  146,  376, 1159, 1159,  861,  615,
-          616,   32,  243,   35, -149, 1216, -149,  121, -149,  873,
-         -149,  667,  873,  122,  667,  242, 1067, 1069,  501,  502,
-          414, 1173, 1174, 1175, 1176, 1170, 1171, -501,  127, -502,
-         -502,  496,  497, 1177, 1172, -504,  128,  871,  424,  425,
-          847,  896, -107, -107, -502,   71,  442,  443,  306,  311,
-         -107,-32766,  432,  433,  -49,  141, -502, 1152, -508,  155,
-          156,  780,  157,  -84,-32766,-32766,-32766,  673,-32766,  -76,
-        -32766,  873,-32766,  667, -149,-32766, 1216, 1216, 1179,  282,
-        -32766,-32766,-32766,  -73,   73,  -71,-32766,-32766,  311, -501,
-         -501,  129,-32766,  388,  -70,  -69,-32766, -504, -504,  -68,
-        -32766,  -67, 1152,  -66, -501,  -65,  871,  -64,  275,-32766,
-        -32766,-32766, -504,-32766,  -45,-32766, -501,-32766,  -16,  861,
-        -32766,  145, -107,  264, -504,-32766,-32766,-32766,  682,   72,
-          244,-32766,-32766,-32766,  685,  782,  674,-32766,  388, 1152,
-          669,  871, -501,  870,  144,-32766,-32766,-32766,-32766,  272,
-        -32766,  282,-32766,  273,-32766,   73,   73,-32766, 1216,  311,
-          311,  276,-32766,-32766,-32766,  885,-32766,  246,-32766,-32766,
-          277,  677, 1152,  314,-32766,  388,   -4,  871,  263,-32766,
-        -32766,-32766,-32766,-32766,  107,-32766,  143,-32766,  861,  778,
-        -32766,  871,  873,-32766,  667,-32766,-32766,-32766,  625,  647,
-          871,-32766,-32766,-32766, -501, -501,  787,-32766,  388, 1152,
-         1037,-32766,  969,  970, 1266,-32766,-32766,-32766,-32766, -501,
-        -32766,  531,-32766,  861,-32766,  660,  871,-32766,  630,  535,
-          683, -501,-32766,-32766,-32766,  138,-32766,  642,-32766,-32766,
-         1023,  311, 1152,   20,-32766,  388,  437,  466,  631,-32766,
-        -32766,-32766,-32766,-32766,  643,-32766,  286,-32766, -506,  861,
-        -32766,  913,  407,  667,  613,-32766,-32766,-32766,-32766,  284,
-         -467,-32766,-32766,  861,   46,  283,  282,-32766,  388,  686,
-          897,  414,  861,  402,  898,-32766,  294,   38,  280, -232,
-         -232, -232,  496,  497, 1007,  414,  873,   26,  667, 1190,
-          786,  806,  896, -107, -107, 1192,  496,  497,  861, 1216,
-           47, -457,    8, 1183,   22,  847,  896, -107, -107,  347,
-         -506, -506,  541,    9, -231, -231, -231,  581, 1180,  887,
-          414,   39,  873,  848,  667,   -4,  289,  290,  689,  690,
-          852,  496,  497,  937,  914, 1261,  873, -506,  667, -232,
-          847,  896, -107, -107,  921,  873,  911,  667,  922,  850,
-          909, -537,  502,  123, 1173, 1174, 1175, 1176, 1170, 1171,
-         1012, 1015,  291,  292, 1016, 1013, 1177, 1172, 1014, 1020,
-         1263,  873,   30,  667, -231,  304,  798,  348,   71, 1205,
-         1223,  306,  311, 1257,  618, -535,  346,  668, -107,  125,
-         -107,  671,  675,  676,  678,  285,  679,  680, -107, -107,
-         -107, -107, -107, -107, -107,  684,  670, -257,  809,  808,
-          817,  895,  929,  816, 1262,  894,  892,  893, 1138,  880,
-          888,  878,  919,  920, 1260, 1217, 1206, 1224, 1230, 1233,
-            0, -509, -508, -507,    1,   27,   28,   37,   41,   45,
-           70,   74, -308, -255,   75,   76,   77,   78,   79,  140,
-          149,  153,  239,  310,  333,  334,  335,  336,  337,  338,
-          339,  340,  341,  342,  343,  403,  404,    0, -254,   12,
-           13,   14,   15,   17,  375,  457,  458,  465,  468,  469,
-          470,  471,  475,  476,  477,  484,  654, 1163, 1106, 1181,
-          984, 1142, -259,  -99,   11,   16,   25,  279,  374,  574,
-          578,  605,  659, 1110, 1158, 1107, 1236,    0, -471, 1123,
-            0, 1184
+          322,  263,-32766,-32766,-32766,  104,  105,  106,  346,  263,
+          952,  951,  950,  107,  350,  438,  439,  701,-32766,-32766,
+        -32766,  107, -253,-32766,  355,-32766,-32766,-32766,-32766,-32766,
+        -32766,  702,  703,  704,  705,  706,  707,  708,  452,-32766,
+          770,-32766,-32766,-32766,-32766,-32766,  357,  709,  710,  711,
+          712,  713,  714,  715,  716,  717,  718,  719,  739,  762,
+          740,  741,  742,  743,  731,  732,  733,  761,  734,  735,
+          720,  721,  722,  724,  725,  726,  764,  765,  766,  767,
+          768,  769,  727,  728,  729,  730,  760,  751,  749,  750,
+          746,  747,  619,   24,  738,  744,  745,  752,  753,  755,
+          754,  756,  757,  524,-32766,-32766,-32766,  574,  748,  759,
+          758,   48,   49,   50,  483,   51,   52,  147,  397,  580,
+          408,   53,   54,  409,   55,-32766,  975,-32766,-32766,-32766,
+        -32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,  865,-32767,
+        -32767,-32767,-32767,   99,  100,  101,  102,  103, 1257,  410,
+         1172, 1258,  411, 1145,  865,  271,  634,  635,   56,   57,
+          148,  808, 1184,  809,   58,  453,   59,  240,  241,   60,
+           61,   62,   63,   64,   65,   66,   67,  787,   26,  262,
+           68,  412,  484,  121,  667,-32766, 1178, 1179,  485, 1143,
+          781, 1147, 1146, 1148, 1176,   40,   23,  486, 1002,  487,
+          150,  488,  234,  489,  962,  963,  490,  491,  780,  423,
+          424,   42,   43,  413,  417,  415,  865,   44,  492,  151,
+          855,  920,  248,  345,  321, 1152, 1147, 1146, 1148,  122,
+          781,  493,  494,  495,  152, -330,  855, -330,  127, -505,
+          960,  154,  496,  497,   35, 1166, 1167, 1168, 1169, 1163,
+         1164,  280,  146,  377,   26,  -14,  128, 1170, 1165,  962,
+          963, 1147, 1146, 1148,  281,  141,  781, -501,  155,   69,
+         1176,  305,  306,  309,   34,  108,  109,  110,  111,  112,
+          113,  114,  115,  116,  117,  118,  119,  120,  156, -149,
+         -149, -149,  478,  867,   18,  662, 1152, 1152,  855,  440,
+          441, -505, -505,  157, -149,  781, -149,  138, -149,  867,
+         -149,  662,  808,  309,  809,  242, 1060, 1062,  496,  497,
+          414, 1166, 1167, 1168, 1169, 1163, 1164, -500, -505, -501,
+         -501, -107, -107, 1170, 1165, -503, 1228,  865,  611,  612,
+          841, -107, -107, -107, -501,   71,  921,  -84,  306,  309,
+         -107,-32766,  -76, 1001,  -49,  686, -501, 1145, -507,  -73,
+          -71,  774,  -70,  -69,-32766,-32766,-32766,  668,-32766,  -68,
+        -32766,  867,-32766,  662, -149,-32766,  781,  781,  -67,  281,
+        -32766,-32766,-32766,  -66,   73,  -65,-32766,-32766,  309, -500,
+         -500,  129,-32766,  388,  -64,  -45,-32766, -503, -503,  -16,
+        -32766,  145, 1145,  264, -500,  676,  865,  679,  864,-32766,
+        -32766,-32766, -503,-32766,  772,-32766, -500,-32766,  144,  855,
+        -32766,  272, -107,  273, -503,-32766,-32766,-32766,  879,   72,
+          244,-32766,-32766,-32766,  275,  776,  669,-32766,  388, 1145,
+          664,  865, -500,  274,  276,-32766,-32766,-32766,-32766,  315,
+        -32766,  281,-32766,  263,-32766,   73,   73,-32766,  107,  309,
+          309,  143,-32766,-32766,-32766,  642,-32766,  246,-32766,-32766,
+          532,  671, 1145,  772,-32766,  388,   -4,  865, 1259,-32766,
+        -32766,-32766,-32766,-32766,  781,-32766,-32766,-32766,  855, 1030,
+        -32766,  865,  867,  139,  662,-32766,-32766,-32766,  655,  309,
+          865,-32766,-32766,-32766, -500, -500,  526,-32766,  388, 1145,
+          101,  102,  103,  620,  637,-32766,-32766,-32766,-32766, -500,
+        -32766,  960,-32766,  855,-32766,   20,  865,-32766,-32766,  625,
+          677, -500,-32766,-32766,-32766,  435,-32766,  463,-32766,-32766,
+          962,  963, 1145,  626,-32766,  388,  638,  962,  963,-32766,
+        -32766,-32766,-32766,-32766,  609,-32766,  289,-32766,   46,  855,
+        -32766,  906,  407,  662,-32766,-32766,-32766,-32766,  287, 1016,
+         1183,-32766,-32766,  855,  286,  293,  781,-32766,  388, 1247,
+          890,  414,  855,  402,  891,-32766,  881,  538,  279, -231,
+         -231, -231, -107, -107, 1000,  414,  867,   26,  662, 1185,
+          578,  800, -107, -107, -107, -466, -107, -107,  855,  781,
+           47, -456,    7, 1176,   22,  841, -107, -107, -107,  348,
+          282,  283,  780,    9, -230, -230, -230,  281, 1173, -536,
+          414,   38,  867,   39,  662,   -4,  683,  684,  846,   32,
+          243, -107, -107,  930,  907,  680,  867,  123,  662, -231,
+          841, -107, -107, -107,  914,  867,  904,  662,  915,  844,
+          902, 1005,  497, 1008, 1166, 1167, 1168, 1169, 1163, 1164,
+         1009, 1006,  284,  285, 1007, 1013, 1170, 1165,  792, 1198,
+         1216,  867,   30,  662, -230,  304, 1250,  349,   71,  614,
+          842,  306,  309,  347,  663,  666,  670,  672, -107,  125,
+         -107,  673,  674,  678,  665,  288, 1254, 1256, -107, -107,
+         -107, -107, -107, -107, -107,  803,  802,  811,  888,  922,
+          810, 1255,  887,  886, 1131,  874,  882,  872,  912,  913,
+         1253, 1210, 1199, 1217, 1223, 1226,    0, -534, -508, -507,
+         -506,    1,   27,   28,   37,   41,   45,   70,   74,   75,
+           76,   77, -307, -256,   78,   79,  140,  149,  153,  239,
+          311,  334,  335,  336,  337,  338,  339,  340,  341,  342,
+          343,  344,  403,  404,    0, -254, -253,   12,   13,   14,
+           15,   17,  376,  454,  455,  462,  465,  466,  467,  468,
+          472,  473,  474,  481,  649, 1156, 1099, 1174,  977, 1135,
+         -258,  -99,   11,   16,   25,  278,  375,  571,  575,  601,
+          654, 1103, 1151, 1100, 1229,    0, -470, 1116,    0, 1177,
+            0,  309
     );
 
     protected $actionCheck = array(
-            2,    3,    4,    5,    6,    7,  115,    9,   10,   11,
-           12,   13,  157,    1,   31,   73,  161,    9,   10,   11,
-            8,   79,   79,   31,    1,  134,  135,    0,   86,   87,
-           88,    8,   90,    1,   92,   37,   94,    1,   30,   97,
+            2,    3,    4,    5,    6,    7,    0,    9,   10,   11,
+           12,   13,    1,  116,  117,   73,    1,    9,   10,   11,
+            1,   79,   79,  126,  127,  128,    1,    8,   86,   87,
+           88,    8,   90,    8,   92,   37,   94,    8,   30,   97,
            32,   33,   34,  101,  102,  103,  104,    9,   10,   11,
-          108,  109,   14,  105,   56,  107,  114,  115,  115,  116,
-          117,  118,  119,  120,  122,  105,  106,    8,   70,   71,
-           72,   73,   74,   75,   76,  115,    1,   79,  115,  116,
+          108,  109,   14,    1,   56,   79,  114,  115,  115,  116,
+          117,  118,  119,  120,  122,  105,  106,    1,   70,   71,
+           72,   73,   74,   75,   76,  115,    8,   79,  115,  116,
           117,  118,  119,  120,   86,   87,   88,   89,   90,   91,
            92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
           102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
           112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
-          122,  123,  124,  125,  126,  127,  128,  129,  130,    8,
+          122,  123,  124,  125,  126,  127,  128,  129,  130,  153,
             8,  133,  134,  135,  136,  137,  138,  139,  140,  141,
-            1,  158,   79,   69,    1,  147,  148,  149,  156,  151,
+          157,    1,    8,   69,  161,  147,  148,  149,    8,  151,
             9,   10,   11,    2,    3,    4,    5,    6,    7,  161,
-            9,   10,   11,   12,   13,    9,   10,   11,   73,  157,
-            9,   10,   11,  161,   79,   80,   49,   50,   51,   50,
-          157,   86,   87,   88,  161,   90,   30,   92,   37,   94,
-          158,   30,   97,   32,   33,   34,   35,  102,  103,  104,
-          118,  119,  120,  108,  109,  131,  132,   56,   79,  114,
-          115,   82,    9,   10,   11,   14,  153,  122,   79,    8,
-          146,   70,   71,   72,   73,   74,   75,   76,    9,   10,
-           79,  156,  158,   30,  160,   32,   33,   86,   87,   88,
+            9,   10,   11,   12,   13,    9,   10,   11,   73,  158,
+            9,   10,   11,  158,   79,   80,  157,    9,   10,  164,
+          161,   86,   87,   88,  161,   90,   30,   92,   37,   94,
+          161,   30,   97,   32,   33,   34,   35,  102,  103,  104,
+            8,  105,  106,  108,  109,  131,  132,   56,  156,  114,
+          115,  115,    9,   10,   11,   14,    8,  122,   31,    8,
+          146,   70,   71,   72,   73,   74,   75,   76,    8,  161,
+           79,    8,  158,   30,  160,   32,   33,   86,   87,   88,
            89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
            99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
           109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
           119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
-          129,  130,  161,  161,  133,  134,  135,  136,  137,  138,
-          139,  140,  141,   69,    9,   10,   11,  158,  147,  148,
-          149,  158,  151,    2,    3,    4,    5,    6,    7,    1,
+          129,  130,    8,   96,  133,  134,  135,  136,  137,  138,
+          139,  140,  141,   69,    9,   10,   11,  157,  147,  148,
+          149,  161,  151,    2,    3,    4,    5,    6,    7,    9,
             9,   10,   11,   12,   13,   30,    8,   32,   33,   34,
            35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
            45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
-            8,   56,    9,   10,   11,   52,   53,   54,    1,   56,
-           81,    8,    8,   68,    8,  131,  132,   56,    9,   10,
+            8,   56,    9,   10,   11,   52,   53,   54,    8,   56,
+          118,  119,  120,   68,    8,  131,  132,   56,    9,   10,
            11,   68,  161,   30,    8,   32,   33,   34,   35,   36,
-           37,   70,   71,   72,   73,   74,   75,   76,    8,   30,
+           37,   70,   71,   72,   73,   74,   75,   76,   31,   30,
            79,   32,   33,   34,   35,   36,    8,   86,   87,   88,
            89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
            99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
           109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
           119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
-          129,  130,   84,  164,  133,  134,  135,  136,  137,  138,
-          139,  140,  141,   96,    9,   10,   11,    8,  147,  148,
-          149,    2,    3,    4,    5,    6,    7,  105,   79,  107,
+          129,  130,   74,   75,  133,  134,  135,  136,  137,  138,
+          139,  140,  141,   84,    9,   10,   11,    1,  147,  148,
+          149,    2,    3,    4,    5,    6,    7,   14,   79,   50,
             8,   12,   13,    8,   15,   30,    1,   32,   33,   34,
-           35,   36,   37,   38,   39,   40,   41,   42,    8,   43,
-           44,   45,   46,   47,   48,   49,   50,   51,  105,    8,
-          107,  143,    8,   79,    1,   30,    8,    1,   49,   50,
-            8,  105,    8,  107,   55,  161,   57,   58,   59,   60,
-           61,   62,   63,   64,   65,   66,   67,    9,   69,   70,
-           71,   72,   73,    8,   31,  115,   77,   78,   79,  115,
+           35,   36,   37,   38,   39,   40,   41,   42,    1,   43,
+           44,   45,   46,   47,   48,   49,   50,   51,   79,    8,
+            1,   82,    8,   79,    1,   30,   74,   75,   49,   50,
+           14,  105,  143,  107,   55,  158,   57,   58,   59,   60,
+           61,   62,   63,   64,   65,   66,   67,    8,   69,   70,
+           71,   72,   73,   16,   31,  115,   77,   78,   79,  115,
            81,  152,  153,  154,   85,   86,   87,   88,  159,   90,
-           31,   92,   14,   94,  134,  135,   97,   98,  152,  105,
-          106,  102,  103,  104,  105,  106,    1,  108,  109,  115,
-          116,  117,   37,  114,  115,    1,  152,  153,  154,    8,
-          126,  122,  123,  124,   14,  156,   83,  158,   81,   83,
-          115,   84,  133,  134,   14,  136,  137,  138,  139,  140,
-          141,  142,   74,   75,   69,   31,   14,  148,  149,  134,
-          135,  152,  153,  154,  155,   96,   81,   69,   14,  160,
+           14,   92,   96,   94,  134,  135,   97,   98,  152,  105,
+          106,  102,  103,  104,  105,  106,    1,  108,  109,   14,
+           83,   31,   37,  114,  115,    1,  152,  153,  154,   16,
+           81,  122,  123,  124,   14,  105,   83,  107,   16,   69,
+          115,   14,  133,  134,   14,  136,  137,  138,  139,  140,
+          141,  142,  100,  101,   69,   31,   16,  148,  149,  134,
+          135,  152,  153,  154,  155,   16,   81,   69,   16,  160,
            85,  162,  163,  164,   16,   17,   18,   19,   20,   21,
-           22,   23,   24,   25,   26,   27,   28,   29,   14,   74,
-           75,   76,   74,   75,  100,  101,    1,    1,   83,  110,
-          111,  144,  145,   14,   89,   81,   91,   16,   93,  156,
-           95,  158,  156,   16,  158,   37,   58,   59,  133,  134,
-          105,  136,  137,  138,  139,  140,  141,   69,   16,  131,
-          132,  116,  117,  148,  149,   69,   16,    1,  105,  106,
-          125,  126,  127,  128,  146,  160,  105,  106,  163,  164,
-          126,   73,  127,  128,   31,   16,  158,   79,  160,   16,
-           16,   79,   16,   31,   86,   87,   88,   31,   90,   31,
-           92,  156,   94,  158,  159,   97,   81,   81,    1,  155,
+           22,   23,   24,   25,   26,   27,   28,   29,   16,   74,
+           75,   76,  105,  156,  107,  158,    1,    1,   83,  105,
+          106,  131,  132,   16,   89,   81,   91,  158,   93,  156,
+           95,  158,  105,  164,  107,   37,   58,   59,  133,  134,
+          105,  136,  137,  138,  139,  140,  141,   69,  158,  131,
+          132,  116,  117,  148,  149,   69,    1,    1,  110,  111,
+          125,  126,  127,  128,  146,  160,  156,   31,  163,  164,
+          126,   73,   31,  156,   31,  158,  158,   79,  160,   31,
+           31,   79,   31,   31,   86,   87,   88,   31,   90,   31,
+           92,  156,   94,  158,  159,   97,   81,   81,   31,  155,
           102,  103,  104,   31,  160,   31,  108,  109,  164,  131,
           132,   31,  114,  115,   31,   31,   73,  131,  132,   31,
-          122,   31,   79,   31,  146,   31,    1,   31,   30,   86,
-           87,   88,  146,   90,   31,   92,  158,   94,   31,   83,
-           97,   31,  126,   31,  158,  102,  103,  104,   31,  151,
-           37,  108,  109,   73,   31,  153,   31,  114,  115,   79,
-          158,    1,   69,   31,   31,  122,   86,   87,   88,   35,
-           90,  155,   92,   35,   94,  160,  160,   97,   81,  164,
-          164,   35,  102,  103,  104,   37,   73,   37,  108,  109,
-           35,   31,   79,   35,  114,  115,    0,    1,   56,   86,
-           87,   88,  122,   90,   68,   92,   69,   94,   83,   79,
-           97,    1,  156,  115,  158,  102,  103,  104,   89,   76,
-            1,  108,  109,   73,  131,  132,   81,  114,  115,   79,
-           81,   84,  134,  135,   82,  122,   86,   87,   88,  146,
-           90,   84,   92,   83,   94,   91,    1,   97,   95,   88,
-           31,  158,  102,  103,  104,  158,   73,   93,  108,  109,
-          121,  164,   79,   96,  114,  115,   96,   96,   99,   86,
-           87,   88,  122,   90,   99,   92,  113,   94,   69,   83,
-           97,  156,  126,  158,  112,  102,  103,  104,  115,  130,
-          146,  108,  109,   83,   69,  129,  155,  114,  115,  159,
-          126,  105,   83,  107,  126,  122,  129,  156,  112,   99,
+          122,   31,   79,   31,  146,   31,    1,   31,   31,   86,
+           87,   88,  146,   90,   79,   92,  158,   94,   31,   83,
+           97,   35,  126,   35,  158,  102,  103,  104,   37,  151,
+           37,  108,  109,   73,   35,  153,   31,  114,  115,   79,
+          158,    1,   69,   30,   35,  122,   86,   87,   88,   35,
+           90,  155,   92,   56,   94,  160,  160,   97,   68,  164,
+          164,   69,  102,  103,  104,   76,   73,   37,  108,  109,
+           88,   31,   79,   79,  114,  115,    0,    1,   82,   86,
+           87,   88,  122,   90,   81,   92,   84,   94,   83,   81,
+           97,    1,  156,  158,  158,  102,  103,  104,   91,  164,
+            1,  108,  109,   73,  131,  132,   84,  114,  115,   79,
+           49,   50,   51,   89,   93,  122,   86,   87,   88,  146,
+           90,  115,   92,   83,   94,   96,    1,   97,  115,   95,
+           31,  158,  102,  103,  104,   96,   73,   96,  108,  109,
+          134,  135,   79,   99,  114,  115,   99,  134,  135,   86,
+           87,   88,  122,   90,  112,   92,  113,   94,   69,   83,
+           97,  156,  126,  158,  115,  102,  103,  104,  130,  121,
+          143,  108,  109,   83,  129,  129,   81,  114,  115,   84,
+          126,  105,   83,  107,  126,  122,  151,  150,  112,   99,
           100,  101,  116,  117,    1,  105,  156,   69,  158,  143,
-          152,  125,  126,  127,  128,  143,  116,  117,   83,   81,
+          150,  125,  126,  127,  128,  146,  116,  117,   83,   81,
            69,  146,  146,   85,  146,  125,  126,  127,  128,  146,
-          131,  132,  150,  147,   99,  100,  101,  150,  157,  151,
-          105,  156,  156,  159,  158,  159,  131,  132,  156,  156,
-          156,  116,  117,  156,  156,  159,  156,  158,  158,  159,
+          131,  132,  152,  147,   99,  100,  101,  155,  157,  160,
+          105,  156,  156,  156,  158,  159,  156,  156,  156,  144,
+          145,  116,  117,  156,  156,  159,  156,  158,  158,  159,
           125,  126,  127,  128,  156,  156,  156,  158,  156,  156,
-          156,  160,  134,  158,  136,  137,  138,  139,  140,  141,
-          156,  156,  131,  132,  156,  156,  148,  149,  156,  156,
-          159,  156,  158,  158,  159,  158,  157,  146,  160,  157,
-          157,  163,  164,  157,  157,  160,  158,  158,  105,  158,
-          107,  158,  158,  158,  158,  112,  158,  158,  115,  116,
-          117,  118,  119,  120,  121,  158,  158,  161,  159,  159,
-          159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
+          156,  156,  134,  156,  136,  137,  138,  139,  140,  141,
+          156,  156,  131,  132,  156,  156,  148,  149,  157,  157,
+          157,  156,  158,  158,  159,  158,  157,  146,  160,  157,
+          159,  163,  164,  158,  158,  158,  158,  158,  105,  158,
+          107,  158,  158,  158,  158,  112,  159,  159,  115,  116,
+          117,  118,  119,  120,  121,  159,  159,  159,  159,  159,
           159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
-           -1,  160,  160,  160,  160,  160,  160,  160,  160,  160,
+          159,  159,  159,  159,  159,  159,   -1,  160,  160,  160,
+          160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
           160,  160,  159,  161,  160,  160,  160,  160,  160,  160,
           160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
-          160,  160,  160,  160,  160,  160,  160,   -1,  161,  161,
+          160,  160,  160,  160,   -1,  161,  161,  161,  161,  161,
           161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
           161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
           161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
-          161,  161,  161,  161,  161,  161,  161,   -1,  162,  162,
-           -1,  163
+          161,  161,  161,  161,  161,   -1,  162,  162,   -1,  163,
+           -1,  164
     );
 
     protected $actionBase = array(
-            0,   -2,  151,  555,  816,  830,  865,  379,  717,  622,
-          862,  676,  780,  780,  839,  780,  493,  745,  301,  301,
-          -57,  301,  301,  496,  496,  496,  618,  618,  618,  618,
+            0,   -2,  151,  555,  816,  830,  865,  489,  379,  622,
+          858,  676,  780,  780,  839,  780,  493,  745,  301,  301,
+          -57,  301,  301,  477,  477,  477,  618,  618,  618,  618,
           -58,  -58,   95,  700,  733,  770,  663,  803,  803,  803,
           803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
           803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
@@ -496,64 +496,63 @@
           803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
           803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
           803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
-          803,  803,  803,  803,  803,  803,  803,  803,   75,   -8,
-          347,  629,  986,  992,  988,  993,  984,  983,  987,  989,
-          994,  915,  916,  753,  917,  918,  919,  920,  990,  877,
-          985,  991,  285,  285,  285,  285,  285,  285,  285,  285,
+          803,  803,  803,  803,  803,  803,  803,  803,   52,  530,
+          446,  570,  984,  990,  986,  991,  982,  981,  985,  987,
+          992,  911,  912,  727,  913,  914,  915,  916,  988,  872,
+          983,  989,  285,  285,  285,  285,  285,  285,  285,  285,
           285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
-          285,  285,  285,  508,   38,  219,  141,  141,  141,  141,
+          285,  285,  285,  300,   38,  168,  141,  141,  141,  141,
           141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
           141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
           156,  156,  156,  203,  525,  525,    8,  598,  161,  868,
           868,  868,  868,  868,  868,  868,  868,  868,  868,  349,
           333,  435,  435,  435,  435,  435,  436,  436,  436,  436,
-          933,  564,  636,  635,  465,  -52,  127,  127,  718,  718,
-          759,  410,  410,  410,  444, -109, -109, -109,   74,  538,
-          396,  348,  414,  414,  414,  414,  414,  802,  998,  139,
-          139,  139,  139,  414,  414,  414,  606,  713,  713,  881,
-          293,  293,  293,  713,  383,  777,  497,  383,  497,  129,
-          793,   32,  -40, -145,  793,  829,  845,   23,   12,  788,
-          573,  788,  767,  863,  898,  995,   82,  789,  913,  795,
-          914,  224,  678,  981,  981,  981,  981,  981,  981,  981,
-          981,  981,  981,  981,  269,  982,   63,  269,  269,  269,
-          529,   63,  518,  558,   63,  778,  982,   75,  805,   75,
-           75,   75,   75,  944,   75,   75,   75,   75,   75,   75,
-          949,  727,  723,  692,  -17,   75,   -8,  143,  143,  419,
-           36,  143,  143,  143,  143,   75,   75,  565,  573,  762,
-          812,  581,  817,  344,  762,  762,  762,  509,  121,  201,
-          122,  352,  750,  750,  768,  769,  924,  924,  750,  765,
-          750,  769,  929,  750,  768,  768,  750,  924,  768,  761,
-          343,  488,  452,  470,  768,  768,  492,  924,  370,  768,
-          768,  750,  750,  750,  797,  768,  494,  750,  356,  346,
-          750,  750,  768,  768,  797,  786,   59,  779,  924,  924,
-          924,  797,  455,  779,  779,  822,  823,  792,  732,  439,
-          378,  561,  332,  768,  732,  732,  750,  481,  792,  732,
-          792,  732,  818,  732,  732,  732,  792,  732,  765,  484,
-          732,  768,  515,  211,  732,   27,  930,  931,  672,  934,
-          927,  935,  955,  936,  937,  879,  794,  798,  942,  928,
-          938,  926,  925,  752,  631,  637,  806,  764,  923,  756,
-          756,  756,  921,  756,  756,  756,  756,  756,  756,  756,
-          756,  631,  811,  813,  776,  781,  945,  652,  660,  796,
-          814,  996,  997,  944,  976,  939,  771,  679,  962,  946,
-          760,  867,  947,  948,  963,  977,  978,  826,  757,  861,
-          899,  869,  950,  883,  756,  930,  937,  928,  938,  926,
-          925,  716,  714,  710,  712,  708,  704,  694,  703,  730,
-          875,  841,  872,  949,  922,  631,  873,  958,  864,  964,
-          965,  878,  790,  772,  876,  900,  951,  952,  953,  884,
-          979,  885,  815,  959,  896,  966,  791,  901,  967,  968,
-          969,  970,  886,  902,  888,  824,  749,  932,  773,  903,
-          528,  766,  775,  956,  560,  943,  889,  904,  905,  971,
-          972,  973,  906,  907,  940,  827,  960,  784,  961,  957,
-          828,  838,  570,  754,  758,  582,  594,  908,  909,  941,
-          737,  763,  840,  842,  980,  910,  614,  843,  683,  911,
-          975,  684,  686,  774,  897,  808,  783,  787,  954,  743,
-          844,  912,  854,  855,  858,  974,  859,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+          933,  564,  636,  635,  465,  470,  801,  801,  753,  753,
+          788,  746,  746,  746,  410,  410,  410,   74,  538,  396,
+          359,  414,  675,  675,  675,  675,  414,  414,  414,  414,
+          796,  996,  414,  414,  414, -103,  606,  713,  713,  881,
+          293,  293,  293,  713,  547,  762,  835,  547,  835,   15,
+          409,  789,  -40,   96,  -17,  789,  510,  829,  140,   19,
+          810,  444,  810,  742,  859,  886,  993,  232,  784,  909,
+          787,  910,  224,  661,  979,  979,  979,  979,  979,  979,
+          979,  979,  979,  979,  979,  997,  980,  -24,  997,  997,
+          997,  568,  -24,  358,  422,  -24,  754,  980,   52,  805,
+           52,   52,   52,   52,  941,   52,   52,   52,   52,   52,
+           52,  946,  708,  704,  668,  347,   52,  530,   11,   11,
+          537,   66,   11,   11,   11,   11,   52,   52,  444,  737,
+          777,  534,  790,   68,  737,  737,  737,  187,   23,  201,
+           29,  527,  734,  734,  731,  748,  921,  921,  734,  743,
+          734,  748,  926,  734,  731,  731,  921,  731,  812,  208,
+          452,  332,  346,  731,  731,  455,  921,  223,  731,  731,
+          734,  734,  734,  731,  481,  734,  220,  211,  734,  734,
+          731,  731,  785,  786,  122,  921,  921,  921,  786,  340,
+          778,  778,  820,  821,  782,  712,  308,  274,  509,  192,
+          731,  712,  712,  734,  356,  782,  712,  782,  712,  775,
+          712,  712,  712,  782,  712,  743,  378,  712,  731,  484,
+          134,  712,    6,  927,  928,  656,  929,  924,  930,  952,
+          931,  934,  876,  939,  925,  935,  923,  922,  717,  507,
+          553,  806,  799,  920,  730,  730,  730,  918,  730,  730,
+          730,  730,  730,  730,  730,  730,  507,  811,  813,  776,
+          722,  942,  562,  580,  767,  871,  994,  995,  794,  798,
+          941,  974,  936,  815,  589,  960,  943,  826,  867,  944,
+          945,  961,  975,  976,  887,  732,  888,  896,  861,  947,
+          877,  730,  927,  934,  925,  935,  923,  922,  703,  694,
+          687,  692,  678,  672,  669,  671,  710,  917,  809,  862,
+          946,  919,  507,  863,  956,  864,  962,  963,  875,  779,
+          736,  869,  897,  948,  949,  950,  878,  977,  817,  957,
+          932,  964,  781,  898,  965,  966,  967,  968,  899,  879,
+          883,  822,  764,  954,  774,  900,  443,  739,  749,  953,
+          486,  940,  884,  901,  902,  969,  970,  971,  903,  937,
+          827,  958,  761,  959,  955,  828,  838,  526,  726,  728,
+          545,  560,  904,  905,  938,  714,  729,  840,  842,  978,
+          906,  567,  843,  592,  907,  973,  612,  627,  747,  885,
+          808,  783,  769,  951,  716,  844,  908,  845,  847,  854,
+          972,  855,    0,    0,    0,    0,    0,    0,    0,    0,
             0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-            0,    0,    0,    0,    0,  449,  449,  449,  449,  449,
-          449,  301,  301,  301,  301,  449,  449,  449,  449,  449,
-          449,  449,    0,    0,  301,    0,    0,  449,  449,  449,
-          449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
+            0,    0,    0,    0,    0,    0,    0,    0,    0,  449,
+          449,  449,  449,  449,  449,  301,  301,  301,  301,  449,
+          449,  449,  449,  449,  449,  449,    0,    0,  301,    0,
+            0,  449,  449,  449,  449,  449,  449,  449,  449,  449,
           449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
           449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
           449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
@@ -566,40 +565,40 @@
           449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
           449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
           449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
-          449,  449,  285,  285,  285,  285,  285,  285,  285,  285,
+          449,  449,  449,  449,  449,  449,  285,  285,  285,  285,
           285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
-          285,  285,  285,  285,  285,  285,    0,    0,    0,    0,
+          285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
             0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,  285,  285,  285,
+            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+            0,  285,  285,  285,  285,  285,  285,  285,  285,  285,
           285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
           285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
-          285,  285,  285,  285,  285,  285,  285,  285,  414,  414,
-          285,    0,  285,  414,  414,  414,  414,  414,  414,  414,
-          414,  414,  414,  285,  285,  285,  285,  285,  285,  285,
-          293,  293,  293,  293,  761,  414,  414,  414,  414,  -37,
-          293,  293,  414,  414,  -37,  414,  414,  414,  761,  414,
-          414,  414,    0,    0,   63,  497,    0,    0,    0,    0,
-            0,  497,  497,  269,  269,  269,  269,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,    0,   63,  497,
-            0,   63,    0,  765,  414,  269,  761,  308,  414,    0,
-            0,    0,    0,   63,  765,   63,  497,  143,   75,  308,
-            0,  534,  534,  534,  534,    0,  573,  761,  761,  761,
-          761,  761,  761,  761,  761,  761,  761,  761,    0,  761,
-            0,    0,    0,    0,    0,    0,    0,    0,    0,  765,
-          768,    0,  924,    0,    0,    0,    0,  750,    0,    0,
-            0,    0,    0,    0,  750,  929,  768,  768,    0,    0,
-            0,    0,    0,    0,  765,    0,    0,    0,    0,    0,
-            0,    0,    0,  756,  790,    0,  790,    0,  756,  756,
-          756
+          285,  285,  414,  414,  285,    0,  285,  414,  414,  414,
+          414,  414,  414,  414,  414,  414,  414,  285,  285,  285,
+          285,  285,  285,  285,  293,  293,  293,  293,  812,  414,
+          414,  414,  414,  -37,  293,  293,  414,  414,  -37,  414,
+          414,  414,  414,  414,  414,    0,    0,  -24,  835,    0,
+          743,  743,  743,  743,    0,    0,    0,    0,  835,  835,
+            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+            0,    0,  -24,  835,    0,  -24,    0,  743,  743,  414,
+          812,  812,   25,  414,    0,    0,    0,    0,  -24,  743,
+          -24,  835,   11,   52,   25,    0,  492,  492,  492,  492,
+            0,  444,  812,  812,  812,  812,  812,  812,  812,  812,
+          812,  812,  812,  743,  812,    0,  743,  743,  743,    0,
+            0,    0,    0,    0,  743,  731,    0,  921,    0,    0,
+            0,    0,  734,    0,    0,    0,    0,    0,    0,  734,
+          926,  731,  731,    0,    0,    0,    0,    0,    0,  743,
+            0,    0,    0,    0,    0,    0,    0,  730,  779,    0,
+          779,    0,  730,  730,  730
     );
 
     protected $actionDefault = array(
             3,32767,   99,32767,32767,32767,32767,32767,32767,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,   97,
-        32767,32767,32767,32767,32767,32767,  555,  555,  555,  555,
-          236,   99,32767,32767,32767,32767,  431,  350,  350,  350,
-        32767,32767,  499,  499,  499,  499,  499,  499,32767,32767,
-        32767,32767,32767,32767,  431,32767,32767,32767,32767,32767,
+        32767,32767,32767,32767,32767,32767,  554,  554,  554,  554,
+          235,   99,32767,32767,32767,32767,  430,  349,  349,  349,
+        32767,32767,  498,  498,  498,  498,  498,  498,32767,32767,
+        32767,32767,32767,32767,  430,32767,32767,32767,32767,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
@@ -610,129 +609,125 @@
            35,    5,    6,    8,    9,   48,   15,32767,32767,32767,
         32767,32767,   99,32767,32767,32767,32767,32767,32767,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
-        32767,  548,32767,32767,32767,32767,32767,32767,32767,32767,
+        32767,  547,32767,32767,32767,32767,32767,32767,32767,32767,
+        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
+        32767,32767,  434,  413,  414,  416,  417,  348,  499,  553,
+          292,  550,  347,  142,  304,  294,  223,  295,  239,  240,
+          266,  344,  146,  378,  431,  380,  429,  433,  379,  354,
+          359,  360,  361,  362,  363,  364,  365,  366,  367,  368,
+          369,  370,  371,  352,  353,  432,  435,  436,  439,  440,
+          410,  409,  408,  376,32767,32767,  377,  351,  381,32767,
+        32767,32767,32767,32767,32767,32767,32767,   99,32767,  383,
+          382,  399,  400,  397,  398,  401,  402,  403,  404,  405,
+        32767,32767,32767,32767,32767,  327,  390,  391,  283,  283,
+          329,32767,32767,32767,32767,32767,32767,  492,  407,32767,
+        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
+        32767,32767,   99,32767,   97,32767,  494,  373,  375,  462,
+          385,  386,  384,  355,32767,  469,32767,   99,  471,32767,
+        32767,32767,  108,32767,32767,32767,  493,32767,  500,  500,
+        32767,  455,   97,32767,32767,32767,32767,  261,32767,32767,
+        32767,32767,  561,  455,  107,  107,  107,  107,  107,  107,
+          107,  107,  107,  107,  107,32767,  107,32767,32767,32767,
+           97,  185,32767,  249,  251,   99,  515,  190,32767,  474,
+        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
+        32767,32767,  467,  190,  190,32767,32767,32767,32767,32767,
+        32767,32767,32767,32767,32767,32767,32767,32767,  455,  395,
+          135,32767,  135,  500,  387,  388,  389,  457,  500,  500,
+          500,32767,32767,32767,  190,32767,  472,  472,   97,   97,
+           97,   97,  467,32767,  190,  190,32767,  190,  108,   96,
+           96,   96,   96,  190,  190,   96,  100,   98,  190,  190,
+        32767,32767,32767,  190,   96,32767,   98,   98,32767,32767,
+          190,  190,  206,  204,   98,32767,  519,  520,  204,   98,
+          208,  208,  228,  228,  446,  285,   98,   96,   98,   98,
+          190,  285,  285,32767,   98,  446,  285,  446,  285,  192,
+          285,  285,  285,  446,  285,32767,   98,  285,  190,   96,
+           96,  285,32767,32767,32767,  457,32767,32767,32767,32767,
+        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
+          487,32767,  504,  517,  393,  394,  396,  502,  418,  419,
+          420,  421,  422,  423,  424,  426,  549,32767,  461,32767,
+        32767,32767,32767,  303,  559,32767,  559,32767,32767,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
-        32767,32767,  435,  414,  415,  417,  418,  349,  500,  554,
-          293,  551,  348,  142,  305,  295,  224,  296,  240,  241,
-          267,  345,  146,  379,  432,  381,  430,  434,  380,  355,
-          360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
-          370,  371,  372,  353,  354,  433,  436,  437,  440,  441,
-          411,  410,  409,  377,32767,32767,  378,  352,  382,32767,
-        32767,32767,32767,32767,32767,32767,32767,   99,32767,  384,
-          383,  400,  401,  398,  399,  402,  403,  404,  405,  406,
-        32767,32767,32767,32767,32767,  328,  391,  392,  284,  284,
-          330,32767,32767,32767,  108,32767,32767,32767,  493,  408,
+        32767,32767,32767,32767,  560,32767,  500,32767,32767,32767,
+        32767,  392,    7,   74,   41,   42,   50,   56,  478,  479,
+          480,  481,  475,  476,  482,  477,32767,  483,  525,32767,
+        32767,  501,  552,32767,32767,32767,32767,32767,32767,  135,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
-        32767,32767,32767,   99,32767,   97,  495,  374,  376,  463,
-          386,  387,  385,  356,32767,  470,32767,   99,  472,32767,
-        32767,32767,32767,32767,32767,  494,32767,  501,  501,32767,
-          456,   97,32767,32767,32767,32767,  262,32767,32767,32767,
-        32767,  562,  456,  107,  107,  107,  107,  107,  107,  107,
-          107,  107,  107,  107,32767,  107,32767,32767,32767,   97,
-          185,32767,  250,  252,   99,  516,  190,32767,  475,32767,
+          487,32767,  133,32767,32767,32767,32767,32767,32767,32767,
+        32767,32767,32767,  500,32767,32767,32767,  280,  282,32767,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
-        32767,  468,  190,  190,32767,32767,32767,32767,32767,32767,
-        32767,32767,32767,32767,32767,32767,32767,32767,  456,  396,
-          135,32767,  135,  501,  388,  389,  390,  458,  501,  501,
-          501,32767,32767,32767,  190,32767,  473,  473,   97,   97,
-           97,   97,  468,32767,  190,  190,32767,32767,  190,  108,
-           96,   96,   96,   96,  190,  190,   96,  100,   98,  190,
-          190,32767,32767,32767,  205,  190,   96,32767,   98,   98,
-        32767,32767,  190,  190,  205,  207,   98,  209,32767,  520,
-          521,  205,   98,  209,  209,  229,  229,  447,  286,   98,
-           96,   98,   98,  190,  286,  286,32767,   98,  447,  286,
-          447,  286,  192,  286,  286,  286,  447,  286,32767,   98,
-          286,  190,   96,   96,  286,32767,32767,32767,  458,32767,
+        32767,32767,32767,32767,  500,32767,32767,32767,  268,  270,
         32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
-        32767,32767,32767,32767,32767,  488,32767,  505,  518,  394,
-          395,  397,  503,  419,  420,  421,  422,  423,  424,  425,
-          427,  550,32767,  462,32767,32767,32767,32767,  304,  560,
-        32767,  560,32767,32767,32767,32767,32767,32767,32767,32767,
-        32767,32767,32767,32767,32767,32767,32767,  561,32767,  501,
-        32767,32767,32767,32767,  393,    7,   74,   41,   42,   50,
-           56,  479,  480,  481,  482,  476,  477,  483,  478,32767,
-          484,  526,32767,32767,  502,  553,32767,32767,32767,32767,
-        32767,32767,  135,32767,32767,32767,32767,32767,32767,32767,
-        32767,32767,32767,32767,  488,32767,  133,32767,32767,32767,
-        32767,32767,32767,32767,32767,32767,32767,  501,32767,32767,
-        32767,  281,  283,32767,32767,32767,32767,32767,32767,32767,
-        32767,32767,32767,32767,32767,32767,32767,32767,32767,  501,
-        32767,32767,32767,  269,  271,32767,32767,32767,32767,32767,
-        32767,32767,32767,32767,32767,32767,32767,32767,  266,32767,
-        32767,  344,32767,32767,32767,32767,  324,32767,32767,32767,
-        32767,32767,32767,32767,32767,32767,32767,  148,  148,    3,
-            3,  307,  148,  148,  148,  307,  307,  148,  307,  307,
-          148,  148,  148,  148,  148,  148,  180,  244,  247,  229,
-          229,  148,  316,  148
+        32767,32767,32767,  265,32767,32767,  343,32767,32767,32767,
+        32767,  323,32767,32767,32767,32767,32767,32767,32767,32767,
+        32767,32767,  148,  148,    3,    3,  306,  148,  148,  148,
+          306,  148,  306,  306,  148,  148,  148,  148,  148,  148,
+          180,  243,  246,  228,  228,  148,  315,  148
     );
 
     protected $goto = array(
-          190,  190,  655,  781,  663,  399,  629,  964,  971,  972,
-          393,  297,  298,  317,  549,  303,  398,  318,  400,  607,
-          361,  365,  534,  572,  576,  161,  161,  161,  161,  187,
+          190,  190,  650, 1020,  979,  399,  624,  798, 1019,  658,
+          393,  297,  298,  318,  546,  303,  398,  319,  400,  603,
+          362,  366,  531,  569,  573,  161,  161,  161,  161,  187,
           187,  171,  173,  209,  191,  204,  187,  187,  187,  187,
           187,  188,  188,  188,  188,  188,  188,  182,  183,  184,
-          185,  186,  206,  204,  207,  509,  510,  389,  511,  513,
-          514,  515,  516,  517,  518,  519,  520, 1053,  162,  163,
+          185,  186,  206,  204,  207,  504,  505,  389,  506,  508,
+          509,  510,  511,  512,  513,  514,  515, 1046,  162,  163,
           164,  189,  165,  166,  167,  160,  168,  169,  170,  172,
           203,  205,  208,  230,  233,  236,  238,  249,  250,  251,
           252,  253,  254,  255,  256,  257,  258,  259,  266,  267,
-          300,  301,  302,  394,  395,  396,  554,  210,  211,  212,
+          300,  301,  302,  394,  395,  396,  551,  210,  211,  212,
           213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
           223,  224,  174,  225,  175,  192,  193,  194,  231,  182,
-          183,  184,  185,  186,  206, 1053,  195,  176,  177,  178,
+          183,  184,  185,  186,  206, 1046,  195,  176,  177,  178,
           196,  192,  179,  232,  197,  159,  198,  226,  180,  199,
-          227,  228,  181,  229,  200,  201,  202,  807,  611,  611,
-          804,  274,  274,  274,  274,  976,  973,  974,  592,  626,
-         1147,  594,  594,  571,  533,  526, 1182, 1182, 1182, 1182,
-         1182, 1182, 1182, 1182, 1182, 1182, 1250, 1250,  986,  328,
-          812, 1027,  860,  855,  856,  869, 1026,  813,  857,  810,
-          858,  859,  811,  803, 1251, 1251,  805, 1250,  863,  912,
-          936,  910,  910,  908,  910,  687,  363,  526, 1003, 1004,
-          533, 1253,  525,  945,  940, 1251,  542,  543,  820, 1148,
-          838,  370,  552,  832,  308,  288,  819,  573,  864,  795,
-          865, 1200, 1200,  785,  587,  588, 1200, 1200, 1200, 1200,
-         1200, 1200, 1200, 1200, 1200, 1200, 1151, 1151, 1151,  968,
-         1149, 1208, 1209,  968,  968,  472,  968,  968,  968,  779,
-          968,  968,  968, 1232, 1232, 1232, 1232, 1151, 1151, 1151,
-         1151, 1151,  785,   21,  785,  546, 1198, 1198, 1151, 1151,
-         1151, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
-         1198,  523,  523,  523,  325,  876,  512,  512,  392,  877,
-          582,  512,  512,  512,  512,  512,  512,  512,  512,  512,
-          512, 1240,  427,  906,  906,  906,  906,  387,  387,  387,
-          387,  602,  604,  427,  900,  907,  540,  904,  379,  662,
-          688,  606,  608,  933,    5,  627,    6,  539,  645,  649,
-          947,  653,  661,  943,  586,  377,  378,  800, 1019,  570,
-          635,  666,  636,  359,  381,  382,  383,  453,  646,  652,
-          652,  384,  658, 1017,  454,  323,  580,  595,  598,  599,
-          600,  601,  619,  620,  621,  665,  527,  537, 1267,  450,
-         1225, 1226,  527,  545,  537,  800,  628,  362, 1101,  528,
-          434,  521,  521,  521,  521, 1227, 1228, 1132,  890,  405,
-          575, 1133, 1136,  891, 1137,  444,  553,  445,  419,  419,
-          419,  830,  329,  330, 1258, 1259, 1222, 1222, 1222,  622,
-          623,  431,  637,  638, 1211,  439,  439,  550,  585,  881,
-         1041,  797,  319,  833,  821,  991,  439,  590,  995,  825,
-          828,  369,  822,  952, 1234, 1234, 1234, 1234,  915,  648,
-          824,  955,  632,  931,  473,  691,  474,  992,  818, 1144,
-          451,  996,  480,    0,  834, 1036, 1218,  917,    0,    0,
-         1143,    0,  905,    0,    0,    0,    0,    0,  528,    0,
-            0,  419,  419,  419,  419,  419,  419,  419,  419,  419,
-          419,  419,  800,  419, 1034,  837,    0,    0,    0,  994,
-            0,    0, 1220, 1220,  994,    0,    0,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+          227,  228,  181,  229,  200,  201,  202,  312,  312,  312,
+          312,  801,  577,  591,  594,  595,  596,  597,  615,  616,
+          617,  660,  799,  329,  530,  521,  590,  590,  568,  794,
+          794, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
+         1175,  858,  779,  859,  806,  775,  854,  849,  850,  863,
+          905,  807,  851,  804,  852,  853,  805,  295,  295,  295,
+          295,  832,  857,  607,  607,  364,  521,  773,  530,  969,
+          966,  967,  996,  997,  539,  540,  957,  964,  965,  371,
+          549,  588,  621,  779,  570,  779, 1244, 1244, 1193, 1193,
+          543,  584,  585, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
+         1193, 1193, 1193,  326, 1244, 1144, 1144, 1144,  961, 1140,
+         1233,  469,  961,  961,  926,  961,  961,  961,  961,  961,
+          961, 1225, 1225, 1225, 1225, 1144,  470,  360,  471,   21,
+         1144, 1144, 1144, 1144,  477,  794, 1144, 1144, 1144,  332,
+          437,  437,  567, 1012,  618,  661,  632,  633,  542,  332,
+          332,  437,  623,  647,  647,  870,  653, 1010, 1094,  871,
+          447, 1218, 1219,  814,  332,  332, 1141,  332,  826, 1260,
+            5,  813,    6,  518,  518,  518,  789,  320, 1191, 1191,
+          523,  791,  332, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
+         1191, 1191, 1191,  426,  405, 1142, 1201, 1202,  899,  899,
+          899,  899,  370,  536,  426,  893,  900,  897,  380,  657,
+          583,  507,  507,  308,  291, 1204,  507,  507,  507,  507,
+          507,  507,  507,  507,  507,  507, 1243, 1243,  516,  516,
+          516,  516, 1220, 1221,  819,  875, 1034,  572,  547,  582,
+          643,  522,  534,  587, 1243,  816,  948,  522,  945,  534,
+          685,  985,  363,  330,  331,  818,  828,  627,  924, 1246,
+          392, 1137,  579,  812,  418,  418,  418,  448,  523,  550,
+          442,  443,  989, 1029,  824, 1136,  910, 1251, 1252,  451,
+          600,  537, 1215, 1215, 1215,  682,  602,  604,    0,  622,
+            0,    0,  640,  644,  940,  648,  656,  936,    0,    0,
+          797,    0,  822, 1227, 1227, 1227, 1227,  929,  903,  903,
+          901,  903,  681,    0,  270,  519,  519,    0,    0,  520,
+          938,  933,    0,  827,  815,  984,    0,    0,  988,    0,
+         1211,    0,    0,    0, 1139,    0,    0,  908,  418,  418,
+          418,  418,  418,  418,  418,  418,  418,  418,  418,    0,
+          418,    0,  378,  379,    0,    0,    0,  630,    0,  631,
+          898,  382,  383,  384,    0,  641,  987,    0,  385, 1213,
+         1213,  987,  324, 1125,  884,    0,    0, 1126, 1129,  885,
+         1130,    0, 1027,  831,    0,    0,    0,    0,    0,    0,
             0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
             0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0, 1146,    0,    0,
             0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
             0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-            0,    0,    0,    0,  270,  524,  524,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,    0,    0,  950,
-          950
+            0,    0,    0,    0,    0,    0,  943,  943
     );
 
     protected $gotoCheck = array(
-           41,   41,   71,    6,    8,   64,   64,  105,  105,  105,
+           41,   41,   71,  128,  111,   64,   64,   25,  128,    8,
            64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
            57,   57,   57,   57,   57,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
@@ -747,93 +742,90 @@
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
-           41,   41,   41,   41,   41,   41,   41,   14,  107,  107,
-           25,   22,   22,   22,   22,  107,  107,  107,   54,   54,
-           19,   99,   99,  114,   74,   74,   99,   99,   99,   99,
-           99,   99,   99,   99,   99,   99,  164,  164,  111,   88,
-           14,  128,   14,   14,   14,   14,  128,   14,   14,   14,
-           14,   14,   14,   24,  165,  165,   26,  164,   14,   48,
-           24,   24,   24,   24,   24,   24,   74,   74,   14,   14,
-           74,  164,   24,   24,   24,  165,   74,   74,   34,   19,
-           44,   74,   74,   34,  151,  151,   34,   74,   63,   19,
-           63,  152,  152,   11,   74,   74,  152,  152,  152,  152,
-          152,  152,  152,  152,  152,  152,   71,   71,   71,   71,
-           19,   19,   19,   71,   71,   74,   71,   71,   71,    5,
-           71,   71,   71,    8,    8,    8,    8,   71,   71,   71,
-           71,   71,   11,   74,   11,  154,  153,  153,   71,   71,
-           71,  153,  153,  153,  153,  153,  153,  153,  153,  153,
-          153,   18,   18,   18,  161,   71,  155,  155,   12,   71,
-           12,  155,  155,  155,  155,  155,  155,  155,  155,  155,
-          155,  163,   18,   18,   18,   18,   18,   23,   23,   23,
-           23,   81,   81,   18,   18,   18,   47,   84,   84,   84,
-           47,   47,   47,   94,   45,   47,   45,    8,   47,   47,
-           47,   47,   47,   47,    8,   78,   78,   21,    7,    7,
-           78,    7,   78,   60,   78,   78,   78,   80,   78,    7,
-            7,   78,    7,    7,   80,   78,   77,   77,   77,   77,
-           77,   77,   77,   77,   77,   77,    8,    8,   13,  158,
-          158,  158,    8,   95,    8,   21,   62,    8,  135,   13,
-            8,   98,   98,   98,   98,  160,  160,   76,   76,  103,
-           98,   76,   76,   76,   76,    8,    8,    8,   22,   22,
-           22,    8,   88,   88,    8,    8,  114,  114,  114,   82,
-           82,   79,   82,   82,   13,  133,  133,    2,    2,   16,
-           16,   17,   28,   15,   15,   15,  133,   16,   15,   38,
-            8,   27,   36,   16,  114,  114,  114,  114,   15,   13,
-           16,  101,   16,   16,  139,   90,  139,  113,   16,  144,
-          141,  116,  139,   -1,   40,  131,  114,   87,   -1,   -1,
-           16,   -1,   15,   -1,   -1,   -1,   -1,   -1,   13,   -1,
-           -1,   22,   22,   22,   22,   22,   22,   22,   22,   22,
-           22,   22,   21,   22,   15,   15,   -1,   -1,   -1,  114,
-           -1,   -1,  114,  114,  114,   -1,   -1,   -1,   -1,   -1,
-           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
+           41,   41,   41,   41,   41,   41,   41,   22,   22,   22,
+           22,   14,   77,   77,   77,   77,   77,   77,   77,   77,
+           77,   77,   26,   88,   74,   74,   99,   99,  114,   21,
+           21,   99,   99,   99,   99,   99,   99,   99,   99,   99,
+           99,   63,   11,   63,   14,    6,   14,   14,   14,   14,
+           48,   14,   14,   14,   14,   14,   14,   23,   23,   23,
+           23,   44,   14,  107,  107,   74,   74,    5,   74,  107,
+          107,  107,   14,   14,   74,   74,  105,  105,  105,   74,
+           74,   54,   54,   11,   74,   11,  165,  165,  152,  152,
+          154,   74,   74,  152,  152,  152,  152,  152,  152,  152,
+          152,  152,  152,  161,  165,   71,   71,   71,   71,   19,
+          163,   74,   71,   71,   94,   71,   71,   71,   71,   71,
+           71,    8,    8,    8,    8,   71,  139,   60,  139,   74,
+           71,   71,   71,   71,  139,   21,   71,   71,   71,   13,
+          133,  133,    7,    7,   82,    7,   82,   82,   95,   13,
+           13,  133,   62,    7,    7,   71,    7,    7,  135,   71,
+          158,  158,  158,   34,   13,   13,   19,   13,   34,   13,
+           45,   34,   45,   18,   18,   18,   19,   28,  153,  153,
+           13,   17,   13,  153,  153,  153,  153,  153,  153,  153,
+          153,  153,  153,   18,  103,   19,   19,   19,   18,   18,
+           18,   18,   27,    8,   18,   18,   18,   84,   84,   84,
+            8,  155,  155,  151,  151,   13,  155,  155,  155,  155,
+          155,  155,  155,  155,  155,  155,  164,  164,   98,   98,
+           98,   98,  160,  160,   38,   16,   16,   98,    2,    2,
+           13,    8,    8,   16,  164,   36,  101,    8,   16,    8,
+           90,  113,    8,   88,   88,   16,   40,   16,   16,  164,
+           12,  144,   12,   16,   22,   22,   22,  141,   13,    8,
+            8,    8,  116,  131,    8,   16,   87,    8,    8,   80,
+           81,   47,  114,  114,  114,   47,   47,   47,   -1,   47,
+           -1,   -1,   47,   47,   47,   47,   47,   47,   -1,   -1,
+           24,   -1,    8,  114,  114,  114,  114,   24,   24,   24,
+           24,   24,   24,   -1,   23,   23,   23,   -1,   -1,   24,
+           24,   24,   -1,   15,   15,   15,   -1,   -1,   15,   -1,
+          114,   -1,   -1,   -1,   13,   -1,   -1,   15,   22,   22,
+           22,   22,   22,   22,   22,   22,   22,   22,   22,   -1,
+           22,   -1,   78,   78,   -1,   -1,   -1,   78,   -1,   78,
+           15,   78,   78,   78,   -1,   78,  114,   -1,   78,  114,
+          114,  114,   78,   76,   76,   -1,   -1,   76,   76,   76,
+           76,   -1,   15,   15,   -1,   -1,   -1,   -1,   -1,   -1,
            -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-           -1,   -1,   -1,   -1,   -1,   -1,   -1,   13,   -1,   -1,
            -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
            -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-           -1,   -1,   -1,   -1,   23,   23,   23,   -1,   -1,   -1,
            -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   98,
-           98
+           -1,   -1,   -1,   -1,   -1,   -1,   98,   98
     );
 
     protected $gotoBase = array(
-            0,    0, -232,    0,    0,  249,   -6,  351,  -16,    0,
-            0,  -37,  -11,   79, -167,   22,    1,  148,   40, -188,
-            0,   83,  158,  324,  199,  156,  202,  132,  162,    0,
-            0,    0,    0,    0, -118,    0,  131,    0,  142,    0,
-           66,   -1,    0,    0,  211, -347,    0, -332,  192,    0,
-            0,    0,    0,    0,  130,    0,    0,  -23,    0,    0,
-          323,    0,  161,  225, -229,    0,    0,    0,    0,    0,
-            0,   -5,    0,    0, -198,    0,   30,   42, -109,  157,
-          -77, -122, -246,    0,   53,    0,    0,   67, -267,    0,
-           89,    0,    0,    0,  312,  352,    0,    0,  375,  -63,
-            0,  116,    0,  140,    0, -264,    0, -110,    0,    0,
-            0,  186,    0,  118,  165,    0,   62,    0,    0,    0,
-            0,    0,    0,    0,    0,    0,    0,    0,  -74,    0,
-            0,   64,    0,  405,    0,  135,    0,    0,    0,   -4,
-            0,   63,    0,    0,   65,    0,    0,    0,    0,    0,
-            0,  -71,    7,   52,  258,   72,    0,    0,   99,    0,
-           58,  276,    0,  292, -101,  -83,    0,    0
+            0,    0, -276,    0,    0,  197,  186,  285,  -11,    0,
+            0,  -87,   90,    9, -164,   53,  -51,   39,   62, -100,
+            0, -133,  154,  204,  446,    3,  168,   32,   48,    0,
+            0,    0,    0,    0,  -34,    0,   73,    0,   77,    0,
+           -2,   -1,    0,    0,  192, -365,    0, -232,  183,    0,
+            0,    0,    0,    0,  193,    0,    0,  -23,    0,    0,
+          237,    0,   67,  178, -229,    0,    0,    0,    0,    0,
+            0,   -6,    0,    0, -199,    0,  145, -173,   41,    0,
+          -19,  -21, -376,    0,   70,    0,    0,   16, -280,    0,
+           23,    0,    0,    0,  233,  257,    0,    0,  352,  -58,
+            0,   50,    0,   75,    0,  -45,    0,  -55,    0,    0,
+            0,    2,    0,   51,  171,    0,   13,    0,    0,    0,
+            0,    0,    0,    0,    0,    0,    0,    0, -262,    0,
+            0,   12,    0,  260,    0,   45,    0,    0,    0, -189,
+            0,   10,    0,    0,    7,    0,    0,    0,    0,    0,
+            0,   58,    4,   94,  213,  127,    0,    0,   27,    0,
+           34,  225,    0,  231,   86,  -54,    0,    0
     );
 
     protected $gotoDefault = array(
-        -32768,  485,  695,    4,  696,  769,  777,  569,  503,  664,
-          324,  596,  390,  331,  862, 1040,  551,  796, 1160, 1168,
-          428,  799,  312,  326,  844,  845,  846,  366,  351,  357,
-          364,  617,  597,  467,  831,  422,  823,  459,  826,  421,
-          835,  158,  386,  483,  839,    3,  841,  530,  872,  352,
-          849,  353,  641,  851,  536,  853,  854,  360,  367,  368,
-         1045,  544,  593,  866,  237,  538,  867,  350,  868,  875,
-          355,  358,  650,  438,  478,  380, 1021,  579,  614,  416,
-          447,  591,  603,  589,  902,  460,  436,  916,  327,  924,
-          693, 1052,  609,  462,  932,  610,  939,  942,  504,  505,
-          452,  954,  268,  463,  981,  633,  634,  966,  612,  979,
-          446,  985,  423,  993, 1204,  426,  997,  260, 1000,  269,
-          385,  401, 1005, 1006,    7, 1011,  656,  657,   10,  265,
-          482, 1035,  651,  420, 1051,  406, 1120, 1122,  532,  464,
-         1140, 1139,  644,  479, 1145, 1207,  417,  506,  448,  299,
-          507,  287,  315,  296,  522,  278,  316,  508,  449, 1213,
-         1221,  313,   29, 1241, 1252,  322,  548,  584
+        -32768,  482,  689,    4,  690,  763,  771,  566,  498,  659,
+          325,  592,  390, 1209,  856, 1033,  548,  790, 1153, 1161,
+          427,  793,  313,  327,  838,  839,  840,  367,  352,  358,
+          365,  613,  593,  464,  825,  421,  817,  456,  820,  420,
+          829,  158,  387,  480,  833,    3,  835,  525,  866,  353,
+          843,  354,  636,  845,  533,  847,  848,  361,  368,  369,
+         1038,  541,  589,  860,  237,  535,  861,  351,  862,  869,
+          356,  359,  645,  436,  475,  381, 1014,  576,  610,  432,
+          450,  599,  598,  586,  895,  457,  434,  909,  328,  917,
+          687, 1045,  605,  459,  925,  606,  932,  935,  499,  500,
+          449,  947,  268,  460,  974,  628,  629,  959,  608,  972,
+          444,  978,  422,  986, 1197,  425,  990,  260,  993,  269,
+          386,  401,  998,  999,    8, 1004,  651,  652,   10,  265,
+          479, 1028,  646,  419, 1044,  406, 1113, 1115,  527,  461,
+         1133, 1132,  639,  476, 1138, 1200,  416,  501,  445,  299,
+          502,  290,  316,  296,  517,  277,  317,  503,  446, 1206,
+         1214,  314,   29, 1234, 1245,  323,  545,  581
     );
 
     protected $ruleToNonTerminal = array(
@@ -857,22 +849,22 @@
            48,   48,   48,   48,   48,   48,   48,   48,   24,   24,
            67,   67,   70,   70,   69,   68,   68,   61,   73,   73,
            74,   74,   75,   75,   76,   76,   25,   25,   26,   26,
-           26,   26,   79,   79,   79,   80,   80,   83,   83,   81,
-           81,   84,   85,   85,   55,   55,   63,   63,   66,   66,
-           66,   65,   86,   86,   87,   56,   56,   56,   56,   88,
-           88,   89,   89,   90,   90,   91,   92,   92,   93,   93,
-           94,   94,   53,   53,   49,   49,   96,   51,   51,   97,
-           50,   50,   52,   52,   62,   62,   62,   62,   77,   77,
-          100,  100,  102,  102,  102,  102,  101,  101,  101,  104,
-          104,  104,  105,  105,  107,  107,  107,  106,  106,  108,
-          108,  109,  109,  109,  103,  103,   78,   78,   78,   19,
-           19,  110,  110,  111,  111,  111,  111,   58,  112,  112,
-          113,   59,  115,  115,  116,  116,  117,  117,   82,  118,
-          118,  118,  118,  118,  123,  123,  124,  124,  125,  125,
-          125,  125,  125,  126,  127,  127,  122,  122,  119,  119,
-          121,  121,  129,  129,  128,  128,  128,  128,  128,  128,
-          120,  130,  130,  132,  131,  131,   60,   95,  133,  133,
-           54,   54,   41,   41,   41,   41,   41,   41,   41,   41,
+           26,   79,   79,   79,   80,   80,   83,   83,   81,   81,
+           84,   85,   85,   55,   55,   63,   63,   66,   66,   66,
+           65,   86,   86,   87,   56,   56,   56,   56,   88,   88,
+           89,   89,   90,   90,   91,   92,   92,   93,   93,   94,
+           94,   53,   53,   49,   49,   96,   51,   51,   97,   50,
+           50,   52,   52,   62,   62,   62,   62,   77,   77,  100,
+          100,  102,  102,  102,  102,  101,  101,  101,  104,  104,
+          104,  105,  105,  107,  107,  107,  106,  106,  108,  108,
+          109,  109,  109,  103,  103,   78,   78,   78,   19,   19,
+          110,  110,  111,  111,  111,  111,   58,  112,  112,  113,
+           59,  115,  115,  116,  116,  117,  117,   82,  118,  118,
+          118,  118,  118,  123,  123,  124,  124,  125,  125,  125,
+          125,  125,  126,  127,  127,  122,  122,  119,  119,  121,
+          121,  129,  129,  128,  128,  128,  128,  128,  128,  120,
+          130,  130,  132,  131,  131,   60,   95,  133,  133,   54,
+           54,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
@@ -881,20 +873,20 @@
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
            41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
-           41,   41,   41,   41,  140,  134,  134,  139,  139,  142,
-          143,  143,  144,  145,  145,  145,   18,   18,   71,   71,
-           71,   71,  135,  135,  135,  135,  147,  147,  136,  136,
-          138,  138,  138,  141,  141,  152,  152,  152,  152,  152,
-          152,  152,  152,  152,  153,  153,   99,  155,  155,  155,
-          155,  137,  137,  137,  137,  137,  137,  137,  137,   57,
-           57,  150,  150,  150,  150,  156,  156,  146,  146,  146,
-          157,  157,  157,  157,  157,  157,   72,   72,   64,   64,
-           64,   64,  114,  114,  114,  114,  160,  159,  149,  149,
-          149,  149,  149,  149,  149,  148,  148,  148,  158,  158,
-          158,  158,   98,  154,  162,  162,  161,  161,  163,  163,
-          163,  163,  163,  163,  163,  163,  151,  151,  151,  151,
-          165,  166,  164,  164,  164,  164,  164,  164,  164,  164,
-          167,  167,  167,  167
+           41,   41,   41,  140,  134,  134,  139,  139,  142,  143,
+          143,  144,  145,  145,  145,   18,   18,   71,   71,   71,
+           71,  135,  135,  135,  135,  147,  147,  136,  136,  138,
+          138,  138,  141,  141,  152,  152,  152,  152,  152,  152,
+          152,  152,  152,  153,  153,   99,  155,  155,  155,  155,
+          137,  137,  137,  137,  137,  137,  137,  137,   57,   57,
+          150,  150,  150,  150,  156,  156,  146,  146,  146,  157,
+          157,  157,  157,  157,  157,   72,   72,   64,   64,   64,
+           64,  114,  114,  114,  114,  160,  159,  149,  149,  149,
+          149,  149,  149,  149,  148,  148,  148,  158,  158,  158,
+          158,   98,  154,  162,  162,  161,  161,  163,  163,  163,
+          163,  163,  163,  163,  163,  151,  151,  151,  151,  165,
+          166,  164,  164,  164,  164,  164,  164,  164,  164,  167,
+          167,  167,  167
     );
 
     protected $ruleToLength = array(
@@ -917,45 +909,45 @@
             5,    3,    3,    3,    3,    3,    3,    1,    2,    5,
             7,    9,    6,    5,    6,    3,    2,    1,    1,    1,
             0,    2,    1,    3,    8,    0,    4,    2,    1,    3,
-            0,    1,    0,    1,    3,    1,    8,    9,    7,    8,
-            7,    6,    1,    2,    2,    0,    2,    0,    2,    0,
-            2,    2,    1,    3,    1,    4,    1,    4,    1,    1,
-            4,    2,    1,    3,    3,    3,    4,    4,    5,    0,
-            2,    4,    3,    1,    1,    7,    0,    2,    1,    3,
-            3,    4,    1,    4,    0,    2,    5,    0,    2,    6,
-            0,    2,    0,    3,    1,    2,    1,    1,    2,    0,
-            1,    3,    0,    1,    1,    1,    6,    8,    6,    1,
-            2,    1,    1,    1,    1,    1,    1,    3,    3,    3,
-            3,    1,    2,    1,    0,    1,    0,    2,    2,    2,
-            4,    1,    3,    1,    2,    2,    3,    2,    3,    1,
-            1,    2,    3,    1,    1,    3,    2,    0,    1,    5,
-            5,   10,    3,    1,    1,    3,    0,    2,    4,    5,
-            4,    4,    4,    3,    1,    1,    1,    1,    1,    1,
-            0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
-            2,    1,    3,    1,    1,    3,    2,    2,    3,    1,
-            0,    1,    1,    3,    3,    3,    4,    1,    1,    2,
+            0,    1,    0,    1,    3,    1,    8,    9,    8,    7,
+            6,    1,    2,    2,    0,    2,    0,    2,    0,    2,
+            2,    1,    3,    1,    4,    1,    4,    1,    1,    4,
+            2,    1,    3,    3,    3,    4,    4,    5,    0,    2,
+            4,    3,    1,    1,    7,    0,    2,    1,    3,    3,
+            4,    1,    4,    0,    2,    5,    0,    2,    6,    0,
+            2,    0,    3,    1,    2,    1,    1,    2,    0,    1,
+            3,    0,    1,    1,    1,    6,    8,    6,    1,    2,
+            1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
+            1,    2,    1,    0,    1,    0,    2,    2,    2,    4,
+            1,    3,    1,    2,    2,    3,    2,    3,    1,    1,
+            2,    3,    1,    1,    3,    2,    0,    1,    5,    5,
+           10,    3,    1,    1,    3,    0,    2,    4,    5,    4,
+            4,    4,    3,    1,    1,    1,    1,    1,    1,    0,
+            1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
+            1,    3,    1,    1,    3,    2,    2,    3,    1,    0,
+            1,    1,    3,    3,    3,    4,    1,    1,    2,    3,
+            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+            3,    3,    2,    2,    2,    2,    3,    3,    3,    3,
             3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
             3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
-            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
-            3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
-            4,    3,    4,    4,    2,    2,    4,    2,    2,    2,
-            2,    2,    2,    2,    2,    2,    2,    2,    1,    3,
-            2,    1,    2,    4,    2,    2,    8,    9,    8,    9,
-            9,   10,    9,   10,    8,    3,    2,    0,    4,    2,
-            1,    3,    2,    2,    2,    4,    1,    1,    1,    1,
-            1,    1,    1,    1,    3,    1,    1,    1,    0,    3,
-            0,    1,    1,    0,    1,    1,    1,    1,    1,    1,
-            1,    1,    1,    1,    3,    3,    3,    4,    1,    1,
-            3,    1,    1,    1,    1,    1,    3,    2,    3,    0,
-            1,    1,    3,    1,    1,    1,    1,    1,    3,    1,
-            1,    4,    4,    1,    4,    4,    0,    1,    1,    1,
-            3,    3,    1,    4,    2,    2,    1,    3,    1,    4,
-            4,    3,    3,    3,    3,    1,    3,    1,    1,    3,
-            1,    1,    4,    1,    1,    1,    3,    1,    1,    2,
-            1,    3,    4,    3,    2,    0,    2,    2,    1,    2,
-            1,    1,    1,    4,    3,    3,    3,    3,    6,    3,
-            1,    1,    2,    1
+            3,    3,    3,    3,    3,    3,    3,    3,    5,    4,
+            3,    4,    4,    2,    2,    4,    2,    2,    2,    2,
+            2,    2,    2,    2,    2,    2,    2,    1,    3,    2,
+            1,    2,    4,    2,    2,    8,    9,    8,    9,    9,
+           10,    9,   10,    8,    3,    2,    0,    4,    2,    1,
+            3,    2,    2,    2,    4,    1,    1,    1,    1,    1,
+            1,    1,    1,    3,    1,    1,    1,    0,    3,    0,
+            1,    1,    0,    1,    1,    1,    1,    1,    1,    1,
+            1,    1,    1,    3,    3,    3,    4,    1,    1,    3,
+            1,    1,    1,    1,    1,    3,    2,    3,    0,    1,
+            1,    3,    1,    1,    1,    1,    1,    3,    1,    1,
+            4,    4,    1,    4,    4,    0,    1,    1,    1,    3,
+            3,    1,    4,    2,    2,    1,    3,    1,    4,    4,
+            3,    3,    3,    3,    1,    3,    1,    1,    3,    1,
+            1,    4,    1,    1,    1,    3,    1,    1,    2,    1,
+            3,    4,    3,    2,    0,    2,    2,    1,    2,    1,
+            1,    1,    4,    3,    3,    3,    3,    6,    3,    1,
+            1,    2,    1
     );
 
     protected function initReduceCallbacks() {
@@ -1580,478 +1572,477 @@
                  $this->semValue = new Stmt\Function_($this->semStack[$stackPos-(9-4)], ['byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-6)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
             },
             198 => function ($stackPos) {
-                 $this->semValue = new Stmt\Class_($this->semStack[$stackPos-(7-2)], ['type' => $this->semStack[$stackPos-(7-1)], 'extends' => $this->semStack[$stackPos-(7-3)], 'implements' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
-            $this->checkClass($this->semValue, $stackPos-(7-2));
-            },
-            199 => function ($stackPos) {
                  $this->semValue = new Stmt\Class_($this->semStack[$stackPos-(8-3)], ['type' => $this->semStack[$stackPos-(8-2)], 'extends' => $this->semStack[$stackPos-(8-4)], 'implements' => $this->semStack[$stackPos-(8-5)], 'stmts' => $this->semStack[$stackPos-(8-7)], 'attrGroups' => $this->semStack[$stackPos-(8-1)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
             $this->checkClass($this->semValue, $stackPos-(8-3));
             },
-            200 => function ($stackPos) {
+            199 => function ($stackPos) {
                  $this->semValue = new Stmt\Interface_($this->semStack[$stackPos-(7-3)], ['extends' => $this->semStack[$stackPos-(7-4)], 'stmts' => $this->semStack[$stackPos-(7-6)], 'attrGroups' => $this->semStack[$stackPos-(7-1)]], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
             $this->checkInterface($this->semValue, $stackPos-(7-3));
             },
-            201 => function ($stackPos) {
+            200 => function ($stackPos) {
                  $this->semValue = new Stmt\Trait_($this->semStack[$stackPos-(6-3)], ['stmts' => $this->semStack[$stackPos-(6-5)], 'attrGroups' => $this->semStack[$stackPos-(6-1)]], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
             },
-            202 => function ($stackPos) {
+            201 => function ($stackPos) {
                  $this->semValue = 0;
             },
-            203 => function ($stackPos) {
+            202 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
             },
+            203 => function ($stackPos) {
+                 $this->semValue = Stmt\Class_::MODIFIER_FINAL;
+            },
             204 => function ($stackPos) {
-                 $this->semValue = Stmt\Class_::MODIFIER_FINAL;
+                 $this->semValue = null;
             },
             205 => function ($stackPos) {
-                 $this->semValue = null;
-            },
-            206 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-2)];
             },
-            207 => function ($stackPos) {
+            206 => function ($stackPos) {
                  $this->semValue = array();
             },
-            208 => function ($stackPos) {
+            207 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-2)];
             },
+            208 => function ($stackPos) {
+                 $this->semValue = array();
+            },
             209 => function ($stackPos) {
-                 $this->semValue = array();
+                 $this->semValue = $this->semStack[$stackPos-(2-2)];
             },
             210 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(2-2)];
+                 $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             211 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(2-1)];
-            },
-            212 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
+            212 => function ($stackPos) {
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+            },
             213 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
             },
             214 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(4-2)];
+            },
+            215 => function ($stackPos) {
                  $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
             },
-            215 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(4-2)];
-            },
             216 => function ($stackPos) {
-                 $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
-            },
-            217 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(4-2)];
             },
-            218 => function ($stackPos) {
+            217 => function ($stackPos) {
                  $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
             },
-            219 => function ($stackPos) {
+            218 => function ($stackPos) {
                  $this->semValue = null;
             },
+            219 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(4-2)];
+            },
             220 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(4-2)];
+                 $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             221 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(2-1)];
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
             222 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
-            },
-            223 => function ($stackPos) {
                  $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
-            224 => function ($stackPos) {
+            223 => function ($stackPos) {
                  $this->semValue = new Stmt\DeclareDeclare($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            225 => function ($stackPos) {
+            224 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
+            225 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(4-3)];
+            },
             226 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(4-3)];
+                 $this->semValue = $this->semStack[$stackPos-(4-2)];
             },
             227 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(4-2)];
-            },
-            228 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(5-3)];
             },
-            229 => function ($stackPos) {
+            228 => function ($stackPos) {
                  $this->semValue = array();
             },
-            230 => function ($stackPos) {
+            229 => function ($stackPos) {
                  $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
+            230 => function ($stackPos) {
+                 $this->semValue = new Stmt\Case_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+            },
             231 => function ($stackPos) {
-                 $this->semValue = new Stmt\Case_($this->semStack[$stackPos-(4-2)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = new Stmt\Case_(null, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             232 => function ($stackPos) {
-                 $this->semValue = new Stmt\Case_(null, $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                $this->semValue = $this->semStack[$stackPos];
             },
             233 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos];
             },
             234 => function ($stackPos) {
-                $this->semValue = $this->semStack[$stackPos];
+                 $this->semValue = new Expr\Match_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-6)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
             },
             235 => function ($stackPos) {
-                 $this->semValue = new Expr\Match_($this->semStack[$stackPos-(7-3)], $this->semStack[$stackPos-(7-6)], $this->startAttributeStack[$stackPos-(7-1)] + $this->endAttributes);
-            },
-            236 => function ($stackPos) {
                  $this->semValue = [];
             },
-            237 => function ($stackPos) {
+            236 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
+            237 => function ($stackPos) {
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+            },
             238 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
             239 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
-            },
-            240 => function ($stackPos) {
                  $this->semValue = new Node\MatchArm($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            241 => function ($stackPos) {
+            240 => function ($stackPos) {
                  $this->semValue = new Node\MatchArm(null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
-            242 => function ($stackPos) {
+            241 => function ($stackPos) {
                  $this->semValue = is_array($this->semStack[$stackPos-(1-1)]) ? $this->semStack[$stackPos-(1-1)] : array($this->semStack[$stackPos-(1-1)]);
             },
+            242 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(4-2)];
+            },
             243 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(4-2)];
+                 $this->semValue = array();
             },
             244 => function ($stackPos) {
-                 $this->semValue = array();
+                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             245 => function ($stackPos) {
-                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
-            },
-            246 => function ($stackPos) {
                  $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(5-3)], is_array($this->semStack[$stackPos-(5-5)]) ? $this->semStack[$stackPos-(5-5)] : array($this->semStack[$stackPos-(5-5)]), $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
             },
-            247 => function ($stackPos) {
+            246 => function ($stackPos) {
                  $this->semValue = array();
             },
-            248 => function ($stackPos) {
+            247 => function ($stackPos) {
                  $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
+            248 => function ($stackPos) {
+                 $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
+            },
             249 => function ($stackPos) {
-                 $this->semValue = new Stmt\ElseIf_($this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-6)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
+                 $this->semValue = null;
             },
             250 => function ($stackPos) {
-                 $this->semValue = null;
-            },
-            251 => function ($stackPos) {
                  $this->semValue = new Stmt\Else_(is_array($this->semStack[$stackPos-(2-2)]) ? $this->semStack[$stackPos-(2-2)] : array($this->semStack[$stackPos-(2-2)]), $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            252 => function ($stackPos) {
+            251 => function ($stackPos) {
                  $this->semValue = null;
             },
-            253 => function ($stackPos) {
+            252 => function ($stackPos) {
                  $this->semValue = new Stmt\Else_($this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            253 => function ($stackPos) {
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
+            },
             254 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
+                 $this->semValue = array($this->semStack[$stackPos-(2-2)], true);
             },
             255 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(2-2)], true);
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
             },
             256 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
             },
             257 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)], false);
+                 $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             258 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(2-1)];
-            },
-            259 => function ($stackPos) {
                  $this->semValue = array();
             },
-            260 => function ($stackPos) {
+            259 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
+            260 => function ($stackPos) {
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+            },
             261 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+                 $this->semValue = 0;
             },
             262 => function ($stackPos) {
-                 $this->semValue = 0;
-            },
-            263 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
             },
-            264 => function ($stackPos) {
+            263 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
             },
-            265 => function ($stackPos) {
+            264 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
             },
-            266 => function ($stackPos) {
+            265 => function ($stackPos) {
                  $this->semValue = new Node\Param($this->semStack[$stackPos-(6-6)], null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);
             $this->checkParam($this->semValue);
             },
-            267 => function ($stackPos) {
+            266 => function ($stackPos) {
                  $this->semValue = new Node\Param($this->semStack[$stackPos-(8-6)], $this->semStack[$stackPos-(8-8)], $this->semStack[$stackPos-(8-3)], $this->semStack[$stackPos-(8-4)], $this->semStack[$stackPos-(8-5)], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes, $this->semStack[$stackPos-(8-2)], $this->semStack[$stackPos-(8-1)]);
             $this->checkParam($this->semValue);
             },
+            267 => function ($stackPos) {
+                 $this->semValue = new Node\Param(new Expr\Error($this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes), null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);
+            },
             268 => function ($stackPos) {
-                 $this->semValue = new Node\Param(new Expr\Error($this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes), null, $this->semStack[$stackPos-(6-3)], $this->semStack[$stackPos-(6-4)], $this->semStack[$stackPos-(6-5)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes, $this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-1)]);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             269 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
-            },
-            270 => function ($stackPos) {
                  $this->semValue = new Node\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            271 => function ($stackPos) {
+            270 => function ($stackPos) {
                  $this->semValue = new Node\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
+            271 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+            },
             272 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = new Node\Name('static', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             273 => function ($stackPos) {
-                 $this->semValue = new Node\Name('static', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = $this->handleBuiltinTypes($this->semStack[$stackPos-(1-1)]);
             },
             274 => function ($stackPos) {
-                 $this->semValue = $this->handleBuiltinTypes($this->semStack[$stackPos-(1-1)]);
+                 $this->semValue = new Node\Identifier('array', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             275 => function ($stackPos) {
-                 $this->semValue = new Node\Identifier('array', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Node\Identifier('callable', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             276 => function ($stackPos) {
-                 $this->semValue = new Node\Identifier('callable', $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            277 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
             },
+            277 => function ($stackPos) {
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+            },
             278 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
-            },
-            279 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
             },
-            280 => function ($stackPos) {
+            279 => function ($stackPos) {
                  $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
-            281 => function ($stackPos) {
+            280 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
+            281 => function ($stackPos) {
+                 $this->semValue = new Node\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
             282 => function ($stackPos) {
-                 $this->semValue = new Node\NullableType($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Node\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             283 => function ($stackPos) {
-                 $this->semValue = new Node\UnionType($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = null;
             },
             284 => function ($stackPos) {
-                 $this->semValue = null;
-            },
-            285 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
-            286 => function ($stackPos) {
+            285 => function ($stackPos) {
                  $this->semValue = null;
             },
-            287 => function ($stackPos) {
+            286 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-2)];
             },
+            287 => function ($stackPos) {
+                 $this->semValue = null;
+            },
             288 => function ($stackPos) {
-                 $this->semValue = null;
+                 $this->semValue = array();
             },
             289 => function ($stackPos) {
-                 $this->semValue = array();
-            },
-            290 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(4-2)];
             },
-            291 => function ($stackPos) {
+            290 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
-            292 => function ($stackPos) {
+            291 => function ($stackPos) {
                  $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
+            292 => function ($stackPos) {
+                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(1-1)], false, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+            },
             293 => function ($stackPos) {
-                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(1-1)], false, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], true, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             294 => function ($stackPos) {
-                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], true, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], false, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             295 => function ($stackPos) {
-                 $this->semValue = new Node\Arg($this->semStack[$stackPos-(2-2)], false, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            296 => function ($stackPos) {
                  $this->semValue = new Node\Arg($this->semStack[$stackPos-(3-3)], false, false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->semStack[$stackPos-(3-1)]);
             },
-            297 => function ($stackPos) {
+            296 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
-            298 => function ($stackPos) {
+            297 => function ($stackPos) {
                  $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
+            298 => function ($stackPos) {
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+            },
             299 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             300 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            301 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
-            302 => function ($stackPos) {
+            301 => function ($stackPos) {
                  $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
-            303 => function ($stackPos) {
+            302 => function ($stackPos) {
                  $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
+            303 => function ($stackPos) {
+                 $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+            },
             304 => function ($stackPos) {
-                 $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             305 => function ($stackPos) {
-                 $this->semValue = new Stmt\StaticVar($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 if ($this->semStack[$stackPos-(2-2)] !== null) { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; }
             },
             306 => function ($stackPos) {
-                 if ($this->semStack[$stackPos-(2-2)] !== null) { $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)]; }
-            },
-            307 => function ($stackPos) {
                  $this->semValue = array();
             },
-            308 => function ($stackPos) {
+            307 => function ($stackPos) {
                  $startAttributes = $this->lookaheadStartAttributes; if (isset($startAttributes['comments'])) { $nop = new Stmt\Nop($this->createCommentNopAttributes($startAttributes['comments'])); } else { $nop = null; };
             if ($nop !== null) { $this->semStack[$stackPos-(1-1)][] = $nop; } $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
-            309 => function ($stackPos) {
+            308 => function ($stackPos) {
                  $this->semValue = new Stmt\Property($this->semStack[$stackPos-(5-2)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes, $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-1)]);
             $this->checkProperty($this->semValue, $stackPos-(5-2));
             },
-            310 => function ($stackPos) {
+            309 => function ($stackPos) {
                  $this->semValue = new Stmt\ClassConst($this->semStack[$stackPos-(5-4)], $this->semStack[$stackPos-(5-2)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes, $this->semStack[$stackPos-(5-1)]);
             $this->checkClassConst($this->semValue, $stackPos-(5-2));
             },
-            311 => function ($stackPos) {
+            310 => function ($stackPos) {
                  $this->semValue = new Stmt\ClassMethod($this->semStack[$stackPos-(10-5)], ['type' => $this->semStack[$stackPos-(10-2)], 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-7)], 'returnType' => $this->semStack[$stackPos-(10-9)], 'stmts' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
             $this->checkClassMethod($this->semValue, $stackPos-(10-2));
             },
-            312 => function ($stackPos) {
+            311 => function ($stackPos) {
                  $this->semValue = new Stmt\TraitUse($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            313 => function ($stackPos) {
+            312 => function ($stackPos) {
                  $this->semValue = null; /* will be skipped */
             },
-            314 => function ($stackPos) {
+            313 => function ($stackPos) {
                  $this->semValue = array();
             },
+            314 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+            },
             315 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+                 $this->semValue = array();
             },
             316 => function ($stackPos) {
-                 $this->semValue = array();
+                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             317 => function ($stackPos) {
-                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
-            },
-            318 => function ($stackPos) {
                  $this->semValue = new Stmt\TraitUseAdaptation\Precedence($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
-            319 => function ($stackPos) {
+            318 => function ($stackPos) {
                  $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(5-1)][0], $this->semStack[$stackPos-(5-1)][1], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-4)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
             },
-            320 => function ($stackPos) {
+            319 => function ($stackPos) {
                  $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], $this->semStack[$stackPos-(4-3)], null, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
+            320 => function ($stackPos) {
+                 $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+            },
             321 => function ($stackPos) {
                  $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             322 => function ($stackPos) {
-                 $this->semValue = new Stmt\TraitUseAdaptation\Alias($this->semStack[$stackPos-(4-1)][0], $this->semStack[$stackPos-(4-1)][1], null, $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
             },
             323 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)]);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             324 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = array(null, $this->semStack[$stackPos-(1-1)]);
             },
             325 => function ($stackPos) {
-                 $this->semValue = array(null, $this->semStack[$stackPos-(1-1)]);
-            },
-            326 => function ($stackPos) {
                  $this->semValue = null;
             },
+            326 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+            },
             327 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             328 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = 0;
             },
             329 => function ($stackPos) {
                  $this->semValue = 0;
             },
             330 => function ($stackPos) {
-                 $this->semValue = 0;
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             331 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             332 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
-            },
-            333 => function ($stackPos) {
                  $this->checkModifier($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $this->semValue = $this->semStack[$stackPos-(2-1)] | $this->semStack[$stackPos-(2-2)];
             },
-            334 => function ($stackPos) {
+            333 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_PUBLIC;
             },
-            335 => function ($stackPos) {
+            334 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_PROTECTED;
             },
+            335 => function ($stackPos) {
+                 $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
+            },
             336 => function ($stackPos) {
-                 $this->semValue = Stmt\Class_::MODIFIER_PRIVATE;
+                 $this->semValue = Stmt\Class_::MODIFIER_STATIC;
             },
             337 => function ($stackPos) {
-                 $this->semValue = Stmt\Class_::MODIFIER_STATIC;
-            },
-            338 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT;
             },
-            339 => function ($stackPos) {
+            338 => function ($stackPos) {
                  $this->semValue = Stmt\Class_::MODIFIER_FINAL;
             },
-            340 => function ($stackPos) {
+            339 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
+            340 => function ($stackPos) {
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+            },
             341 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
             342 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+                 $this->semValue = new Node\VarLikeIdentifier(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             343 => function ($stackPos) {
-                 $this->semValue = new Node\VarLikeIdentifier(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            344 => function ($stackPos) {
                  $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(1-1)], null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
+            344 => function ($stackPos) {
+                 $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             345 => function ($stackPos) {
-                 $this->semValue = new Stmt\PropertyProperty($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             346 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             347 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(2-1)];
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
             348 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
             349 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semValue = array();
             },
             350 => function ($stackPos) {
-                 $this->semValue = array();
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             351 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             352 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             353 => function ($stackPos) {
                  $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
@@ -2060,427 +2051,427 @@
                  $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             355 => function ($stackPos) {
-                 $this->semValue = new Expr\Assign($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             356 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignRef($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             357 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             358 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = new Expr\Clone_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             359 => function ($stackPos) {
-                 $this->semValue = new Expr\Clone_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            360 => function ($stackPos) {
                  $this->semValue = new Expr\AssignOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            361 => function ($stackPos) {
+            360 => function ($stackPos) {
                  $this->semValue = new Expr\AssignOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            362 => function ($stackPos) {
+            361 => function ($stackPos) {
                  $this->semValue = new Expr\AssignOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            362 => function ($stackPos) {
+                 $this->semValue = new Expr\AssignOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             363 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             364 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             365 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             366 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            367 => function ($stackPos) {
                  $this->semValue = new Expr\AssignOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            367 => function ($stackPos) {
+                 $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             368 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             369 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             370 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             371 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\AssignOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             372 => function ($stackPos) {
-                 $this->semValue = new Expr\AssignOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            373 => function ($stackPos) {
                  $this->semValue = new Expr\PostInc($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            374 => function ($stackPos) {
+            373 => function ($stackPos) {
                  $this->semValue = new Expr\PreInc($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
+            374 => function ($stackPos) {
+                 $this->semValue = new Expr\PostDec($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
             375 => function ($stackPos) {
-                 $this->semValue = new Expr\PostDec($this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\PreDec($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             376 => function ($stackPos) {
-                 $this->semValue = new Expr\PreDec($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            377 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\BooleanOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            378 => function ($stackPos) {
+            377 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\BooleanAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            378 => function ($stackPos) {
+                 $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             379 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\LogicalOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             380 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\LogicalAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            381 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\LogicalXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            382 => function ($stackPos) {
+            381 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\BitwiseOr($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            383 => function ($stackPos) {
+            382 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\BitwiseAnd($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            383 => function ($stackPos) {
+                 $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             384 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\BitwiseXor($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             385 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\Concat($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             386 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\Plus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            387 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Minus($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            388 => function ($stackPos) {
+            387 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Mul($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            389 => function ($stackPos) {
+            388 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Div($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            389 => function ($stackPos) {
+                 $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             390 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\Mod($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             391 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\ShiftLeft($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            392 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\ShiftRight($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            393 => function ($stackPos) {
+            392 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Pow($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            394 => function ($stackPos) {
+            393 => function ($stackPos) {
                  $this->semValue = new Expr\UnaryPlus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
+            394 => function ($stackPos) {
+                 $this->semValue = new Expr\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
             395 => function ($stackPos) {
-                 $this->semValue = new Expr\UnaryMinus($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             396 => function ($stackPos) {
-                 $this->semValue = new Expr\BooleanNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             397 => function ($stackPos) {
-                 $this->semValue = new Expr\BitwiseNot($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            398 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Identical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            399 => function ($stackPos) {
+            398 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\NotIdentical($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            400 => function ($stackPos) {
+            399 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Equal($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            400 => function ($stackPos) {
+                 $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             401 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\NotEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             402 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\Spaceship($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            403 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Smaller($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            404 => function ($stackPos) {
+            403 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\SmallerOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            405 => function ($stackPos) {
+            404 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Greater($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            405 => function ($stackPos) {
+                 $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             406 => function ($stackPos) {
-                 $this->semValue = new Expr\BinaryOp\GreaterOrEqual($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Instanceof_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             407 => function ($stackPos) {
-                 $this->semValue = new Expr\Instanceof_($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
             408 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
-            },
-            409 => function ($stackPos) {
                  $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(5-1)], $this->semStack[$stackPos-(5-3)], $this->semStack[$stackPos-(5-5)], $this->startAttributeStack[$stackPos-(5-1)] + $this->endAttributes);
             },
-            410 => function ($stackPos) {
+            409 => function ($stackPos) {
                  $this->semValue = new Expr\Ternary($this->semStack[$stackPos-(4-1)], null, $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
-            411 => function ($stackPos) {
+            410 => function ($stackPos) {
                  $this->semValue = new Expr\BinaryOp\Coalesce($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            411 => function ($stackPos) {
+                 $this->semValue = new Expr\Isset_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+            },
             412 => function ($stackPos) {
-                 $this->semValue = new Expr\Isset_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Empty_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             413 => function ($stackPos) {
-                 $this->semValue = new Expr\Empty_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
-            },
-            414 => function ($stackPos) {
                  $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            415 => function ($stackPos) {
+            414 => function ($stackPos) {
                  $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            416 => function ($stackPos) {
+            415 => function ($stackPos) {
                  $this->semValue = new Expr\Eval_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
+            416 => function ($stackPos) {
+                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
             417 => function ($stackPos) {
-                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             418 => function ($stackPos) {
-                 $this->semValue = new Expr\Include_($this->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Cast\Int_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             419 => function ($stackPos) {
-                 $this->semValue = new Expr\Cast\Int_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            420 => function ($stackPos) {
                  $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;
             $attrs['kind'] = $this->getFloatCastKind($this->semStack[$stackPos-(2-1)]);
             $this->semValue = new Expr\Cast\Double($this->semStack[$stackPos-(2-2)], $attrs);
             },
-            421 => function ($stackPos) {
+            420 => function ($stackPos) {
                  $this->semValue = new Expr\Cast\String_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            422 => function ($stackPos) {
+            421 => function ($stackPos) {
                  $this->semValue = new Expr\Cast\Array_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
+            422 => function ($stackPos) {
+                 $this->semValue = new Expr\Cast\Object_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
             423 => function ($stackPos) {
-                 $this->semValue = new Expr\Cast\Object_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Cast\Bool_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             424 => function ($stackPos) {
-                 $this->semValue = new Expr\Cast\Bool_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            425 => function ($stackPos) {
                  $this->semValue = new Expr\Cast\Unset_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            426 => function ($stackPos) {
+            425 => function ($stackPos) {
                  $attrs = $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes;
             $attrs['kind'] = strtolower($this->semStack[$stackPos-(2-1)]) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE;
             $this->semValue = new Expr\Exit_($this->semStack[$stackPos-(2-2)], $attrs);
             },
-            427 => function ($stackPos) {
+            426 => function ($stackPos) {
                  $this->semValue = new Expr\ErrorSuppress($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
+            427 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+            },
             428 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = new Expr\ShellExec($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             429 => function ($stackPos) {
-                 $this->semValue = new Expr\ShellExec($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Print_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             430 => function ($stackPos) {
-                 $this->semValue = new Expr\Print_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            431 => function ($stackPos) {
                  $this->semValue = new Expr\Yield_(null, null, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
-            432 => function ($stackPos) {
+            431 => function ($stackPos) {
                  $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(2-2)], null, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            433 => function ($stackPos) {
+            432 => function ($stackPos) {
                  $this->semValue = new Expr\Yield_($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-2)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
+            433 => function ($stackPos) {
+                 $this->semValue = new Expr\YieldFrom($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
             434 => function ($stackPos) {
-                 $this->semValue = new Expr\YieldFrom($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Throw_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             435 => function ($stackPos) {
-                 $this->semValue = new Expr\Throw_($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            436 => function ($stackPos) {
                  $this->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-4)], 'returnType' => $this->semStack[$stackPos-(8-6)], 'expr' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
             },
-            437 => function ($stackPos) {
+            436 => function ($stackPos) {
                  $this->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
             },
-            438 => function ($stackPos) {
+            437 => function ($stackPos) {
                  $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(8-2)], 'params' => $this->semStack[$stackPos-(8-4)], 'uses' => $this->semStack[$stackPos-(8-6)], 'returnType' => $this->semStack[$stackPos-(8-7)], 'stmts' => $this->semStack[$stackPos-(8-8)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes);
             },
+            438 => function ($stackPos) {
+                 $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
+            },
             439 => function ($stackPos) {
-                 $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => []], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
             },
             440 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'returnType' => $this->semStack[$stackPos-(9-7)], 'expr' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'returnType' => $this->semStack[$stackPos-(10-8)], 'expr' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
             },
             441 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'returnType' => $this->semStack[$stackPos-(10-8)], 'expr' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
             },
             442 => function ($stackPos) {
-                 $this->semValue = new Expr\Closure(['static' => false, 'byRef' => $this->semStack[$stackPos-(9-3)], 'params' => $this->semStack[$stackPos-(9-5)], 'uses' => $this->semStack[$stackPos-(9-7)], 'returnType' => $this->semStack[$stackPos-(9-8)], 'stmts' => $this->semStack[$stackPos-(9-9)], 'attrGroups' => $this->semStack[$stackPos-(9-1)]], $this->startAttributeStack[$stackPos-(9-1)] + $this->endAttributes);
-            },
-            443 => function ($stackPos) {
                  $this->semValue = new Expr\Closure(['static' => true, 'byRef' => $this->semStack[$stackPos-(10-4)], 'params' => $this->semStack[$stackPos-(10-6)], 'uses' => $this->semStack[$stackPos-(10-8)], 'returnType' => $this->semStack[$stackPos-(10-9)], 'stmts' => $this->semStack[$stackPos-(10-10)], 'attrGroups' => $this->semStack[$stackPos-(10-1)]], $this->startAttributeStack[$stackPos-(10-1)] + $this->endAttributes);
             },
-            444 => function ($stackPos) {
+            443 => function ($stackPos) {
                  $this->semValue = array(new Stmt\Class_(null, ['type' => 0, 'extends' => $this->semStack[$stackPos-(8-4)], 'implements' => $this->semStack[$stackPos-(8-5)], 'stmts' => $this->semStack[$stackPos-(8-7)], 'attrGroups' => $this->semStack[$stackPos-(8-1)]], $this->startAttributeStack[$stackPos-(8-1)] + $this->endAttributes), $this->semStack[$stackPos-(8-3)]);
             $this->checkClass($this->semValue[0], -1);
             },
+            444 => function ($stackPos) {
+                 $this->semValue = new Expr\New_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             445 => function ($stackPos) {
-                 $this->semValue = new Expr\New_($this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 list($class, $ctorArgs) = $this->semStack[$stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             446 => function ($stackPos) {
-                 list($class, $ctorArgs) = $this->semStack[$stackPos-(2-2)]; $this->semValue = new Expr\New_($class, $ctorArgs, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            447 => function ($stackPos) {
                  $this->semValue = array();
             },
-            448 => function ($stackPos) {
+            447 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(4-3)];
             },
-            449 => function ($stackPos) {
+            448 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
+            449 => function ($stackPos) {
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+            },
             450 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
             },
             451 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+                 $this->semValue = new Expr\ClosureUse($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             452 => function ($stackPos) {
-                 $this->semValue = new Expr\ClosureUse($this->semStack[$stackPos-(2-2)], $this->semStack[$stackPos-(2-1)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             453 => function ($stackPos) {
                  $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             454 => function ($stackPos) {
-                 $this->semValue = new Expr\FuncCall($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\StaticCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             455 => function ($stackPos) {
-                 $this->semValue = new Expr\StaticCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             456 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+            },
+            457 => function ($stackPos) {
                  $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
-            457 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
-            },
             458 => function ($stackPos) {
                  $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             459 => function ($stackPos) {
-                 $this->semValue = new Name($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Name\FullyQualified(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             460 => function ($stackPos) {
-                 $this->semValue = new Name\FullyQualified(substr($this->semStack[$stackPos-(1-1)], 1), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Name\Relative(substr($this->semStack[$stackPos-(1-1)], 10), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             461 => function ($stackPos) {
-                 $this->semValue = new Name\Relative(substr($this->semStack[$stackPos-(1-1)], 10), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             462 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             463 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
-            },
-            464 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
+            464 => function ($stackPos) {
+                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
+            },
             465 => function ($stackPos) {
-                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             466 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             467 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = null;
             },
             468 => function ($stackPos) {
-                 $this->semValue = null;
-            },
-            469 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
+            469 => function ($stackPos) {
+                 $this->semValue = array();
+            },
             470 => function ($stackPos) {
-                 $this->semValue = array();
+                 $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$stackPos-(1-1)], '`'), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));
             },
             471 => function ($stackPos) {
-                 $this->semValue = array(new Scalar\EncapsedStringPart(Scalar\String_::parseEscapeSequences($this->semStack[$stackPos-(1-1)], '`'), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes));
+                 foreach ($this->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', true); } }; $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             472 => function ($stackPos) {
-                 foreach ($this->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', true); } }; $this->semValue = $this->semStack[$stackPos-(1-1)];
-            },
-            473 => function ($stackPos) {
                  $this->semValue = array();
             },
-            474 => function ($stackPos) {
+            473 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
-            475 => function ($stackPos) {
+            474 => function ($stackPos) {
                  $this->semValue = new Expr\ConstFetch($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
+            475 => function ($stackPos) {
+                 $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+            },
             476 => function ($stackPos) {
-                 $this->semValue = new Scalar\MagicConst\Line($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             477 => function ($stackPos) {
-                 $this->semValue = new Scalar\MagicConst\File($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            478 => function ($stackPos) {
                  $this->semValue = new Scalar\MagicConst\Dir($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
-            479 => function ($stackPos) {
+            478 => function ($stackPos) {
                  $this->semValue = new Scalar\MagicConst\Class_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
-            480 => function ($stackPos) {
+            479 => function ($stackPos) {
                  $this->semValue = new Scalar\MagicConst\Trait_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
+            480 => function ($stackPos) {
+                 $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+            },
             481 => function ($stackPos) {
-                 $this->semValue = new Scalar\MagicConst\Method($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             482 => function ($stackPos) {
-                 $this->semValue = new Scalar\MagicConst\Function_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             483 => function ($stackPos) {
-                 $this->semValue = new Scalar\MagicConst\Namespace_($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            484 => function ($stackPos) {
                  $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            485 => function ($stackPos) {
+            484 => function ($stackPos) {
                  $this->semValue = new Expr\ClassConstFetch($this->semStack[$stackPos-(3-1)], new Expr\Error($this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)]), $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes); $this->errorState = 2;
             },
-            486 => function ($stackPos) {
+            485 => function ($stackPos) {
                  $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_SHORT;
             $this->semValue = new Expr\Array_($this->semStack[$stackPos-(3-2)], $attrs);
             },
-            487 => function ($stackPos) {
+            486 => function ($stackPos) {
                  $attrs = $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes; $attrs['kind'] = Expr\Array_::KIND_LONG;
             $this->semValue = new Expr\Array_($this->semStack[$stackPos-(4-3)], $attrs);
             },
+            487 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+            },
             488 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
-            },
-            489 => function ($stackPos) {
                  $attrs = $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes; $attrs['kind'] = ($this->semStack[$stackPos-(1-1)][0] === "'" || ($this->semStack[$stackPos-(1-1)][1] === "'" && ($this->semStack[$stackPos-(1-1)][0] === 'b' || $this->semStack[$stackPos-(1-1)][0] === 'B')) ? Scalar\String_::KIND_SINGLE_QUOTED : Scalar\String_::KIND_DOUBLE_QUOTED);
             $this->semValue = new Scalar\String_(Scalar\String_::parse($this->semStack[$stackPos-(1-1)]), $attrs);
             },
-            490 => function ($stackPos) {
+            489 => function ($stackPos) {
                  $attrs = $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes; $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
             foreach ($this->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\Scalar\EncapsedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', true); } }; $this->semValue = new Scalar\Encapsed($this->semStack[$stackPos-(3-2)], $attrs);
             },
-            491 => function ($stackPos) {
+            490 => function ($stackPos) {
                  $this->semValue = $this->parseLNumber($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
+            491 => function ($stackPos) {
+                 $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+            },
             492 => function ($stackPos) {
-                 $this->semValue = new Scalar\DNumber(Scalar\DNumber::parse($this->semStack[$stackPos-(1-1)]), $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             493 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
@@ -2489,29 +2480,29 @@
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             495 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);
             },
             496 => function ($stackPos) {
-                 $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);
-            },
-            497 => function ($stackPos) {
                  $this->semValue = $this->parseDocString($this->semStack[$stackPos-(2-1)], '', $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(2-2)] + $this->endAttributeStack[$stackPos-(2-2)], true);
             },
-            498 => function ($stackPos) {
+            497 => function ($stackPos) {
                  $this->semValue = $this->parseDocString($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-2)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes, $this->startAttributeStack[$stackPos-(3-3)] + $this->endAttributeStack[$stackPos-(3-3)], true);
             },
-            499 => function ($stackPos) {
+            498 => function ($stackPos) {
                  $this->semValue = null;
             },
+            499 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+            },
             500 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             501 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+            },
+            502 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
-            502 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
-            },
             503 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
@@ -2525,34 +2516,34 @@
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             507 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
             508 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             509 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             510 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             511 => function ($stackPos) {
                  $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             512 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             513 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = new Expr\MethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             514 => function ($stackPos) {
-                 $this->semValue = new Expr\MethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\NullsafeMethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             515 => function ($stackPos) {
-                 $this->semValue = new Expr\NullsafeMethodCall($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->semStack[$stackPos-(4-4)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+                 $this->semValue = null;
             },
             516 => function ($stackPos) {
-                 $this->semValue = null;
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             517 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
@@ -2561,168 +2552,165 @@
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             519 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             520 => function ($stackPos) {
-                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             521 => function ($stackPos) {
-                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             522 => function ($stackPos) {
-                 $this->semValue = substr($this->semStack[$stackPos-(1-1)], 1);
+                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             523 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(4-3)];
+                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             524 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Variable(new Expr\Error($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes), $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); $this->errorState = 2;
             },
             525 => function ($stackPos) {
-                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes); $this->errorState = 2;
+                 $var = $this->semStack[$stackPos-(1-1)]->name; $this->semValue = \is_string($var) ? new Node\VarLikeIdentifier($var, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $var;
             },
             526 => function ($stackPos) {
-                 $var = $this->semStack[$stackPos-(1-1)]; $this->semValue = \is_string($var) ? new Node\VarLikeIdentifier($var, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes) : $var;
+                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             527 => function ($stackPos) {
-                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             528 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             529 => function ($stackPos) {
                  $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             530 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
-            },
-            531 => function ($stackPos) {
                  $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            532 => function ($stackPos) {
+            531 => function ($stackPos) {
                  $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
+            532 => function ($stackPos) {
+                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             533 => function ($stackPos) {
                  $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             534 => function ($stackPos) {
-                 $this->semValue = new Expr\StaticPropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             535 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(1-1)];
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
             536 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             537 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            538 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
+            538 => function ($stackPos) {
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+            },
             539 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
+                 $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
             540 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
             },
             541 => function ($stackPos) {
-                 $this->semValue = new Expr\Error($this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes); $this->errorState = 2;
+                 $this->semValue = new Expr\List_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
             542 => function ($stackPos) {
-                 $this->semValue = new Expr\List_($this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
-            },
-            543 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)]; $end = count($this->semValue)-1; if ($this->semValue[$end] === null) array_pop($this->semValue);
             },
-            544 => function ($stackPos) {
+            543 => function ($stackPos) {
                 $this->semValue = $this->semStack[$stackPos];
             },
-            545 => function ($stackPos) {
+            544 => function ($stackPos) {
                  /* do nothing -- prevent default action of $$=$this->semStack[$1]. See $551. */
             },
+            545 => function ($stackPos) {
+                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+            },
             546 => function ($stackPos) {
-                 $this->semStack[$stackPos-(3-1)][] = $this->semStack[$stackPos-(3-3)]; $this->semValue = $this->semStack[$stackPos-(3-1)];
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
             547 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             548 => function ($stackPos) {
+                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
+            },
+            549 => function ($stackPos) {
                  $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
-            549 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
             550 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(1-1)], null, false, $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             551 => function ($stackPos) {
+                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-1)], true, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
+            },
+            552 => function ($stackPos) {
                  $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
-            552 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(4-4)], $this->semStack[$stackPos-(4-1)], true, $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
-            },
             553 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(3-3)], $this->semStack[$stackPos-(3-1)], false, $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
-            },
-            554 => function ($stackPos) {
                  $this->semValue = new Expr\ArrayItem($this->semStack[$stackPos-(2-2)], null, false, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes, true, $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
-            555 => function ($stackPos) {
+            554 => function ($stackPos) {
                  $this->semValue = null;
             },
+            555 => function ($stackPos) {
+                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
+            },
             556 => function ($stackPos) {
                  $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
             },
             557 => function ($stackPos) {
-                 $this->semStack[$stackPos-(2-1)][] = $this->semStack[$stackPos-(2-2)]; $this->semValue = $this->semStack[$stackPos-(2-1)];
+                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
             },
             558 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(1-1)]);
+                 $this->semValue = array($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]);
             },
             559 => function ($stackPos) {
-                 $this->semValue = array($this->semStack[$stackPos-(2-1)], $this->semStack[$stackPos-(2-2)]);
+                 $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             560 => function ($stackPos) {
-                 $this->semValue = new Scalar\EncapsedStringPart($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
             561 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
-            },
-            562 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
-            563 => function ($stackPos) {
+            562 => function ($stackPos) {
                  $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(4-1)], $this->semStack[$stackPos-(4-3)], $this->startAttributeStack[$stackPos-(4-1)] + $this->endAttributes);
             },
+            563 => function ($stackPos) {
+                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+            },
             564 => function ($stackPos) {
-                 $this->semValue = new Expr\PropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             565 => function ($stackPos) {
-                 $this->semValue = new Expr\NullsafePropertyFetch($this->semStack[$stackPos-(3-1)], $this->semStack[$stackPos-(3-3)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             566 => function ($stackPos) {
                  $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
             },
             567 => function ($stackPos) {
-                 $this->semValue = new Expr\Variable($this->semStack[$stackPos-(3-2)], $this->startAttributeStack[$stackPos-(3-1)] + $this->endAttributes);
+                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
             },
             568 => function ($stackPos) {
-                 $this->semValue = new Expr\ArrayDimFetch($this->semStack[$stackPos-(6-2)], $this->semStack[$stackPos-(6-4)], $this->startAttributeStack[$stackPos-(6-1)] + $this->endAttributes);
+                 $this->semValue = $this->semStack[$stackPos-(3-2)];
             },
             569 => function ($stackPos) {
-                 $this->semValue = $this->semStack[$stackPos-(3-2)];
-            },
-            570 => function ($stackPos) {
                  $this->semValue = new Scalar\String_($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
             },
+            570 => function ($stackPos) {
+                 $this->semValue = $this->parseNumString($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+            },
             571 => function ($stackPos) {
-                 $this->semValue = $this->parseNumString($this->semStack[$stackPos-(1-1)], $this->startAttributeStack[$stackPos-(1-1)] + $this->endAttributes);
+                 $this->semValue = $this->parseNumString('-' . $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
             },
             572 => function ($stackPos) {
-                 $this->semValue = $this->parseNumString('-' . $this->semStack[$stackPos-(2-2)], $this->startAttributeStack[$stackPos-(2-1)] + $this->endAttributes);
-            },
-            573 => function ($stackPos) {
                  $this->semValue = $this->semStack[$stackPos-(1-1)];
             },
         ];
Index: composer.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n    \"_readme\": [\r\n        \"This file locks the dependencies of your project to a known state\",\r\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\r\n        \"This file is @generated automatically\"\r\n    ],\r\n    \"content-hash\": \"3246d65bb62eaa9f316e5f80737ce084\",\r\n    \"packages\": [\r\n        {\r\n            \"name\": \"asm89/stack-cors\",\r\n            \"version\": \"v2.0.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/asm89/stack-cors.git\",\r\n                \"reference\": \"8d8f88b3b3830916be94292c1fbce84433efb1aa\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/asm89/stack-cors/zipball/8d8f88b3b3830916be94292c1fbce84433efb1aa\",\r\n                \"reference\": \"8d8f88b3b3830916be94292c1fbce84433efb1aa\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.0|^8.0\",\r\n                \"symfony/http-foundation\": \"~2.7|~3.0|~4.0|~5.0\",\r\n                \"symfony/http-kernel\": \"~2.7|~3.0|~4.0|~5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^6|^7|^8|^9\",\r\n                \"squizlabs/php_codesniffer\": \"^3.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Asm89\\\\Stack\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Alexander\",\r\n                    \"email\": \"iam.asm89@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Cross-origin resource sharing library and stack middleware\",\r\n            \"homepage\": \"https://github.com/asm89/stack-cors\",\r\n            \"keywords\": [\r\n                \"cors\",\r\n                \"stack\"\r\n            ],\r\n            \"time\": \"2020-10-29T16:03:21+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"brick/math\",\r\n            \"version\": \"0.9.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/brick/math.git\",\r\n                \"reference\": \"283a40c901101e66de7061bd359252c013dcc43c\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/brick/math/zipball/283a40c901101e66de7061bd359252c013dcc43c\",\r\n                \"reference\": \"283a40c901101e66de7061bd359252c013dcc43c\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-json\": \"*\",\r\n                \"php\": \"^7.1|^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"php-coveralls/php-coveralls\": \"^2.2\",\r\n                \"phpunit/phpunit\": \"^7.5.15|^8.5\",\r\n                \"vimeo/psalm\": \"^3.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Brick\\\\Math\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"description\": \"Arbitrary-precision arithmetic library\",\r\n            \"keywords\": [\r\n                \"Arbitrary-precision\",\r\n                \"BigInteger\",\r\n                \"BigRational\",\r\n                \"arithmetic\",\r\n                \"bigdecimal\",\r\n                \"bignum\",\r\n                \"brick\",\r\n                \"math\"\r\n            ],\r\n            \"time\": \"2020-08-18T23:57:15+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"dnoegel/php-xdg-base-dir\",\r\n            \"version\": \"v0.1.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/dnoegel/php-xdg-base-dir.git\",\r\n                \"reference\": \"8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd\",\r\n                \"reference\": \"8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.2\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"~7.0|~6.0|~5.0|~4.8.35\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"XdgBaseDir\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"description\": \"implementation of xdg base directory specification for php\",\r\n            \"time\": \"2019-12-04T15:06:13+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"doctrine/inflector\",\r\n            \"version\": \"2.0.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/doctrine/inflector.git\",\r\n                \"reference\": \"9cf661f4eb38f7c881cac67c75ea9b00bf97b210\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/doctrine/inflector/zipball/9cf661f4eb38f7c881cac67c75ea9b00bf97b210\",\r\n                \"reference\": \"9cf661f4eb38f7c881cac67c75ea9b00bf97b210\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"doctrine/coding-standard\": \"^7.0\",\r\n                \"phpstan/phpstan\": \"^0.11\",\r\n                \"phpstan/phpstan-phpunit\": \"^0.11\",\r\n                \"phpstan/phpstan-strict-rules\": \"^0.11\",\r\n                \"phpunit/phpunit\": \"^7.0 || ^8.0 || ^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Doctrine\\\\Inflector\\\\\": \"lib/Doctrine/Inflector\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Guilherme Blanco\",\r\n                    \"email\": \"guilhermeblanco@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Roman Borschel\",\r\n                    \"email\": \"roman@code-factory.org\"\r\n                },\r\n                {\r\n                    \"name\": \"Benjamin Eberlei\",\r\n                    \"email\": \"kontakt@beberlei.de\"\r\n                },\r\n                {\r\n                    \"name\": \"Jonathan Wage\",\r\n                    \"email\": \"jonwage@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Johannes Schmitt\",\r\n                    \"email\": \"schmittjoh@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"PHP Doctrine Inflector is a small library that can perform string manipulations with regard to upper/lowercase and singular/plural forms of words.\",\r\n            \"homepage\": \"https://www.doctrine-project.org/projects/inflector.html\",\r\n            \"keywords\": [\r\n                \"inflection\",\r\n                \"inflector\",\r\n                \"lowercase\",\r\n                \"manipulation\",\r\n                \"php\",\r\n                \"plural\",\r\n                \"singular\",\r\n                \"strings\",\r\n                \"uppercase\",\r\n                \"words\"\r\n            ],\r\n            \"time\": \"2020-05-29T15:13:26+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"doctrine/lexer\",\r\n            \"version\": \"1.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/doctrine/lexer.git\",\r\n                \"reference\": \"e864bbf5904cb8f5bb334f99209b48018522f042\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/doctrine/lexer/zipball/e864bbf5904cb8f5bb334f99209b48018522f042\",\r\n                \"reference\": \"e864bbf5904cb8f5bb334f99209b48018522f042\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"doctrine/coding-standard\": \"^6.0\",\r\n                \"phpstan/phpstan\": \"^0.11.8\",\r\n                \"phpunit/phpunit\": \"^8.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.2.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Doctrine\\\\Common\\\\Lexer\\\\\": \"lib/Doctrine/Common/Lexer\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Guilherme Blanco\",\r\n                    \"email\": \"guilhermeblanco@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Roman Borschel\",\r\n                    \"email\": \"roman@code-factory.org\"\r\n                },\r\n                {\r\n                    \"name\": \"Johannes Schmitt\",\r\n                    \"email\": \"schmittjoh@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.\",\r\n            \"homepage\": \"https://www.doctrine-project.org/projects/lexer.html\",\r\n            \"keywords\": [\r\n                \"annotations\",\r\n                \"docblock\",\r\n                \"lexer\",\r\n                \"parser\",\r\n                \"php\"\r\n            ],\r\n            \"time\": \"2020-05-25T17:44:05+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"dragonmantank/cron-expression\",\r\n            \"version\": \"v2.3.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/dragonmantank/cron-expression.git\",\r\n                \"reference\": \"65b2d8ee1f10915efb3b55597da3404f096acba2\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/dragonmantank/cron-expression/zipball/65b2d8ee1f10915efb3b55597da3404f096acba2\",\r\n                \"reference\": \"65b2d8ee1f10915efb3b55597da3404f096acba2\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.0|^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^6.4|^7.0|^8.0|^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.3-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Cron\\\\\": \"src/Cron/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Michael Dowling\",\r\n                    \"email\": \"mtdowling@gmail.com\",\r\n                    \"homepage\": \"https://github.com/mtdowling\"\r\n                },\r\n                {\r\n                    \"name\": \"Chris Tankersley\",\r\n                    \"email\": \"chris@ctankersley.com\",\r\n                    \"homepage\": \"https://github.com/dragonmantank\"\r\n                }\r\n            ],\r\n            \"description\": \"CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\",\r\n            \"keywords\": [\r\n                \"cron\",\r\n                \"schedule\"\r\n            ],\r\n            \"time\": \"2020-10-13T00:52:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"egulias/email-validator\",\r\n            \"version\": \"2.1.24\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/egulias/EmailValidator.git\",\r\n                \"reference\": \"ca90a3291eee1538cd48ff25163240695bd95448\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/egulias/EmailValidator/zipball/ca90a3291eee1538cd48ff25163240695bd95448\",\r\n                \"reference\": \"ca90a3291eee1538cd48ff25163240695bd95448\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"doctrine/lexer\": \"^1.0.1\",\r\n                \"php\": \">=5.5\",\r\n                \"symfony/polyfill-intl-idn\": \"^1.10\"\r\n            },\r\n            \"require-dev\": {\r\n                \"dominicsayers/isemail\": \"^3.0.7\",\r\n                \"phpunit/phpunit\": \"^4.8.36|^7.5.15\",\r\n                \"satooshi/php-coveralls\": \"^1.0.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-intl\": \"PHP Internationalization Libraries are required to use the SpoofChecking validation\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.1.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Egulias\\\\EmailValidator\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Eduardo Gulias Davis\"\r\n                }\r\n            ],\r\n            \"description\": \"A library for validating emails against several RFCs\",\r\n            \"homepage\": \"https://github.com/egulias/EmailValidator\",\r\n            \"keywords\": [\r\n                \"email\",\r\n                \"emailvalidation\",\r\n                \"emailvalidator\",\r\n                \"validation\",\r\n                \"validator\"\r\n            ],\r\n            \"time\": \"2020-11-14T15:56:27+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"fideloper/proxy\",\r\n            \"version\": \"4.4.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/fideloper/TrustedProxy.git\",\r\n                \"reference\": \"c073b2bd04d1c90e04dc1b787662b558dd65ade0\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/fideloper/TrustedProxy/zipball/c073b2bd04d1c90e04dc1b787662b558dd65ade0\",\r\n                \"reference\": \"c073b2bd04d1c90e04dc1b787662b558dd65ade0\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"illuminate/contracts\": \"^5.0|^6.0|^7.0|^8.0|^9.0\",\r\n                \"php\": \">=5.4.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"illuminate/http\": \"^5.0|^6.0|^7.0|^8.0|^9.0\",\r\n                \"mockery/mockery\": \"^1.0\",\r\n                \"phpunit/phpunit\": \"^6.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Fideloper\\\\Proxy\\\\TrustedProxyServiceProvider\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Fideloper\\\\Proxy\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Chris Fidao\",\r\n                    \"email\": \"fideloper@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Set trusted proxies for Laravel\",\r\n            \"keywords\": [\r\n                \"load balancing\",\r\n                \"proxy\",\r\n                \"trusted proxy\"\r\n            ],\r\n            \"time\": \"2020-10-22T13:48:01+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"fruitcake/laravel-cors\",\r\n            \"version\": \"v2.0.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/fruitcake/laravel-cors.git\",\r\n                \"reference\": \"01de0fe5f71c70d1930ee9a80385f9cc28e0f63a\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/fruitcake/laravel-cors/zipball/01de0fe5f71c70d1930ee9a80385f9cc28e0f63a\",\r\n                \"reference\": \"01de0fe5f71c70d1930ee9a80385f9cc28e0f63a\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"asm89/stack-cors\": \"^2.0.1\",\r\n                \"illuminate/contracts\": \"^6|^7|^8|^9\",\r\n                \"illuminate/support\": \"^6|^7|^8|^9\",\r\n                \"php\": \">=7.2\",\r\n                \"symfony/http-foundation\": \"^4|^5\",\r\n                \"symfony/http-kernel\": \"^4.3.4|^5\"\r\n            },\r\n            \"require-dev\": {\r\n                \"laravel/framework\": \"^6|^7|^8\",\r\n                \"orchestra/testbench-dusk\": \"^4|^5|^6\",\r\n                \"phpunit/phpunit\": \"^6|^7|^8\",\r\n                \"squizlabs/php_codesniffer\": \"^3.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0-dev\"\r\n                },\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Fruitcake\\\\Cors\\\\CorsServiceProvider\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Fruitcake\\\\Cors\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fruitcake\",\r\n                    \"homepage\": \"https://fruitcake.nl\"\r\n                },\r\n                {\r\n                    \"name\": \"Barry vd. Heuvel\",\r\n                    \"email\": \"barryvdh@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Adds CORS (Cross-Origin Resource Sharing) headers support in your Laravel application\",\r\n            \"keywords\": [\r\n                \"api\",\r\n                \"cors\",\r\n                \"crossdomain\",\r\n                \"laravel\"\r\n            ],\r\n            \"time\": \"2020-10-22T13:57:20+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"guzzlehttp/guzzle\",\r\n            \"version\": \"7.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/guzzle/guzzle.git\",\r\n                \"reference\": \"0aa74dfb41ae110835923ef10a9d803a22d50e79\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/guzzle/guzzle/zipball/0aa74dfb41ae110835923ef10a9d803a22d50e79\",\r\n                \"reference\": \"0aa74dfb41ae110835923ef10a9d803a22d50e79\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-json\": \"*\",\r\n                \"guzzlehttp/promises\": \"^1.4\",\r\n                \"guzzlehttp/psr7\": \"^1.7\",\r\n                \"php\": \"^7.2.5 || ^8.0\",\r\n                \"psr/http-client\": \"^1.0\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/http-client-implementation\": \"1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-curl\": \"*\",\r\n                \"php-http/client-integration-tests\": \"^3.0\",\r\n                \"phpunit/phpunit\": \"^8.5.5 || ^9.3.5\",\r\n                \"psr/log\": \"^1.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-curl\": \"Required for CURL handler support\",\r\n                \"ext-intl\": \"Required for Internationalized Domain Name (IDN) support\",\r\n                \"psr/log\": \"Required for using the Log middleware\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"7.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"GuzzleHttp\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/functions_include.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Michael Dowling\",\r\n                    \"email\": \"mtdowling@gmail.com\",\r\n                    \"homepage\": \"https://github.com/mtdowling\"\r\n                },\r\n                {\r\n                    \"name\": \"Márk Sági-Kazár\",\r\n                    \"email\": \"mark.sagikazar@gmail.com\",\r\n                    \"homepage\": \"https://sagikazarmark.hu\"\r\n                }\r\n            ],\r\n            \"description\": \"Guzzle is a PHP HTTP client library\",\r\n            \"homepage\": \"http://guzzlephp.org/\",\r\n            \"keywords\": [\r\n                \"client\",\r\n                \"curl\",\r\n                \"framework\",\r\n                \"http\",\r\n                \"http client\",\r\n                \"psr-18\",\r\n                \"psr-7\",\r\n                \"rest\",\r\n                \"web service\"\r\n            ],\r\n            \"time\": \"2020-10-10T11:47:56+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"guzzlehttp/promises\",\r\n            \"version\": \"1.4.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/guzzle/promises.git\",\r\n                \"reference\": \"60d379c243457e073cff02bc323a2a86cb355631\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/guzzle/promises/zipball/60d379c243457e073cff02bc323a2a86cb355631\",\r\n                \"reference\": \"60d379c243457e073cff02bc323a2a86cb355631\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.5\"\r\n            },\r\n            \"require-dev\": {\r\n                \"symfony/phpunit-bridge\": \"^4.4 || ^5.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.4-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"GuzzleHttp\\\\Promise\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/functions_include.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Michael Dowling\",\r\n                    \"email\": \"mtdowling@gmail.com\",\r\n                    \"homepage\": \"https://github.com/mtdowling\"\r\n                }\r\n            ],\r\n            \"description\": \"Guzzle promises library\",\r\n            \"keywords\": [\r\n                \"promise\"\r\n            ],\r\n            \"time\": \"2020-09-30T07:37:28+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"guzzlehttp/psr7\",\r\n            \"version\": \"1.7.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/guzzle/psr7.git\",\r\n                \"reference\": \"53330f47520498c0ae1f61f7e2c90f55690c06a3\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/guzzle/psr7/zipball/53330f47520498c0ae1f61f7e2c90f55690c06a3\",\r\n                \"reference\": \"53330f47520498c0ae1f61f7e2c90f55690c06a3\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.4.0\",\r\n                \"psr/http-message\": \"~1.0\",\r\n                \"ralouphie/getallheaders\": \"^2.0.5 || ^3.0.0\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/http-message-implementation\": \"1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-zlib\": \"*\",\r\n                \"phpunit/phpunit\": \"~4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.10\"\r\n            },\r\n            \"suggest\": {\r\n                \"laminas/laminas-httphandlerrunner\": \"Emit PSR-7 responses\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.7-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"GuzzleHttp\\\\Psr7\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/functions_include.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Michael Dowling\",\r\n                    \"email\": \"mtdowling@gmail.com\",\r\n                    \"homepage\": \"https://github.com/mtdowling\"\r\n                },\r\n                {\r\n                    \"name\": \"Tobias Schultze\",\r\n                    \"homepage\": \"https://github.com/Tobion\"\r\n                }\r\n            ],\r\n            \"description\": \"PSR-7 message implementation that also provides common utility methods\",\r\n            \"keywords\": [\r\n                \"http\",\r\n                \"message\",\r\n                \"psr-7\",\r\n                \"request\",\r\n                \"response\",\r\n                \"stream\",\r\n                \"uri\",\r\n                \"url\"\r\n            ],\r\n            \"time\": \"2020-09-30T07:37:11+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"laravel/framework\",\r\n            \"version\": \"v7.30.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/laravel/framework.git\",\r\n                \"reference\": \"629c36a0fe87b66d8dccd3c82927950d0f59d3f9\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/laravel/framework/zipball/629c36a0fe87b66d8dccd3c82927950d0f59d3f9\",\r\n                \"reference\": \"629c36a0fe87b66d8dccd3c82927950d0f59d3f9\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"doctrine/inflector\": \"^1.4|^2.0\",\r\n                \"dragonmantank/cron-expression\": \"^2.3.1\",\r\n                \"egulias/email-validator\": \"^2.1.10\",\r\n                \"ext-json\": \"*\",\r\n                \"ext-mbstring\": \"*\",\r\n                \"ext-openssl\": \"*\",\r\n                \"league/commonmark\": \"^1.3\",\r\n                \"league/flysystem\": \"^1.1\",\r\n                \"monolog/monolog\": \"^2.0\",\r\n                \"nesbot/carbon\": \"^2.31\",\r\n                \"opis/closure\": \"^3.6\",\r\n                \"php\": \"^7.2.5|^8.0\",\r\n                \"psr/container\": \"^1.0\",\r\n                \"psr/simple-cache\": \"^1.0\",\r\n                \"ramsey/uuid\": \"^3.7|^4.0\",\r\n                \"swiftmailer/swiftmailer\": \"^6.0\",\r\n                \"symfony/console\": \"^5.0\",\r\n                \"symfony/error-handler\": \"^5.0\",\r\n                \"symfony/finder\": \"^5.0\",\r\n                \"symfony/http-foundation\": \"^5.0\",\r\n                \"symfony/http-kernel\": \"^5.0\",\r\n                \"symfony/mime\": \"^5.0\",\r\n                \"symfony/polyfill-php73\": \"^1.17\",\r\n                \"symfony/process\": \"^5.0\",\r\n                \"symfony/routing\": \"^5.0\",\r\n                \"symfony/var-dumper\": \"^5.0\",\r\n                \"tijsverkoyen/css-to-inline-styles\": \"^2.2.2\",\r\n                \"vlucas/phpdotenv\": \"^4.0\",\r\n                \"voku/portable-ascii\": \"^1.4.8\"\r\n            },\r\n            \"conflict\": {\r\n                \"tightenco/collect\": \"<5.5.33\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/container-implementation\": \"1.0\"\r\n            },\r\n            \"replace\": {\r\n                \"illuminate/auth\": \"self.version\",\r\n                \"illuminate/broadcasting\": \"self.version\",\r\n                \"illuminate/bus\": \"self.version\",\r\n                \"illuminate/cache\": \"self.version\",\r\n                \"illuminate/config\": \"self.version\",\r\n                \"illuminate/console\": \"self.version\",\r\n                \"illuminate/container\": \"self.version\",\r\n                \"illuminate/contracts\": \"self.version\",\r\n                \"illuminate/cookie\": \"self.version\",\r\n                \"illuminate/database\": \"self.version\",\r\n                \"illuminate/encryption\": \"self.version\",\r\n                \"illuminate/events\": \"self.version\",\r\n                \"illuminate/filesystem\": \"self.version\",\r\n                \"illuminate/hashing\": \"self.version\",\r\n                \"illuminate/http\": \"self.version\",\r\n                \"illuminate/log\": \"self.version\",\r\n                \"illuminate/mail\": \"self.version\",\r\n                \"illuminate/notifications\": \"self.version\",\r\n                \"illuminate/pagination\": \"self.version\",\r\n                \"illuminate/pipeline\": \"self.version\",\r\n                \"illuminate/queue\": \"self.version\",\r\n                \"illuminate/redis\": \"self.version\",\r\n                \"illuminate/routing\": \"self.version\",\r\n                \"illuminate/session\": \"self.version\",\r\n                \"illuminate/support\": \"self.version\",\r\n                \"illuminate/testing\": \"self.version\",\r\n                \"illuminate/translation\": \"self.version\",\r\n                \"illuminate/validation\": \"self.version\",\r\n                \"illuminate/view\": \"self.version\"\r\n            },\r\n            \"require-dev\": {\r\n                \"aws/aws-sdk-php\": \"^3.155\",\r\n                \"doctrine/dbal\": \"^2.6\",\r\n                \"filp/whoops\": \"^2.8\",\r\n                \"guzzlehttp/guzzle\": \"^6.3.1|^7.0.1\",\r\n                \"league/flysystem-cached-adapter\": \"^1.0\",\r\n                \"mockery/mockery\": \"~1.3.3|^1.4.2\",\r\n                \"moontoast/math\": \"^1.1\",\r\n                \"orchestra/testbench-core\": \"^5.8\",\r\n                \"pda/pheanstalk\": \"^4.0\",\r\n                \"phpunit/phpunit\": \"^8.4|^9.3.3\",\r\n                \"predis/predis\": \"^1.1.1\",\r\n                \"symfony/cache\": \"^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"aws/aws-sdk-php\": \"Required to use the SQS queue driver, DynamoDb failed job storage and SES mail driver (^3.155).\",\r\n                \"doctrine/dbal\": \"Required to rename columns and drop SQLite columns (^2.6).\",\r\n                \"ext-ftp\": \"Required to use the Flysystem FTP driver.\",\r\n                \"ext-gd\": \"Required to use Illuminate\\\\Http\\\\Testing\\\\FileFactory::image().\",\r\n                \"ext-memcached\": \"Required to use the memcache cache driver.\",\r\n                \"ext-pcntl\": \"Required to use all features of the queue worker.\",\r\n                \"ext-posix\": \"Required to use all features of the queue worker.\",\r\n                \"ext-redis\": \"Required to use the Redis cache and queue drivers (^4.0|^5.0).\",\r\n                \"fakerphp/faker\": \"Required to use the eloquent factory builder (^1.9.1).\",\r\n                \"filp/whoops\": \"Required for friendly error pages in development (^2.8).\",\r\n                \"guzzlehttp/guzzle\": \"Required to use the HTTP Client, Mailgun mail driver and the ping methods on schedules (^6.3.1|^7.0.1).\",\r\n                \"laravel/tinker\": \"Required to use the tinker console command (^2.0).\",\r\n                \"league/flysystem-aws-s3-v3\": \"Required to use the Flysystem S3 driver (^1.0).\",\r\n                \"league/flysystem-cached-adapter\": \"Required to use the Flysystem cache (^1.0).\",\r\n                \"league/flysystem-sftp\": \"Required to use the Flysystem SFTP driver (^1.0).\",\r\n                \"mockery/mockery\": \"Required to use mocking (~1.3.3|^1.4.2).\",\r\n                \"moontoast/math\": \"Required to use ordered UUIDs (^1.1).\",\r\n                \"nyholm/psr7\": \"Required to use PSR-7 bridging features (^1.2).\",\r\n                \"pda/pheanstalk\": \"Required to use the beanstalk queue driver (^4.0).\",\r\n                \"phpunit/phpunit\": \"Required to use assertions and run tests (^8.4|^9.3.3).\",\r\n                \"predis/predis\": \"Required to use the predis connector (^1.1.2).\",\r\n                \"psr/http-message\": \"Required to allow Storage::put to accept a StreamInterface (^1.0).\",\r\n                \"pusher/pusher-php-server\": \"Required to use the Pusher broadcast driver (^4.0).\",\r\n                \"symfony/cache\": \"Required to PSR-6 cache bridge (^5.0).\",\r\n                \"symfony/filesystem\": \"Required to create relative storage directory symbolic links (^5.0).\",\r\n                \"symfony/psr-http-message-bridge\": \"Required to use PSR-7 bridging features (^2.0).\",\r\n                \"wildbit/swiftmailer-postmark\": \"Required to use Postmark mail driver (^3.0).\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"7.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"src/Illuminate/Foundation/helpers.php\",\r\n                    \"src/Illuminate/Support/helpers.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Illuminate\\\\\": \"src/Illuminate/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Taylor Otwell\",\r\n                    \"email\": \"taylor@laravel.com\"\r\n                }\r\n            ],\r\n            \"description\": \"The Laravel Framework.\",\r\n            \"homepage\": \"https://laravel.com\",\r\n            \"keywords\": [\r\n                \"framework\",\r\n                \"laravel\"\r\n            ],\r\n            \"time\": \"2020-12-01T15:01:25+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"laravel/tinker\",\r\n            \"version\": \"v2.5.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/laravel/tinker.git\",\r\n                \"reference\": \"45884b526e10a88a1b179fa1a1a24d5468c668c2\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/laravel/tinker/zipball/45884b526e10a88a1b179fa1a1a24d5468c668c2\",\r\n                \"reference\": \"45884b526e10a88a1b179fa1a1a24d5468c668c2\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"illuminate/console\": \"^6.0|^7.0|^8.0\",\r\n                \"illuminate/contracts\": \"^6.0|^7.0|^8.0\",\r\n                \"illuminate/support\": \"^6.0|^7.0|^8.0\",\r\n                \"php\": \"^7.2.5|^8.0\",\r\n                \"psy/psysh\": \"^0.10.4\",\r\n                \"symfony/var-dumper\": \"^4.3.4|^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"mockery/mockery\": \"~1.3.3|^1.4.2\",\r\n                \"phpunit/phpunit\": \"^8.5.8|^9.3.3\"\r\n            },\r\n            \"suggest\": {\r\n                \"illuminate/database\": \"The Illuminate Database package (^6.0|^7.0|^8.0).\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.x-dev\"\r\n                },\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Laravel\\\\Tinker\\\\TinkerServiceProvider\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Laravel\\\\Tinker\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Taylor Otwell\",\r\n                    \"email\": \"taylor@laravel.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Powerful REPL for the Laravel framework.\",\r\n            \"keywords\": [\r\n                \"REPL\",\r\n                \"Tinker\",\r\n                \"laravel\",\r\n                \"psysh\"\r\n            ],\r\n            \"time\": \"2020-10-29T13:07:12+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"laravel/ui\",\r\n            \"version\": \"v2.4.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/laravel/ui.git\",\r\n                \"reference\": \"f5398544a9cd4804a42d09ce51735e37cd51ea2d\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/laravel/ui/zipball/f5398544a9cd4804a42d09ce51735e37cd51ea2d\",\r\n                \"reference\": \"f5398544a9cd4804a42d09ce51735e37cd51ea2d\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"illuminate/console\": \"^7.0\",\r\n                \"illuminate/filesystem\": \"^7.0\",\r\n                \"illuminate/support\": \"^7.0\",\r\n                \"php\": \"^7.2.5\"\r\n            },\r\n            \"require-dev\": {\r\n                \"mockery/mockery\": \"^1.0\",\r\n                \"phpunit/phpunit\": \"^8.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Laravel\\\\Ui\\\\UiServiceProvider\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Laravel\\\\Ui\\\\\": \"src/\",\r\n                    \"Illuminate\\\\Foundation\\\\Auth\\\\\": \"auth-backend/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Taylor Otwell\",\r\n                    \"email\": \"taylor@laravel.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Laravel UI utilities and presets.\",\r\n            \"keywords\": [\r\n                \"laravel\",\r\n                \"ui\"\r\n            ],\r\n            \"time\": \"2020-09-11T15:31:52+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"laravelcollective/html\",\r\n            \"version\": \"v6.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/LaravelCollective/html.git\",\r\n                \"reference\": \"ae15b9c4bf918ec3a78f092b8555551dd693fde3\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/LaravelCollective/html/zipball/ae15b9c4bf918ec3a78f092b8555551dd693fde3\",\r\n                \"reference\": \"ae15b9c4bf918ec3a78f092b8555551dd693fde3\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"illuminate/http\": \"^6.0|^7.0|^8.0\",\r\n                \"illuminate/routing\": \"^6.0|^7.0|^8.0\",\r\n                \"illuminate/session\": \"^6.0|^7.0|^8.0\",\r\n                \"illuminate/support\": \"^6.0|^7.0|^8.0\",\r\n                \"illuminate/view\": \"^6.0|^7.0|^8.0\",\r\n                \"php\": \">=7.2.5\"\r\n            },\r\n            \"require-dev\": {\r\n                \"illuminate/database\": \"^6.0|^7.0|^8.0\",\r\n                \"mockery/mockery\": \"~1.0\",\r\n                \"phpunit/phpunit\": \"~8.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"6.x-dev\"\r\n                },\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Collective\\\\Html\\\\HtmlServiceProvider\"\r\n                    ],\r\n                    \"aliases\": {\r\n                        \"Form\": \"Collective\\\\Html\\\\FormFacade\",\r\n                        \"Html\": \"Collective\\\\Html\\\\HtmlFacade\"\r\n                    }\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Collective\\\\Html\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/helpers.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Adam Engebretson\",\r\n                    \"email\": \"adam@laravelcollective.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Taylor Otwell\",\r\n                    \"email\": \"taylorotwell@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"HTML and Form Builders for the Laravel Framework\",\r\n            \"homepage\": \"https://laravelcollective.com\",\r\n            \"time\": \"2020-12-15T20:20:05+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"league/commonmark\",\r\n            \"version\": \"1.5.7\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/thephpleague/commonmark.git\",\r\n                \"reference\": \"11df9b36fd4f1d2b727a73bf14931d81373b9a54\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/thephpleague/commonmark/zipball/11df9b36fd4f1d2b727a73bf14931d81373b9a54\",\r\n                \"reference\": \"11df9b36fd4f1d2b727a73bf14931d81373b9a54\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-mbstring\": \"*\",\r\n                \"php\": \"^7.1 || ^8.0\"\r\n            },\r\n            \"conflict\": {\r\n                \"scrutinizer/ocular\": \"1.7.*\"\r\n            },\r\n            \"require-dev\": {\r\n                \"cebe/markdown\": \"~1.0\",\r\n                \"commonmark/commonmark.js\": \"0.29.2\",\r\n                \"erusev/parsedown\": \"~1.0\",\r\n                \"ext-json\": \"*\",\r\n                \"github/gfm\": \"0.29.0\",\r\n                \"michelf/php-markdown\": \"~1.4\",\r\n                \"mikehaertl/php-shellcommand\": \"^1.4\",\r\n                \"phpstan/phpstan\": \"^0.12\",\r\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.2\",\r\n                \"scrutinizer/ocular\": \"^1.5\",\r\n                \"symfony/finder\": \"^4.2\"\r\n            },\r\n            \"bin\": [\r\n                \"bin/commonmark\"\r\n            ],\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"League\\\\CommonMark\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Colin O'Dell\",\r\n                    \"email\": \"colinodell@gmail.com\",\r\n                    \"homepage\": \"https://www.colinodell.com\",\r\n                    \"role\": \"Lead Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"Highly-extensible PHP Markdown parser which fully supports the CommonMark spec and Github-Flavored Markdown (GFM)\",\r\n            \"homepage\": \"https://commonmark.thephpleague.com\",\r\n            \"keywords\": [\r\n                \"commonmark\",\r\n                \"flavored\",\r\n                \"gfm\",\r\n                \"github\",\r\n                \"github-flavored\",\r\n                \"markdown\",\r\n                \"md\",\r\n                \"parser\"\r\n            ],\r\n            \"time\": \"2020-10-31T13:49:32+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"league/flysystem\",\r\n            \"version\": \"1.1.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/thephpleague/flysystem.git\",\r\n                \"reference\": \"9be3b16c877d477357c015cec057548cf9b2a14a\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/thephpleague/flysystem/zipball/9be3b16c877d477357c015cec057548cf9b2a14a\",\r\n                \"reference\": \"9be3b16c877d477357c015cec057548cf9b2a14a\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-fileinfo\": \"*\",\r\n                \"league/mime-type-detection\": \"^1.3\",\r\n                \"php\": \"^7.2.5 || ^8.0\"\r\n            },\r\n            \"conflict\": {\r\n                \"league/flysystem-sftp\": \"<1.0.6\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpspec/prophecy\": \"^1.11.1\",\r\n                \"phpunit/phpunit\": \"^8.5.8\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-fileinfo\": \"Required for MimeType\",\r\n                \"ext-ftp\": \"Allows you to use FTP server storage\",\r\n                \"ext-openssl\": \"Allows you to use FTPS server storage\",\r\n                \"league/flysystem-aws-s3-v2\": \"Allows you to use S3 storage with AWS SDK v2\",\r\n                \"league/flysystem-aws-s3-v3\": \"Allows you to use S3 storage with AWS SDK v3\",\r\n                \"league/flysystem-azure\": \"Allows you to use Windows Azure Blob storage\",\r\n                \"league/flysystem-cached-adapter\": \"Flysystem adapter decorator for metadata caching\",\r\n                \"league/flysystem-eventable-filesystem\": \"Allows you to use EventableFilesystem\",\r\n                \"league/flysystem-rackspace\": \"Allows you to use Rackspace Cloud Files\",\r\n                \"league/flysystem-sftp\": \"Allows you to use SFTP server storage via phpseclib\",\r\n                \"league/flysystem-webdav\": \"Allows you to use WebDAV storage\",\r\n                \"league/flysystem-ziparchive\": \"Allows you to use ZipArchive adapter\",\r\n                \"spatie/flysystem-dropbox\": \"Allows you to use Dropbox storage\",\r\n                \"srmklive/flysystem-dropbox-v2\": \"Allows you to use Dropbox storage for PHP 5 applications\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"League\\\\Flysystem\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Frank de Jonge\",\r\n                    \"email\": \"info@frenky.net\"\r\n                }\r\n            ],\r\n            \"description\": \"Filesystem abstraction: Many filesystems, one API.\",\r\n            \"keywords\": [\r\n                \"Cloud Files\",\r\n                \"WebDAV\",\r\n                \"abstraction\",\r\n                \"aws\",\r\n                \"cloud\",\r\n                \"copy.com\",\r\n                \"dropbox\",\r\n                \"file systems\",\r\n                \"files\",\r\n                \"filesystem\",\r\n                \"filesystems\",\r\n                \"ftp\",\r\n                \"rackspace\",\r\n                \"remote\",\r\n                \"s3\",\r\n                \"sftp\",\r\n                \"storage\"\r\n            ],\r\n            \"time\": \"2020-08-23T07:39:11+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"league/mime-type-detection\",\r\n            \"version\": \"1.5.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/thephpleague/mime-type-detection.git\",\r\n                \"reference\": \"353f66d7555d8a90781f6f5e7091932f9a4250aa\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/thephpleague/mime-type-detection/zipball/353f66d7555d8a90781f6f5e7091932f9a4250aa\",\r\n                \"reference\": \"353f66d7555d8a90781f6f5e7091932f9a4250aa\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-fileinfo\": \"*\",\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpstan/phpstan\": \"^0.12.36\",\r\n                \"phpunit/phpunit\": \"^8.5.8\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"League\\\\MimeTypeDetection\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Frank de Jonge\",\r\n                    \"email\": \"info@frankdejonge.nl\"\r\n                }\r\n            ],\r\n            \"description\": \"Mime-type detection for Flysystem\",\r\n            \"time\": \"2020-10-18T11:50:25+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"monolog/monolog\",\r\n            \"version\": \"2.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/Seldaek/monolog.git\",\r\n                \"reference\": \"1cb1cde8e8dd0f70cc0fe51354a59acad9302084\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/1cb1cde8e8dd0f70cc0fe51354a59acad9302084\",\r\n                \"reference\": \"1cb1cde8e8dd0f70cc0fe51354a59acad9302084\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2\",\r\n                \"psr/log\": \"^1.0.1\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/log-implementation\": \"1.0.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"aws/aws-sdk-php\": \"^2.4.9 || ^3.0\",\r\n                \"doctrine/couchdb\": \"~1.0@dev\",\r\n                \"elasticsearch/elasticsearch\": \"^7\",\r\n                \"graylog2/gelf-php\": \"^1.4.2\",\r\n                \"mongodb/mongodb\": \"^1.8\",\r\n                \"php-amqplib/php-amqplib\": \"~2.4\",\r\n                \"php-console/php-console\": \"^3.1.3\",\r\n                \"phpspec/prophecy\": \"^1.6.1\",\r\n                \"phpstan/phpstan\": \"^0.12.59\",\r\n                \"phpunit/phpunit\": \"^8.5\",\r\n                \"predis/predis\": \"^1.1\",\r\n                \"rollbar/rollbar\": \"^1.3\",\r\n                \"ruflin/elastica\": \">=0.90 <7.0.1\",\r\n                \"swiftmailer/swiftmailer\": \"^5.3|^6.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\r\n                \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\r\n                \"elasticsearch/elasticsearch\": \"Allow sending log messages to an Elasticsearch server via official client\",\r\n                \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\r\n                \"ext-mbstring\": \"Allow to work properly with unicode symbols\",\r\n                \"ext-mongodb\": \"Allow sending log messages to a MongoDB server (via driver)\",\r\n                \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\r\n                \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server (via library)\",\r\n                \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\r\n                \"php-console/php-console\": \"Allow sending log messages to Google Chrome\",\r\n                \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\r\n                \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"2.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Monolog\\\\\": \"src/Monolog\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Jordi Boggiano\",\r\n                    \"email\": \"j.boggiano@seld.be\",\r\n                    \"homepage\": \"https://seld.be\"\r\n                }\r\n            ],\r\n            \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\r\n            \"homepage\": \"https://github.com/Seldaek/monolog\",\r\n            \"keywords\": [\r\n                \"log\",\r\n                \"logging\",\r\n                \"psr-3\"\r\n            ],\r\n            \"time\": \"2020-12-14T13:15:25+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"nesbot/carbon\",\r\n            \"version\": \"2.43.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/briannesbitt/Carbon.git\",\r\n                \"reference\": \"d32c57d8389113742f4a88725a170236470012e2\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/briannesbitt/Carbon/zipball/d32c57d8389113742f4a88725a170236470012e2\",\r\n                \"reference\": \"d32c57d8389113742f4a88725a170236470012e2\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-json\": \"*\",\r\n                \"php\": \"^7.1.8 || ^8.0\",\r\n                \"symfony/polyfill-mbstring\": \"^1.0\",\r\n                \"symfony/translation\": \"^3.4 || ^4.0 || ^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"doctrine/orm\": \"^2.7\",\r\n                \"friendsofphp/php-cs-fixer\": \"^2.14 || ^3.0\",\r\n                \"kylekatarnls/multi-tester\": \"^2.0\",\r\n                \"phpmd/phpmd\": \"^2.9\",\r\n                \"phpstan/extension-installer\": \"^1.0\",\r\n                \"phpstan/phpstan\": \"^0.12.54\",\r\n                \"phpunit/phpunit\": \"^7.5 || ^8.0\",\r\n                \"squizlabs/php_codesniffer\": \"^3.4\"\r\n            },\r\n            \"bin\": [\r\n                \"bin/carbon\"\r\n            ],\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.x-dev\",\r\n                    \"dev-3.x\": \"3.x-dev\"\r\n                },\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Carbon\\\\Laravel\\\\ServiceProvider\"\r\n                    ]\r\n                },\r\n                \"phpstan\": {\r\n                    \"includes\": [\r\n                        \"extension.neon\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Carbon\\\\\": \"src/Carbon/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Brian Nesbitt\",\r\n                    \"email\": \"brian@nesbot.com\",\r\n                    \"homepage\": \"http://nesbot.com\"\r\n                },\r\n                {\r\n                    \"name\": \"kylekatarnls\",\r\n                    \"homepage\": \"http://github.com/kylekatarnls\"\r\n                }\r\n            ],\r\n            \"description\": \"An API extension for DateTime that supports 281 different languages.\",\r\n            \"homepage\": \"http://carbon.nesbot.com\",\r\n            \"keywords\": [\r\n                \"date\",\r\n                \"datetime\",\r\n                \"time\"\r\n            ],\r\n            \"time\": \"2020-12-17T20:55:32+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"nikic/php-parser\",\r\n            \"version\": \"v4.10.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/nikic/PHP-Parser.git\",\r\n                \"reference\": \"dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984\",\r\n                \"reference\": \"dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-tokenizer\": \"*\",\r\n                \"php\": \">=7.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ircmaxell/php-yacc\": \"^0.0.7\",\r\n                \"phpunit/phpunit\": \"^6.5 || ^7.0 || ^8.0 || ^9.0\"\r\n            },\r\n            \"bin\": [\r\n                \"bin/php-parse\"\r\n            ],\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"4.9-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"PhpParser\\\\\": \"lib/PhpParser\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nikita Popov\"\r\n                }\r\n            ],\r\n            \"description\": \"A PHP parser written in PHP\",\r\n            \"keywords\": [\r\n                \"parser\",\r\n                \"php\"\r\n            ],\r\n            \"time\": \"2020-12-03T17:45:45+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"opis/closure\",\r\n            \"version\": \"3.6.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/opis/closure.git\",\r\n                \"reference\": \"943b5d70cc5ae7483f6aff6ff43d7e34592ca0f5\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/opis/closure/zipball/943b5d70cc5ae7483f6aff6ff43d7e34592ca0f5\",\r\n                \"reference\": \"943b5d70cc5ae7483f6aff6ff43d7e34592ca0f5\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.4 || ^7.0 || ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"jeremeamia/superclosure\": \"^2.0\",\r\n                \"phpunit/phpunit\": \"^4.0 || ^5.0 || ^6.0 || ^7.0 || ^8.0 || ^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.6.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Opis\\\\Closure\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"functions.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Marius Sarca\",\r\n                    \"email\": \"marius.sarca@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Sorin Sarca\",\r\n                    \"email\": \"sarca_sorin@hotmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"A library that can be used to serialize closures (anonymous functions) and arbitrary objects.\",\r\n            \"homepage\": \"https://opis.io/closure\",\r\n            \"keywords\": [\r\n                \"anonymous functions\",\r\n                \"closure\",\r\n                \"function\",\r\n                \"serializable\",\r\n                \"serialization\",\r\n                \"serialize\"\r\n            ],\r\n            \"time\": \"2020-11-07T02:01:34+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpoption/phpoption\",\r\n            \"version\": \"1.7.5\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/schmittjoh/php-option.git\",\r\n                \"reference\": \"994ecccd8f3283ecf5ac33254543eb0ac946d525\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/schmittjoh/php-option/zipball/994ecccd8f3283ecf5ac33254543eb0ac946d525\",\r\n                \"reference\": \"994ecccd8f3283ecf5ac33254543eb0ac946d525\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.5.9 || ^7.0 || ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"bamarni/composer-bin-plugin\": \"^1.4.1\",\r\n                \"phpunit/phpunit\": \"^4.8.35 || ^5.7.27 || ^6.5.6 || ^7.0 || ^8.0 || ^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.7-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"PhpOption\\\\\": \"src/PhpOption/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"Apache-2.0\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Johannes M. Schmitt\",\r\n                    \"email\": \"schmittjoh@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Graham Campbell\",\r\n                    \"email\": \"graham@alt-three.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Option Type for PHP\",\r\n            \"keywords\": [\r\n                \"language\",\r\n                \"option\",\r\n                \"php\",\r\n                \"type\"\r\n            ],\r\n            \"time\": \"2020-07-20T17:29:33+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/container\",\r\n            \"version\": \"1.0.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/container.git\",\r\n                \"reference\": \"b7ce3b176482dbbc1245ebf52b181af44c2cf55f\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/container/zipball/b7ce3b176482dbbc1245ebf52b181af44c2cf55f\",\r\n                \"reference\": \"b7ce3b176482dbbc1245ebf52b181af44c2cf55f\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Container\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common Container Interface (PHP FIG PSR-11)\",\r\n            \"homepage\": \"https://github.com/php-fig/container\",\r\n            \"keywords\": [\r\n                \"PSR-11\",\r\n                \"container\",\r\n                \"container-interface\",\r\n                \"container-interop\",\r\n                \"psr\"\r\n            ],\r\n            \"time\": \"2017-02-14T16:28:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/event-dispatcher\",\r\n            \"version\": \"1.0.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/event-dispatcher.git\",\r\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0\",\r\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\EventDispatcher\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Standard interfaces for event handling.\",\r\n            \"keywords\": [\r\n                \"events\",\r\n                \"psr\",\r\n                \"psr-14\"\r\n            ],\r\n            \"time\": \"2019-01-08T18:20:26+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/http-client\",\r\n            \"version\": \"1.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/http-client.git\",\r\n                \"reference\": \"2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/http-client/zipball/2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\",\r\n                \"reference\": \"2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.0 || ^8.0\",\r\n                \"psr/http-message\": \"^1.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Http\\\\Client\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interface for HTTP clients\",\r\n            \"homepage\": \"https://github.com/php-fig/http-client\",\r\n            \"keywords\": [\r\n                \"http\",\r\n                \"http-client\",\r\n                \"psr\",\r\n                \"psr-18\"\r\n            ],\r\n            \"time\": \"2020-06-29T06:28:15+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/http-message\",\r\n            \"version\": \"1.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/http-message.git\",\r\n                \"reference\": \"f6561bf28d520154e4b0ec72be95418abe6d9363\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363\",\r\n                \"reference\": \"f6561bf28d520154e4b0ec72be95418abe6d9363\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interface for HTTP messages\",\r\n            \"homepage\": \"https://github.com/php-fig/http-message\",\r\n            \"keywords\": [\r\n                \"http\",\r\n                \"http-message\",\r\n                \"psr\",\r\n                \"psr-7\",\r\n                \"request\",\r\n                \"response\"\r\n            ],\r\n            \"time\": \"2016-08-06T14:39:51+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/log\",\r\n            \"version\": \"1.1.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/log.git\",\r\n                \"reference\": \"0f73288fd15629204f9d42b7055f72dacbe811fc\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc\",\r\n                \"reference\": \"0f73288fd15629204f9d42b7055f72dacbe811fc\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.1.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\Log\\\\\": \"Psr/Log/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interface for logging libraries\",\r\n            \"homepage\": \"https://github.com/php-fig/log\",\r\n            \"keywords\": [\r\n                \"log\",\r\n                \"psr\",\r\n                \"psr-3\"\r\n            ],\r\n            \"time\": \"2020-03-23T09:12:05+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psr/simple-cache\",\r\n            \"version\": \"1.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/php-fig/simple-cache.git\",\r\n                \"reference\": \"408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/php-fig/simple-cache/zipball/408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\",\r\n                \"reference\": \"408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Psr\\\\SimpleCache\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"PHP-FIG\",\r\n                    \"homepage\": \"http://www.php-fig.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Common interfaces for simple caching\",\r\n            \"keywords\": [\r\n                \"cache\",\r\n                \"caching\",\r\n                \"psr\",\r\n                \"psr-16\",\r\n                \"simple-cache\"\r\n            ],\r\n            \"time\": \"2017-10-23T01:57:42+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"psy/psysh\",\r\n            \"version\": \"v0.10.5\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/bobthecow/psysh.git\",\r\n                \"reference\": \"7c710551d4a2653afa259c544508dc18a9098956\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/bobthecow/psysh/zipball/7c710551d4a2653afa259c544508dc18a9098956\",\r\n                \"reference\": \"7c710551d4a2653afa259c544508dc18a9098956\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"dnoegel/php-xdg-base-dir\": \"0.1.*\",\r\n                \"ext-json\": \"*\",\r\n                \"ext-tokenizer\": \"*\",\r\n                \"nikic/php-parser\": \"~4.0|~3.0|~2.0|~1.3\",\r\n                \"php\": \"^8.0 || ^7.0 || ^5.5.9\",\r\n                \"symfony/console\": \"~5.0|~4.0|~3.0|^2.4.2|~2.3.10\",\r\n                \"symfony/var-dumper\": \"~5.0|~4.0|~3.0|~2.7\"\r\n            },\r\n            \"require-dev\": {\r\n                \"bamarni/composer-bin-plugin\": \"^1.2\",\r\n                \"hoa/console\": \"3.17.*\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-pcntl\": \"Enabling the PCNTL extension makes PsySH a lot happier :)\",\r\n                \"ext-pdo-sqlite\": \"The doc command requires SQLite to work.\",\r\n                \"ext-posix\": \"If you have PCNTL, you'll want the POSIX extension as well.\",\r\n                \"ext-readline\": \"Enables support for arrow-key history navigation, and showing and manipulating command history.\",\r\n                \"hoa/console\": \"A pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit.\"\r\n            },\r\n            \"bin\": [\r\n                \"bin/psysh\"\r\n            ],\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"0.10.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"src/functions.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Psy\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Justin Hileman\",\r\n                    \"email\": \"justin@justinhileman.info\",\r\n                    \"homepage\": \"http://justinhileman.com\"\r\n                }\r\n            ],\r\n            \"description\": \"An interactive shell for modern PHP.\",\r\n            \"homepage\": \"http://psysh.org\",\r\n            \"keywords\": [\r\n                \"REPL\",\r\n                \"console\",\r\n                \"interactive\",\r\n                \"shell\"\r\n            ],\r\n            \"time\": \"2020-12-04T02:51:30+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"ralouphie/getallheaders\",\r\n            \"version\": \"3.0.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/ralouphie/getallheaders.git\",\r\n                \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822\",\r\n                \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.6\"\r\n            },\r\n            \"require-dev\": {\r\n                \"php-coveralls/php-coveralls\": \"^2.1\",\r\n                \"phpunit/phpunit\": \"^5 || ^6.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"src/getallheaders.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Ralph Khattar\",\r\n                    \"email\": \"ralph.khattar@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"A polyfill for getallheaders.\",\r\n            \"time\": \"2019-03-08T08:55:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"ramsey/collection\",\r\n            \"version\": \"1.1.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/ramsey/collection.git\",\r\n                \"reference\": \"24d93aefb2cd786b7edd9f45b554aea20b28b9b1\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/ramsey/collection/zipball/24d93aefb2cd786b7edd9f45b554aea20b28b9b1\",\r\n                \"reference\": \"24d93aefb2cd786b7edd9f45b554aea20b28b9b1\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8\"\r\n            },\r\n            \"require-dev\": {\r\n                \"captainhook/captainhook\": \"^5.3\",\r\n                \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.7.0\",\r\n                \"ergebnis/composer-normalize\": \"^2.6\",\r\n                \"fzaninotto/faker\": \"^1.5\",\r\n                \"hamcrest/hamcrest-php\": \"^2\",\r\n                \"jangregor/phpstan-prophecy\": \"^0.6\",\r\n                \"mockery/mockery\": \"^1.3\",\r\n                \"phpstan/extension-installer\": \"^1\",\r\n                \"phpstan/phpstan\": \"^0.12.32\",\r\n                \"phpstan/phpstan-mockery\": \"^0.12.5\",\r\n                \"phpstan/phpstan-phpunit\": \"^0.12.11\",\r\n                \"phpunit/phpunit\": \"^8.5\",\r\n                \"psy/psysh\": \"^0.10.4\",\r\n                \"slevomat/coding-standard\": \"^6.3\",\r\n                \"squizlabs/php_codesniffer\": \"^3.5\",\r\n                \"vimeo/psalm\": \"^3.12.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Ramsey\\\\Collection\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Ben Ramsey\",\r\n                    \"email\": \"ben@benramsey.com\",\r\n                    \"homepage\": \"https://benramsey.com\"\r\n                }\r\n            ],\r\n            \"description\": \"A PHP 7.2+ library for representing and manipulating collections.\",\r\n            \"keywords\": [\r\n                \"array\",\r\n                \"collection\",\r\n                \"hash\",\r\n                \"map\",\r\n                \"queue\",\r\n                \"set\"\r\n            ],\r\n            \"time\": \"2020-09-10T20:58:17+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"ramsey/uuid\",\r\n            \"version\": \"4.1.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/ramsey/uuid.git\",\r\n                \"reference\": \"cd4032040a750077205918c86049aa0f43d22947\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/ramsey/uuid/zipball/cd4032040a750077205918c86049aa0f43d22947\",\r\n                \"reference\": \"cd4032040a750077205918c86049aa0f43d22947\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"brick/math\": \"^0.8 || ^0.9\",\r\n                \"ext-json\": \"*\",\r\n                \"php\": \"^7.2 || ^8\",\r\n                \"ramsey/collection\": \"^1.0\",\r\n                \"symfony/polyfill-ctype\": \"^1.8\"\r\n            },\r\n            \"replace\": {\r\n                \"rhumsaa/uuid\": \"self.version\"\r\n            },\r\n            \"require-dev\": {\r\n                \"codeception/aspect-mock\": \"^3\",\r\n                \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.6.2 || ^0.7.0\",\r\n                \"doctrine/annotations\": \"^1.8\",\r\n                \"goaop/framework\": \"^2\",\r\n                \"mockery/mockery\": \"^1.3\",\r\n                \"moontoast/math\": \"^1.1\",\r\n                \"paragonie/random-lib\": \"^2\",\r\n                \"php-mock/php-mock-mockery\": \"^1.3\",\r\n                \"php-mock/php-mock-phpunit\": \"^2.5\",\r\n                \"php-parallel-lint/php-parallel-lint\": \"^1.1\",\r\n                \"phpbench/phpbench\": \"^0.17.1\",\r\n                \"phpstan/extension-installer\": \"^1.0\",\r\n                \"phpstan/phpstan\": \"^0.12\",\r\n                \"phpstan/phpstan-mockery\": \"^0.12\",\r\n                \"phpstan/phpstan-phpunit\": \"^0.12\",\r\n                \"phpunit/phpunit\": \"^8.5\",\r\n                \"psy/psysh\": \"^0.10.0\",\r\n                \"slevomat/coding-standard\": \"^6.0\",\r\n                \"squizlabs/php_codesniffer\": \"^3.5\",\r\n                \"vimeo/psalm\": \"3.9.4\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-bcmath\": \"Enables faster math with arbitrary-precision integers using BCMath.\",\r\n                \"ext-ctype\": \"Enables faster processing of character classification using ctype functions.\",\r\n                \"ext-gmp\": \"Enables faster math with arbitrary-precision integers using GMP.\",\r\n                \"ext-uuid\": \"Enables the use of PeclUuidTimeGenerator and PeclUuidRandomGenerator.\",\r\n                \"paragonie/random-lib\": \"Provides RandomLib for use with the RandomLibAdapter\",\r\n                \"ramsey/uuid-doctrine\": \"Allows the use of Ramsey\\\\Uuid\\\\Uuid as Doctrine field type.\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"4.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Ramsey\\\\Uuid\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/functions.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"description\": \"A PHP library for generating and working with universally unique identifiers (UUIDs).\",\r\n            \"homepage\": \"https://github.com/ramsey/uuid\",\r\n            \"keywords\": [\r\n                \"guid\",\r\n                \"identifier\",\r\n                \"uuid\"\r\n            ],\r\n            \"time\": \"2020-08-18T17:17:46+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"spatie/laravel-permission\",\r\n            \"version\": \"3.18.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/spatie/laravel-permission.git\",\r\n                \"reference\": \"1c51a5fa12131565fe3860705163e53d7a26258a\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/spatie/laravel-permission/zipball/1c51a5fa12131565fe3860705163e53d7a26258a\",\r\n                \"reference\": \"1c51a5fa12131565fe3860705163e53d7a26258a\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"illuminate/auth\": \"^5.8|^6.0|^7.0|^8.0\",\r\n                \"illuminate/container\": \"^5.8|^6.0|^7.0|^8.0\",\r\n                \"illuminate/contracts\": \"^5.8|^6.0|^7.0|^8.0\",\r\n                \"illuminate/database\": \"^5.8|^6.0|^7.0|^8.0\",\r\n                \"php\": \"^7.2.5|^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"orchestra/testbench\": \"^3.8|^4.0|^5.0|^6.0\",\r\n                \"phpunit/phpunit\": \"^8.0|^9.0\",\r\n                \"predis/predis\": \"^1.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Spatie\\\\Permission\\\\PermissionServiceProvider\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Spatie\\\\Permission\\\\\": \"src\"\r\n                },\r\n                \"files\": [\r\n                    \"src/helpers.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Freek Van der Herten\",\r\n                    \"email\": \"freek@spatie.be\",\r\n                    \"homepage\": \"https://spatie.be\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"Permission handling for Laravel 5.8 and up\",\r\n            \"homepage\": \"https://github.com/spatie/laravel-permission\",\r\n            \"keywords\": [\r\n                \"acl\",\r\n                \"laravel\",\r\n                \"permission\",\r\n                \"permissions\",\r\n                \"rbac\",\r\n                \"roles\",\r\n                \"security\",\r\n                \"spatie\"\r\n            ],\r\n            \"time\": \"2020-11-09T14:08:36+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"swiftmailer/swiftmailer\",\r\n            \"version\": \"v6.2.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/swiftmailer/swiftmailer.git\",\r\n                \"reference\": \"56f0ab23f54c4ccbb0d5dcc67ff8552e0c98d59e\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/swiftmailer/swiftmailer/zipball/56f0ab23f54c4ccbb0d5dcc67ff8552e0c98d59e\",\r\n                \"reference\": \"56f0ab23f54c4ccbb0d5dcc67ff8552e0c98d59e\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"egulias/email-validator\": \"^2.0\",\r\n                \"php\": \">=7.0.0\",\r\n                \"symfony/polyfill-iconv\": \"^1.0\",\r\n                \"symfony/polyfill-intl-idn\": \"^1.10\",\r\n                \"symfony/polyfill-mbstring\": \"^1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"mockery/mockery\": \"^1.0\",\r\n                \"symfony/phpunit-bridge\": \"^4.4|^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-intl\": \"Needed to support internationalized email addresses\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"6.2-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"lib/swift_required.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Chris Corbyn\"\r\n                },\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Swiftmailer, free feature-rich PHP mailer\",\r\n            \"homepage\": \"https://swiftmailer.symfony.com\",\r\n            \"keywords\": [\r\n                \"email\",\r\n                \"mail\",\r\n                \"mailer\"\r\n            ],\r\n            \"time\": \"2020-12-08T18:02:06+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/console\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/console.git\",\r\n                \"reference\": \"47c02526c532fb381374dab26df05e7313978976\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/console/zipball/47c02526c532fb381374dab26df05e7313978976\",\r\n                \"reference\": \"47c02526c532fb381374dab26df05e7313978976\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/polyfill-mbstring\": \"~1.0\",\r\n                \"symfony/polyfill-php73\": \"^1.8\",\r\n                \"symfony/polyfill-php80\": \"^1.15\",\r\n                \"symfony/service-contracts\": \"^1.1|^2\",\r\n                \"symfony/string\": \"^5.1\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/dependency-injection\": \"<4.4\",\r\n                \"symfony/dotenv\": \"<5.1\",\r\n                \"symfony/event-dispatcher\": \"<4.4\",\r\n                \"symfony/lock\": \"<4.4\",\r\n                \"symfony/process\": \"<4.4\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/log-implementation\": \"1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"psr/log\": \"~1.0\",\r\n                \"symfony/config\": \"^4.4|^5.0\",\r\n                \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n                \"symfony/event-dispatcher\": \"^4.4|^5.0\",\r\n                \"symfony/lock\": \"^4.4|^5.0\",\r\n                \"symfony/process\": \"^4.4|^5.0\",\r\n                \"symfony/var-dumper\": \"^4.4|^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"psr/log\": \"For using the console logger\",\r\n                \"symfony/event-dispatcher\": \"\",\r\n                \"symfony/lock\": \"\",\r\n                \"symfony/process\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Console\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony Console Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"cli\",\r\n                \"command line\",\r\n                \"console\",\r\n                \"terminal\"\r\n            ],\r\n            \"time\": \"2020-12-18T08:03:05+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/css-selector\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/css-selector.git\",\r\n                \"reference\": \"f789e7ead4c79e04ca9a6d6162fc629c89bd8054\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/css-selector/zipball/f789e7ead4c79e04ca9a6d6162fc629c89bd8054\",\r\n                \"reference\": \"f789e7ead4c79e04ca9a6d6162fc629c89bd8054\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\CssSelector\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Jean-François Simon\",\r\n                    \"email\": \"jeanfrancois.simon@sensiolabs.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony CssSelector Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-08T17:02:38+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/deprecation-contracts\",\r\n            \"version\": \"v2.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/deprecation-contracts.git\",\r\n                \"reference\": \"5fa56b4074d1ae755beb55617ddafe6f5d78f665\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/deprecation-contracts/zipball/5fa56b4074d1ae755beb55617ddafe6f5d78f665\",\r\n                \"reference\": \"5fa56b4074d1ae755beb55617ddafe6f5d78f665\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.2-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/contracts\",\r\n                    \"url\": \"https://github.com/symfony/contracts\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"function.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"A generic function and convention to trigger deprecation notices\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-09-07T11:33:47+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/error-handler\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/error-handler.git\",\r\n                \"reference\": \"59b190ce16ddf32771a22087b60f6dafd3407147\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/error-handler/zipball/59b190ce16ddf32771a22087b60f6dafd3407147\",\r\n                \"reference\": \"59b190ce16ddf32771a22087b60f6dafd3407147\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"psr/log\": \"^1.0\",\r\n                \"symfony/polyfill-php80\": \"^1.15\",\r\n                \"symfony/var-dumper\": \"^4.4|^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"symfony/deprecation-contracts\": \"^2.1\",\r\n                \"symfony/http-kernel\": \"^4.4|^5.0\",\r\n                \"symfony/serializer\": \"^4.4|^5.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\ErrorHandler\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony ErrorHandler Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-09T18:54:12+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/event-dispatcher\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/event-dispatcher.git\",\r\n                \"reference\": \"1c93f7a1dff592c252574c79a8635a8a80856042\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher/zipball/1c93f7a1dff592c252574c79a8635a8a80856042\",\r\n                \"reference\": \"1c93f7a1dff592c252574c79a8635a8a80856042\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/deprecation-contracts\": \"^2.1\",\r\n                \"symfony/event-dispatcher-contracts\": \"^2\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/dependency-injection\": \"<4.4\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/event-dispatcher-implementation\": \"1.0\",\r\n                \"symfony/event-dispatcher-implementation\": \"2.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"psr/log\": \"~1.0\",\r\n                \"symfony/config\": \"^4.4|^5.0\",\r\n                \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n                \"symfony/error-handler\": \"^4.4|^5.0\",\r\n                \"symfony/expression-language\": \"^4.4|^5.0\",\r\n                \"symfony/http-foundation\": \"^4.4|^5.0\",\r\n                \"symfony/service-contracts\": \"^1.1|^2\",\r\n                \"symfony/stopwatch\": \"^4.4|^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/dependency-injection\": \"\",\r\n                \"symfony/http-kernel\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony EventDispatcher Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-18T08:03:05+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/event-dispatcher-contracts\",\r\n            \"version\": \"v2.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/event-dispatcher-contracts.git\",\r\n                \"reference\": \"0ba7d54483095a198fa51781bc608d17e84dffa2\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/0ba7d54483095a198fa51781bc608d17e84dffa2\",\r\n                \"reference\": \"0ba7d54483095a198fa51781bc608d17e84dffa2\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"psr/event-dispatcher\": \"^1\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/event-dispatcher-implementation\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.2-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/contracts\",\r\n                    \"url\": \"https://github.com/symfony/contracts\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Contracts\\\\EventDispatcher\\\\\": \"\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Generic abstractions related to dispatching event\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"abstractions\",\r\n                \"contracts\",\r\n                \"decoupling\",\r\n                \"interfaces\",\r\n                \"interoperability\",\r\n                \"standards\"\r\n            ],\r\n            \"time\": \"2020-09-07T11:33:47+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/finder\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/finder.git\",\r\n                \"reference\": \"0b9231a5922fd7287ba5b411893c0ecd2733e5ba\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/finder/zipball/0b9231a5922fd7287ba5b411893c0ecd2733e5ba\",\r\n                \"reference\": \"0b9231a5922fd7287ba5b411893c0ecd2733e5ba\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Finder\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony Finder Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-08T17:02:38+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/http-client-contracts\",\r\n            \"version\": \"v2.3.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/http-client-contracts.git\",\r\n                \"reference\": \"41db680a15018f9c1d4b23516059633ce280ca33\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/http-client-contracts/zipball/41db680a15018f9c1d4b23516059633ce280ca33\",\r\n                \"reference\": \"41db680a15018f9c1d4b23516059633ce280ca33\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/http-client-implementation\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-version\": \"2.3\",\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"2.3-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/contracts\",\r\n                    \"url\": \"https://github.com/symfony/contracts\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Contracts\\\\HttpClient\\\\\": \"\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Generic abstractions related to HTTP clients\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"abstractions\",\r\n                \"contracts\",\r\n                \"decoupling\",\r\n                \"interfaces\",\r\n                \"interoperability\",\r\n                \"standards\"\r\n            ],\r\n            \"time\": \"2020-10-14T17:08:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/http-foundation\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/http-foundation.git\",\r\n                \"reference\": \"a1f6218b29897ab52acba58cfa905b83625bef8d\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/http-foundation/zipball/a1f6218b29897ab52acba58cfa905b83625bef8d\",\r\n                \"reference\": \"a1f6218b29897ab52acba58cfa905b83625bef8d\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/deprecation-contracts\": \"^2.1\",\r\n                \"symfony/polyfill-mbstring\": \"~1.1\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"require-dev\": {\r\n                \"predis/predis\": \"~1.0\",\r\n                \"symfony/cache\": \"^4.4|^5.0\",\r\n                \"symfony/expression-language\": \"^4.4|^5.0\",\r\n                \"symfony/mime\": \"^4.4|^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/mime\": \"To use the file extension guesser\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\HttpFoundation\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony HttpFoundation Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-18T10:00:10+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/http-kernel\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/http-kernel.git\",\r\n                \"reference\": \"1feb619286d819180f7b8bc0dc44f516d9c62647\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/http-kernel/zipball/1feb619286d819180f7b8bc0dc44f516d9c62647\",\r\n                \"reference\": \"1feb619286d819180f7b8bc0dc44f516d9c62647\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"psr/log\": \"~1.0\",\r\n                \"symfony/deprecation-contracts\": \"^2.1\",\r\n                \"symfony/error-handler\": \"^4.4|^5.0\",\r\n                \"symfony/event-dispatcher\": \"^5.0\",\r\n                \"symfony/http-client-contracts\": \"^1.1|^2\",\r\n                \"symfony/http-foundation\": \"^4.4|^5.0\",\r\n                \"symfony/polyfill-ctype\": \"^1.8\",\r\n                \"symfony/polyfill-php73\": \"^1.9\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/browser-kit\": \"<4.4\",\r\n                \"symfony/cache\": \"<5.0\",\r\n                \"symfony/config\": \"<5.0\",\r\n                \"symfony/console\": \"<4.4\",\r\n                \"symfony/dependency-injection\": \"<5.1.8\",\r\n                \"symfony/doctrine-bridge\": \"<5.0\",\r\n                \"symfony/form\": \"<5.0\",\r\n                \"symfony/http-client\": \"<5.0\",\r\n                \"symfony/mailer\": \"<5.0\",\r\n                \"symfony/messenger\": \"<5.0\",\r\n                \"symfony/translation\": \"<5.0\",\r\n                \"symfony/twig-bridge\": \"<5.0\",\r\n                \"symfony/validator\": \"<5.0\",\r\n                \"twig/twig\": \"<2.4\"\r\n            },\r\n            \"provide\": {\r\n                \"psr/log-implementation\": \"1.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"psr/cache\": \"~1.0\",\r\n                \"symfony/browser-kit\": \"^4.4|^5.0\",\r\n                \"symfony/config\": \"^5.0\",\r\n                \"symfony/console\": \"^4.4|^5.0\",\r\n                \"symfony/css-selector\": \"^4.4|^5.0\",\r\n                \"symfony/dependency-injection\": \"^5.1.8\",\r\n                \"symfony/dom-crawler\": \"^4.4|^5.0\",\r\n                \"symfony/expression-language\": \"^4.4|^5.0\",\r\n                \"symfony/finder\": \"^4.4|^5.0\",\r\n                \"symfony/process\": \"^4.4|^5.0\",\r\n                \"symfony/routing\": \"^4.4|^5.0\",\r\n                \"symfony/stopwatch\": \"^4.4|^5.0\",\r\n                \"symfony/translation\": \"^4.4|^5.0\",\r\n                \"symfony/translation-contracts\": \"^1.1|^2\",\r\n                \"twig/twig\": \"^2.4|^3.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/browser-kit\": \"\",\r\n                \"symfony/config\": \"\",\r\n                \"symfony/console\": \"\",\r\n                \"symfony/dependency-injection\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\HttpKernel\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony HttpKernel Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-18T13:49:39+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/mime\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/mime.git\",\r\n                \"reference\": \"de97005aef7426ba008c46ba840fc301df577ada\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/mime/zipball/de97005aef7426ba008c46ba840fc301df577ada\",\r\n                \"reference\": \"de97005aef7426ba008c46ba840fc301df577ada\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/deprecation-contracts\": \"^2.1\",\r\n                \"symfony/polyfill-intl-idn\": \"^1.10\",\r\n                \"symfony/polyfill-mbstring\": \"^1.0\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/mailer\": \"<4.4\"\r\n            },\r\n            \"require-dev\": {\r\n                \"egulias/email-validator\": \"^2.1.10\",\r\n                \"phpdocumentor/reflection-docblock\": \"^3.0|^4.0|^5.0\",\r\n                \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n                \"symfony/property-access\": \"^4.4|^5.1\",\r\n                \"symfony/property-info\": \"^4.4|^5.1\",\r\n                \"symfony/serializer\": \"^5.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Mime\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"A library to manipulate MIME messages\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"mime\",\r\n                \"mime-type\"\r\n            ],\r\n            \"time\": \"2020-12-09T18:54:12+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-ctype\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-ctype.git\",\r\n                \"reference\": \"f4ba089a5b6366e453971d3aad5fe8e897b37f41\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-ctype/zipball/f4ba089a5b6366e453971d3aad5fe8e897b37f41\",\r\n                \"reference\": \"f4ba089a5b6366e453971d3aad5fe8e897b37f41\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-ctype\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Ctype\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Gert de Pagter\",\r\n                    \"email\": \"BackEndTea@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for ctype functions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"ctype\",\r\n                \"polyfill\",\r\n                \"portable\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-iconv\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-iconv.git\",\r\n                \"reference\": \"c536646fdb4f29104dd26effc2fdcb9a5b085024\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-iconv/zipball/c536646fdb4f29104dd26effc2fdcb9a5b085024\",\r\n                \"reference\": \"c536646fdb4f29104dd26effc2fdcb9a5b085024\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-iconv\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Iconv\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for the Iconv extension\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"iconv\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-intl-grapheme\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-intl-grapheme.git\",\r\n                \"reference\": \"c7cf3f858ec7d70b89559d6e6eb1f7c2517d479c\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/c7cf3f858ec7d70b89559d6e6eb1f7c2517d479c\",\r\n                \"reference\": \"c7cf3f858ec7d70b89559d6e6eb1f7c2517d479c\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-intl\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Grapheme\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for intl's grapheme_* functions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"grapheme\",\r\n                \"intl\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-intl-idn\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-intl-idn.git\",\r\n                \"reference\": \"3b75acd829741c768bc8b1f84eb33265e7cc5117\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/3b75acd829741c768bc8b1f84eb33265e7cc5117\",\r\n                \"reference\": \"3b75acd829741c768bc8b1f84eb33265e7cc5117\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\",\r\n                \"symfony/polyfill-intl-normalizer\": \"^1.10\",\r\n                \"symfony/polyfill-php72\": \"^1.10\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-intl\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Idn\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Laurent Bassin\",\r\n                    \"email\": \"laurent@bassin.info\"\r\n                },\r\n                {\r\n                    \"name\": \"Trevor Rowbotham\",\r\n                    \"email\": \"trevor.rowbotham@pm.me\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"idn\",\r\n                \"intl\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-intl-normalizer\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-intl-normalizer.git\",\r\n                \"reference\": \"727d1096295d807c309fb01a851577302394c897\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/727d1096295d807c309fb01a851577302394c897\",\r\n                \"reference\": \"727d1096295d807c309fb01a851577302394c897\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-intl\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Normalizer\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ],\r\n                \"classmap\": [\r\n                    \"Resources/stubs\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for intl's Normalizer class and related functions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"intl\",\r\n                \"normalizer\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-mbstring\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\r\n                \"reference\": \"39d483bdf39be819deabf04ec872eb0b2410b531\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/39d483bdf39be819deabf04ec872eb0b2410b531\",\r\n                \"reference\": \"39d483bdf39be819deabf04ec872eb0b2410b531\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-mbstring\": \"For best performance\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill for the Mbstring extension\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"mbstring\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-php72\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-php72.git\",\r\n                \"reference\": \"cede45fcdfabdd6043b3592e83678e42ec69e930\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php72/zipball/cede45fcdfabdd6043b3592e83678e42ec69e930\",\r\n                \"reference\": \"cede45fcdfabdd6043b3592e83678e42ec69e930\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Php72\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill backporting some PHP 7.2+ features to lower PHP versions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-php73\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-php73.git\",\r\n                \"reference\": \"8ff431c517be11c78c48a39a66d37431e26a6bed\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php73/zipball/8ff431c517be11c78c48a39a66d37431e26a6bed\",\r\n                \"reference\": \"8ff431c517be11c78c48a39a66d37431e26a6bed\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Php73\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ],\r\n                \"classmap\": [\r\n                    \"Resources/stubs\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill backporting some PHP 7.3+ features to lower PHP versions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/polyfill-php80\",\r\n            \"version\": \"v1.20.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/polyfill-php80.git\",\r\n                \"reference\": \"e70aa8b064c5b72d3df2abd5ab1e90464ad009de\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php80/zipball/e70aa8b064c5b72d3df2abd5ab1e90464ad009de\",\r\n                \"reference\": \"e70aa8b064c5b72d3df2abd5ab1e90464ad009de\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-main\": \"1.20-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/polyfill\",\r\n                    \"url\": \"https://github.com/symfony/polyfill\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Polyfill\\\\Php80\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"bootstrap.php\"\r\n                ],\r\n                \"classmap\": [\r\n                    \"Resources/stubs\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Ion Bazan\",\r\n                    \"email\": \"ion.bazan@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"compatibility\",\r\n                \"polyfill\",\r\n                \"portable\",\r\n                \"shim\"\r\n            ],\r\n            \"time\": \"2020-10-23T14:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/process\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/process.git\",\r\n                \"reference\": \"bd8815b8b6705298beaa384f04fabd459c10bedd\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/process/zipball/bd8815b8b6705298beaa384f04fabd459c10bedd\",\r\n                \"reference\": \"bd8815b8b6705298beaa384f04fabd459c10bedd\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Process\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony Process Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-08T17:03:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/routing\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/routing.git\",\r\n                \"reference\": \"934ac2720dcc878a47a45c986b483a7ee7193620\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/routing/zipball/934ac2720dcc878a47a45c986b483a7ee7193620\",\r\n                \"reference\": \"934ac2720dcc878a47a45c986b483a7ee7193620\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/deprecation-contracts\": \"^2.1\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/config\": \"<5.0\",\r\n                \"symfony/dependency-injection\": \"<4.4\",\r\n                \"symfony/yaml\": \"<4.4\"\r\n            },\r\n            \"require-dev\": {\r\n                \"doctrine/annotations\": \"^1.7\",\r\n                \"psr/log\": \"~1.0\",\r\n                \"symfony/config\": \"^5.0\",\r\n                \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n                \"symfony/expression-language\": \"^4.4|^5.0\",\r\n                \"symfony/http-foundation\": \"^4.4|^5.0\",\r\n                \"symfony/yaml\": \"^4.4|^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"doctrine/annotations\": \"For using the annotation loader\",\r\n                \"symfony/config\": \"For using the all-in-one router or any loader\",\r\n                \"symfony/expression-language\": \"For using expression matching\",\r\n                \"symfony/http-foundation\": \"For using a Symfony Request object\",\r\n                \"symfony/yaml\": \"For using the YAML loader\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Routing\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony Routing Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"router\",\r\n                \"routing\",\r\n                \"uri\",\r\n                \"url\"\r\n            ],\r\n            \"time\": \"2020-12-08T17:03:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/service-contracts\",\r\n            \"version\": \"v2.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/service-contracts.git\",\r\n                \"reference\": \"d15da7ba4957ffb8f1747218be9e1a121fd298a1\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/service-contracts/zipball/d15da7ba4957ffb8f1747218be9e1a121fd298a1\",\r\n                \"reference\": \"d15da7ba4957ffb8f1747218be9e1a121fd298a1\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"psr/container\": \"^1.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/service-implementation\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.2-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/contracts\",\r\n                    \"url\": \"https://github.com/symfony/contracts\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Contracts\\\\Service\\\\\": \"\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Generic abstractions related to writing services\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"abstractions\",\r\n                \"contracts\",\r\n                \"decoupling\",\r\n                \"interfaces\",\r\n                \"interoperability\",\r\n                \"standards\"\r\n            ],\r\n            \"time\": \"2020-09-07T11:33:47+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/string\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/string.git\",\r\n                \"reference\": \"5bd67751d2e3f7d6f770c9154b8fbcb2aa05f7ed\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/string/zipball/5bd67751d2e3f7d6f770c9154b8fbcb2aa05f7ed\",\r\n                \"reference\": \"5bd67751d2e3f7d6f770c9154b8fbcb2aa05f7ed\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/polyfill-ctype\": \"~1.8\",\r\n                \"symfony/polyfill-intl-grapheme\": \"~1.0\",\r\n                \"symfony/polyfill-intl-normalizer\": \"~1.0\",\r\n                \"symfony/polyfill-mbstring\": \"~1.0\",\r\n                \"symfony/polyfill-php80\": \"~1.15\"\r\n            },\r\n            \"require-dev\": {\r\n                \"symfony/error-handler\": \"^4.4|^5.0\",\r\n                \"symfony/http-client\": \"^4.4|^5.0\",\r\n                \"symfony/translation-contracts\": \"^1.1|^2\",\r\n                \"symfony/var-exporter\": \"^4.4|^5.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\String\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"Resources/functions.php\"\r\n                ],\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony String component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"grapheme\",\r\n                \"i18n\",\r\n                \"string\",\r\n                \"unicode\",\r\n                \"utf-8\",\r\n                \"utf8\"\r\n            ],\r\n            \"time\": \"2020-12-05T07:33:16+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/translation\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/translation.git\",\r\n                \"reference\": \"a04209ba0d1391c828e5b2373181dac63c52ee70\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/translation/zipball/a04209ba0d1391c828e5b2373181dac63c52ee70\",\r\n                \"reference\": \"a04209ba0d1391c828e5b2373181dac63c52ee70\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/polyfill-mbstring\": \"~1.0\",\r\n                \"symfony/polyfill-php80\": \"^1.15\",\r\n                \"symfony/translation-contracts\": \"^2.3\"\r\n            },\r\n            \"conflict\": {\r\n                \"symfony/config\": \"<4.4\",\r\n                \"symfony/dependency-injection\": \"<5.0\",\r\n                \"symfony/http-kernel\": \"<5.0\",\r\n                \"symfony/twig-bundle\": \"<5.0\",\r\n                \"symfony/yaml\": \"<4.4\"\r\n            },\r\n            \"provide\": {\r\n                \"symfony/translation-implementation\": \"2.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"psr/log\": \"~1.0\",\r\n                \"symfony/config\": \"^4.4|^5.0\",\r\n                \"symfony/console\": \"^4.4|^5.0\",\r\n                \"symfony/dependency-injection\": \"^5.0\",\r\n                \"symfony/finder\": \"^4.4|^5.0\",\r\n                \"symfony/http-kernel\": \"^5.0\",\r\n                \"symfony/intl\": \"^4.4|^5.0\",\r\n                \"symfony/service-contracts\": \"^1.1.2|^2\",\r\n                \"symfony/yaml\": \"^4.4|^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"psr/log-implementation\": \"To use logging capability in translator\",\r\n                \"symfony/config\": \"\",\r\n                \"symfony/yaml\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"Resources/functions.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\Translation\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Fabien Potencier\",\r\n                    \"email\": \"fabien@symfony.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony Translation Component\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"time\": \"2020-12-08T17:03:37+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/translation-contracts\",\r\n            \"version\": \"v2.3.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/translation-contracts.git\",\r\n                \"reference\": \"e2eaa60b558f26a4b0354e1bbb25636efaaad105\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/translation-contracts/zipball/e2eaa60b558f26a4b0354e1bbb25636efaaad105\",\r\n                \"reference\": \"e2eaa60b558f26a4b0354e1bbb25636efaaad105\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/translation-implementation\": \"\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.3-dev\"\r\n                },\r\n                \"thanks\": {\r\n                    \"name\": \"symfony/contracts\",\r\n                    \"url\": \"https://github.com/symfony/contracts\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Contracts\\\\Translation\\\\\": \"\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Generic abstractions related to translation\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"abstractions\",\r\n                \"contracts\",\r\n                \"decoupling\",\r\n                \"interfaces\",\r\n                \"interoperability\",\r\n                \"standards\"\r\n            ],\r\n            \"time\": \"2020-09-28T13:05:58+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"symfony/var-dumper\",\r\n            \"version\": \"v5.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/symfony/var-dumper.git\",\r\n                \"reference\": \"13e7e882eaa55863faa7c4ad7c60f12f1a8b5089\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/symfony/var-dumper/zipball/13e7e882eaa55863faa7c4ad7c60f12f1a8b5089\",\r\n                \"reference\": \"13e7e882eaa55863faa7c4ad7c60f12f1a8b5089\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2.5\",\r\n                \"symfony/polyfill-mbstring\": \"~1.0\",\r\n                \"symfony/polyfill-php80\": \"^1.15\"\r\n            },\r\n            \"conflict\": {\r\n                \"phpunit/phpunit\": \"<5.4.3\",\r\n                \"symfony/console\": \"<4.4\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-iconv\": \"*\",\r\n                \"symfony/console\": \"^4.4|^5.0\",\r\n                \"symfony/process\": \"^4.4|^5.0\",\r\n                \"twig/twig\": \"^2.4|^3.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-iconv\": \"To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).\",\r\n                \"ext-intl\": \"To show region name in time zone dump\",\r\n                \"symfony/console\": \"To use the ServerDumpCommand and/or the bin/var-dump-server script\"\r\n            },\r\n            \"bin\": [\r\n                \"Resources/bin/var-dump-server\"\r\n            ],\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"files\": [\r\n                    \"Resources/functions/dump.php\"\r\n                ],\r\n                \"psr-4\": {\r\n                    \"Symfony\\\\Component\\\\VarDumper\\\\\": \"\"\r\n                },\r\n                \"exclude-from-classmap\": [\r\n                    \"/Tests/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nicolas Grekas\",\r\n                    \"email\": \"p@tchwork.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Symfony Community\",\r\n                    \"homepage\": \"https://symfony.com/contributors\"\r\n                }\r\n            ],\r\n            \"description\": \"Symfony mechanism for exploring and dumping PHP variables\",\r\n            \"homepage\": \"https://symfony.com\",\r\n            \"keywords\": [\r\n                \"debug\",\r\n                \"dump\"\r\n            ],\r\n            \"time\": \"2020-12-16T17:02:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"tijsverkoyen/css-to-inline-styles\",\r\n            \"version\": \"2.2.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/tijsverkoyen/CssToInlineStyles.git\",\r\n                \"reference\": \"b43b05cf43c1b6d849478965062b6ef73e223bb5\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/b43b05cf43c1b6d849478965062b6ef73e223bb5\",\r\n                \"reference\": \"b43b05cf43c1b6d849478965062b6ef73e223bb5\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-dom\": \"*\",\r\n                \"ext-libxml\": \"*\",\r\n                \"php\": \"^5.5 || ^7.0 || ^8.0\",\r\n                \"symfony/css-selector\": \"^2.7 || ^3.0 || ^4.0 || ^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^4.8.35 || ^5.7 || ^6.0 || ^7.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.2.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"TijsVerkoyen\\\\CssToInlineStyles\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Tijs Verkoyen\",\r\n                    \"email\": \"css_to_inline_styles@verkoyen.eu\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.\",\r\n            \"homepage\": \"https://github.com/tijsverkoyen/CssToInlineStyles\",\r\n            \"time\": \"2020-07-13T06:12:54+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"vlucas/phpdotenv\",\r\n            \"version\": \"v4.1.8\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/vlucas/phpdotenv.git\",\r\n                \"reference\": \"572af79d913627a9d70374d27a6f5d689a35de32\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/572af79d913627a9d70374d27a6f5d689a35de32\",\r\n                \"reference\": \"572af79d913627a9d70374d27a6f5d689a35de32\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.5.9 || ^7.0 || ^8.0\",\r\n                \"phpoption/phpoption\": \"^1.7.3\",\r\n                \"symfony/polyfill-ctype\": \"^1.17\"\r\n            },\r\n            \"require-dev\": {\r\n                \"bamarni/composer-bin-plugin\": \"^1.4.1\",\r\n                \"ext-filter\": \"*\",\r\n                \"ext-pcre\": \"*\",\r\n                \"phpunit/phpunit\": \"^4.8.35 || ^5.7.27 || ^6.5.6 || ^7.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-filter\": \"Required to use the boolean validator.\",\r\n                \"ext-pcre\": \"Required to use most of the library.\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"4.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Dotenv\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Graham Campbell\",\r\n                    \"email\": \"graham@alt-three.com\",\r\n                    \"homepage\": \"https://gjcampbell.co.uk/\"\r\n                },\r\n                {\r\n                    \"name\": \"Vance Lucas\",\r\n                    \"email\": \"vance@vancelucas.com\",\r\n                    \"homepage\": \"https://vancelucas.com/\"\r\n                }\r\n            ],\r\n            \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\r\n            \"keywords\": [\r\n                \"dotenv\",\r\n                \"env\",\r\n                \"environment\"\r\n            ],\r\n            \"time\": \"2020-07-14T19:22:52+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"voku/portable-ascii\",\r\n            \"version\": \"1.5.6\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/voku/portable-ascii.git\",\r\n                \"reference\": \"80953678b19901e5165c56752d087fc11526017c\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/voku/portable-ascii/zipball/80953678b19901e5165c56752d087fc11526017c\",\r\n                \"reference\": \"80953678b19901e5165c56752d087fc11526017c\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.0.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"~6.0 || ~7.0 || ~9.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-intl\": \"Use Intl for transliterator_transliterate() support\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"voku\\\\\": \"src/voku/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Lars Moelleken\",\r\n                    \"homepage\": \"http://www.moelleken.org/\"\r\n                }\r\n            ],\r\n            \"description\": \"Portable ASCII library - performance optimized (ascii) string functions for php.\",\r\n            \"homepage\": \"https://github.com/voku/portable-ascii\",\r\n            \"keywords\": [\r\n                \"ascii\",\r\n                \"clean\",\r\n                \"php\"\r\n            ],\r\n            \"time\": \"2020-11-12T00:07:28+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"yajra/laravel-datatables-oracle\",\r\n            \"version\": \"v9.15.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/yajra/laravel-datatables.git\",\r\n                \"reference\": \"e0b416d8b7d4472b16217c40e74284074cc34dde\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/yajra/laravel-datatables/zipball/e0b416d8b7d4472b16217c40e74284074cc34dde\",\r\n                \"reference\": \"e0b416d8b7d4472b16217c40e74284074cc34dde\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"illuminate/database\": \"5.8.*|^6|^7|^8\",\r\n                \"illuminate/filesystem\": \"5.8.*|^6|^7|^8\",\r\n                \"illuminate/http\": \"5.8.*|^6|^7|^8\",\r\n                \"illuminate/support\": \"5.8.*|^6|^7|^8\",\r\n                \"illuminate/view\": \"5.8.*|^6|^7|^8\",\r\n                \"php\": \"^7.1.3|^8\"\r\n            },\r\n            \"require-dev\": {\r\n                \"orchestra/testbench\": \"^3.8\"\r\n            },\r\n            \"suggest\": {\r\n                \"yajra/laravel-datatables-buttons\": \"Plugin for server-side exporting of dataTables.\",\r\n                \"yajra/laravel-datatables-editor\": \"Plugin to use DataTables Editor (requires a license).\",\r\n                \"yajra/laravel-datatables-fractal\": \"Plugin for server-side response using Fractal.\",\r\n                \"yajra/laravel-datatables-html\": \"Plugin for server-side HTML builder of dataTables.\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"9.0-dev\"\r\n                },\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Yajra\\\\DataTables\\\\DataTablesServiceProvider\"\r\n                    ],\r\n                    \"aliases\": {\r\n                        \"DataTables\": \"Yajra\\\\DataTables\\\\Facades\\\\DataTables\"\r\n                    }\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Yajra\\\\DataTables\\\\\": \"src/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/helper.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Arjay Angeles\",\r\n                    \"email\": \"aqangeles@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"jQuery DataTables API for Laravel 4|5|6|7\",\r\n            \"keywords\": [\r\n                \"datatables\",\r\n                \"jquery\",\r\n                \"laravel\"\r\n            ],\r\n            \"time\": \"2020-12-09T15:42:04+00:00\"\r\n        }\r\n    ],\r\n    \"packages-dev\": [\r\n        {\r\n            \"name\": \"doctrine/instantiator\",\r\n            \"version\": \"1.4.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/doctrine/instantiator.git\",\r\n                \"reference\": \"d56bf6102915de5702778fe20f2de3b2fe570b5b\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b\",\r\n                \"reference\": \"d56bf6102915de5702778fe20f2de3b2fe570b5b\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.1 || ^8.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"doctrine/coding-standard\": \"^8.0\",\r\n                \"ext-pdo\": \"*\",\r\n                \"ext-phar\": \"*\",\r\n                \"phpbench/phpbench\": \"^0.13 || 1.0.0-alpha2\",\r\n                \"phpstan/phpstan\": \"^0.12\",\r\n                \"phpstan/phpstan-phpunit\": \"^0.12\",\r\n                \"phpunit/phpunit\": \"^7.0 || ^8.0 || ^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Marco Pivetta\",\r\n                    \"email\": \"ocramius@gmail.com\",\r\n                    \"homepage\": \"https://ocramius.github.io/\"\r\n                }\r\n            ],\r\n            \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\r\n            \"homepage\": \"https://www.doctrine-project.org/projects/instantiator.html\",\r\n            \"keywords\": [\r\n                \"constructor\",\r\n                \"instantiate\"\r\n            ],\r\n            \"time\": \"2020-11-10T18:47:58+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"facade/flare-client-php\",\r\n            \"version\": \"1.3.7\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/facade/flare-client-php.git\",\r\n                \"reference\": \"fd688d3c06658f2b3b5f7bb19f051ee4ddf02492\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/facade/flare-client-php/zipball/fd688d3c06658f2b3b5f7bb19f051ee4ddf02492\",\r\n                \"reference\": \"fd688d3c06658f2b3b5f7bb19f051ee4ddf02492\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"facade/ignition-contracts\": \"~1.0\",\r\n                \"illuminate/pipeline\": \"^5.5|^6.0|^7.0|^8.0\",\r\n                \"php\": \"^7.1|^8.0\",\r\n                \"symfony/http-foundation\": \"^3.3|^4.1|^5.0\",\r\n                \"symfony/mime\": \"^3.4|^4.0|^5.1\",\r\n                \"symfony/var-dumper\": \"^3.4|^4.0|^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.14\",\r\n                \"phpunit/phpunit\": \"^7.5.16\",\r\n                \"spatie/phpunit-snapshot-assertions\": \"^2.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Facade\\\\FlareClient\\\\\": \"src\"\r\n                },\r\n                \"files\": [\r\n                    \"src/helpers.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"description\": \"Send PHP errors to Flare\",\r\n            \"homepage\": \"https://github.com/facade/flare-client-php\",\r\n            \"keywords\": [\r\n                \"exception\",\r\n                \"facade\",\r\n                \"flare\",\r\n                \"reporting\"\r\n            ],\r\n            \"time\": \"2020-10-21T16:02:39+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"facade/ignition\",\r\n            \"version\": \"2.4.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/facade/ignition.git\",\r\n                \"reference\": \"9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/facade/ignition/zipball/9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa\",\r\n                \"reference\": \"9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-json\": \"*\",\r\n                \"ext-mbstring\": \"*\",\r\n                \"facade/flare-client-php\": \"^1.0\",\r\n                \"facade/ignition-contracts\": \"^1.0\",\r\n                \"filp/whoops\": \"^2.4\",\r\n                \"illuminate/support\": \"^7.0|^8.0\",\r\n                \"monolog/monolog\": \"^2.0\",\r\n                \"php\": \"^7.2.5\",\r\n                \"scrivo/highlight.php\": \"^9.15\",\r\n                \"symfony/console\": \"^5.0\",\r\n                \"symfony/var-dumper\": \"^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.14\",\r\n                \"mockery/mockery\": \"^1.3\",\r\n                \"orchestra/testbench\": \"^5.0|^6.0\",\r\n                \"psalm/plugin-laravel\": \"^1.2\"\r\n            },\r\n            \"suggest\": {\r\n                \"laravel/telescope\": \"^3.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.x-dev\"\r\n                },\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"Facade\\\\Ignition\\\\IgnitionServiceProvider\"\r\n                    ],\r\n                    \"aliases\": {\r\n                        \"Flare\": \"Facade\\\\Ignition\\\\Facades\\\\Flare\"\r\n                    }\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Facade\\\\Ignition\\\\\": \"src\"\r\n                },\r\n                \"files\": [\r\n                    \"src/helpers.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"description\": \"A beautiful error page for Laravel applications.\",\r\n            \"homepage\": \"https://github.com/facade/ignition\",\r\n            \"keywords\": [\r\n                \"error\",\r\n                \"flare\",\r\n                \"laravel\",\r\n                \"page\"\r\n            ],\r\n            \"time\": \"2020-10-14T08:59:59+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"facade/ignition-contracts\",\r\n            \"version\": \"1.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/facade/ignition-contracts.git\",\r\n                \"reference\": \"aeab1ce8b68b188a43e81758e750151ad7da796b\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/facade/ignition-contracts/zipball/aeab1ce8b68b188a43e81758e750151ad7da796b\",\r\n                \"reference\": \"aeab1ce8b68b188a43e81758e750151ad7da796b\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"friendsofphp/php-cs-fixer\": \"^2.14\",\r\n                \"phpunit/phpunit\": \"^7.5|^8.0\",\r\n                \"vimeo/psalm\": \"^3.12\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Facade\\\\IgnitionContracts\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Freek Van der Herten\",\r\n                    \"email\": \"freek@spatie.be\",\r\n                    \"homepage\": \"https://flareapp.io\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"Solution contracts for Ignition\",\r\n            \"homepage\": \"https://github.com/facade/ignition-contracts\",\r\n            \"keywords\": [\r\n                \"contracts\",\r\n                \"flare\",\r\n                \"ignition\"\r\n            ],\r\n            \"time\": \"2020-07-14T10:10:28+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"fakerphp/faker\",\r\n            \"version\": \"v1.13.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/FakerPHP/Faker.git\",\r\n                \"reference\": \"ab3f5364d01f2c2c16113442fb987d26e4004913\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/FakerPHP/Faker/zipball/ab3f5364d01f2c2c16113442fb987d26e4004913\",\r\n                \"reference\": \"ab3f5364d01f2c2c16113442fb987d26e4004913\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.1 || ^8.0\"\r\n            },\r\n            \"conflict\": {\r\n                \"fzaninotto/faker\": \"*\"\r\n            },\r\n            \"require-dev\": {\r\n                \"bamarni/composer-bin-plugin\": \"^1.4.1\",\r\n                \"ext-intl\": \"*\",\r\n                \"phpunit/phpunit\": \"^7.5.20 || ^8.5.8 || ^9.4.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Faker\\\\\": \"src/Faker/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"François Zaninotto\"\r\n                }\r\n            ],\r\n            \"description\": \"Faker is a PHP library that generates fake data for you.\",\r\n            \"keywords\": [\r\n                \"data\",\r\n                \"faker\",\r\n                \"fixtures\"\r\n            ],\r\n            \"time\": \"2020-12-18T16:50:48+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"filp/whoops\",\r\n            \"version\": \"2.9.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/filp/whoops.git\",\r\n                \"reference\": \"307fb34a5ab697461ec4c9db865b20ff2fd40771\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/filp/whoops/zipball/307fb34a5ab697461ec4c9db865b20ff2fd40771\",\r\n                \"reference\": \"307fb34a5ab697461ec4c9db865b20ff2fd40771\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.5.9 || ^7.0 || ^8.0\",\r\n                \"psr/log\": \"^1.0.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"mockery/mockery\": \"^0.9 || ^1.0\",\r\n                \"phpunit/phpunit\": \"^4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.3\",\r\n                \"symfony/var-dumper\": \"^2.6 || ^3.0 || ^4.0 || ^5.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"symfony/var-dumper\": \"Pretty print complex values better with var-dumper available\",\r\n                \"whoops/soap\": \"Formats errors as SOAP responses\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.7-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Whoops\\\\\": \"src/Whoops/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Filipe Dobreira\",\r\n                    \"homepage\": \"https://github.com/filp\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"php error handling for cool kids\",\r\n            \"homepage\": \"https://filp.github.io/whoops/\",\r\n            \"keywords\": [\r\n                \"error\",\r\n                \"exception\",\r\n                \"handling\",\r\n                \"library\",\r\n                \"throwable\",\r\n                \"whoops\"\r\n            ],\r\n            \"time\": \"2020-11-01T12:00:00+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"hamcrest/hamcrest-php\",\r\n            \"version\": \"v2.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/hamcrest/hamcrest-php.git\",\r\n                \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/hamcrest/hamcrest-php/zipball/8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\r\n                \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.3|^7.0|^8.0\"\r\n            },\r\n            \"replace\": {\r\n                \"cordoval/hamcrest-php\": \"*\",\r\n                \"davedevelopment/hamcrest-php\": \"*\",\r\n                \"kodova/hamcrest-php\": \"*\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/php-file-iterator\": \"^1.4 || ^2.0\",\r\n                \"phpunit/phpunit\": \"^4.8.36 || ^5.7 || ^6.5 || ^7.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"hamcrest\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"description\": \"This is the PHP port of Hamcrest Matchers\",\r\n            \"keywords\": [\r\n                \"test\"\r\n            ],\r\n            \"time\": \"2020-07-09T08:09:16+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"mockery/mockery\",\r\n            \"version\": \"1.3.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/mockery/mockery.git\",\r\n                \"reference\": \"60fa2f67f6e4d3634bb4a45ff3171fa52215800d\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/mockery/mockery/zipball/60fa2f67f6e4d3634bb4a45ff3171fa52215800d\",\r\n                \"reference\": \"60fa2f67f6e4d3634bb4a45ff3171fa52215800d\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"hamcrest/hamcrest-php\": \"^2.0.1\",\r\n                \"lib-pcre\": \">=7.0\",\r\n                \"php\": \">=5.6.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^5.7.10|^6.5|^7.5|^8.5|^9.3\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.3.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-0\": {\r\n                    \"Mockery\": \"library/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Pádraic Brady\",\r\n                    \"email\": \"padraic.brady@gmail.com\",\r\n                    \"homepage\": \"http://blog.astrumfutura.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Dave Marshall\",\r\n                    \"email\": \"dave.marshall@atstsolutions.co.uk\",\r\n                    \"homepage\": \"http://davedevelopment.co.uk\"\r\n                }\r\n            ],\r\n            \"description\": \"Mockery is a simple yet flexible PHP mock object framework\",\r\n            \"homepage\": \"https://github.com/mockery/mockery\",\r\n            \"keywords\": [\r\n                \"BDD\",\r\n                \"TDD\",\r\n                \"library\",\r\n                \"mock\",\r\n                \"mock objects\",\r\n                \"mockery\",\r\n                \"stub\",\r\n                \"test\",\r\n                \"test double\",\r\n                \"testing\"\r\n            ],\r\n            \"time\": \"2020-08-11T18:10:21+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"myclabs/deep-copy\",\r\n            \"version\": \"1.10.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/myclabs/DeepCopy.git\",\r\n                \"reference\": \"776f831124e9c62e1a2c601ecc52e776d8bb7220\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220\",\r\n                \"reference\": \"776f831124e9c62e1a2c601ecc52e776d8bb7220\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.1 || ^8.0\"\r\n            },\r\n            \"replace\": {\r\n                \"myclabs/deep-copy\": \"self.version\"\r\n            },\r\n            \"require-dev\": {\r\n                \"doctrine/collections\": \"^1.0\",\r\n                \"doctrine/common\": \"^2.6\",\r\n                \"phpunit/phpunit\": \"^7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"DeepCopy\\\\\": \"src/DeepCopy/\"\r\n                },\r\n                \"files\": [\r\n                    \"src/DeepCopy/deep_copy.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"description\": \"Create deep copies (clones) of your objects\",\r\n            \"keywords\": [\r\n                \"clone\",\r\n                \"copy\",\r\n                \"duplicate\",\r\n                \"object\",\r\n                \"object graph\"\r\n            ],\r\n            \"time\": \"2020-11-13T09:40:50+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"nunomaduro/collision\",\r\n            \"version\": \"v4.3.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/nunomaduro/collision.git\",\r\n                \"reference\": \"7c125dc2463f3e144ddc7e05e63077109508c94e\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/nunomaduro/collision/zipball/7c125dc2463f3e144ddc7e05e63077109508c94e\",\r\n                \"reference\": \"7c125dc2463f3e144ddc7e05e63077109508c94e\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"facade/ignition-contracts\": \"^1.0\",\r\n                \"filp/whoops\": \"^2.4\",\r\n                \"php\": \"^7.2.5 || ^8.0\",\r\n                \"symfony/console\": \"^5.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"facade/ignition\": \"^2.0\",\r\n                \"fideloper/proxy\": \"^4.2\",\r\n                \"friendsofphp/php-cs-fixer\": \"^2.16\",\r\n                \"fruitcake/laravel-cors\": \"^1.0\",\r\n                \"laravel/framework\": \"^7.0\",\r\n                \"laravel/tinker\": \"^2.0\",\r\n                \"nunomaduro/larastan\": \"^0.6\",\r\n                \"orchestra/testbench\": \"^5.0\",\r\n                \"phpstan/phpstan\": \"^0.12.3\",\r\n                \"phpunit/phpunit\": \"^8.5.1 || ^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"laravel\": {\r\n                    \"providers\": [\r\n                        \"NunoMaduro\\\\Collision\\\\Adapters\\\\Laravel\\\\CollisionServiceProvider\"\r\n                    ]\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"NunoMaduro\\\\Collision\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Nuno Maduro\",\r\n                    \"email\": \"enunomaduro@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Cli error handling for console/command-line PHP applications.\",\r\n            \"keywords\": [\r\n                \"artisan\",\r\n                \"cli\",\r\n                \"command-line\",\r\n                \"console\",\r\n                \"error\",\r\n                \"handling\",\r\n                \"laravel\",\r\n                \"laravel-zero\",\r\n                \"php\",\r\n                \"symfony\"\r\n            ],\r\n            \"time\": \"2020-10-29T15:12:23+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phar-io/manifest\",\r\n            \"version\": \"2.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/phar-io/manifest.git\",\r\n                \"reference\": \"85265efd3af7ba3ca4b2a2c34dbfc5788dd29133\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133\",\r\n                \"reference\": \"85265efd3af7ba3ca4b2a2c34dbfc5788dd29133\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-dom\": \"*\",\r\n                \"ext-phar\": \"*\",\r\n                \"ext-xmlwriter\": \"*\",\r\n                \"phar-io/version\": \"^3.0.1\",\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Arne Blankerts\",\r\n                    \"email\": \"arne@blankerts.de\",\r\n                    \"role\": \"Developer\"\r\n                },\r\n                {\r\n                    \"name\": \"Sebastian Heuer\",\r\n                    \"email\": \"sebastian@phpeople.de\",\r\n                    \"role\": \"Developer\"\r\n                },\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"Component for reading phar.io manifest information from a PHP Archive (PHAR)\",\r\n            \"time\": \"2020-06-27T14:33:11+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phar-io/version\",\r\n            \"version\": \"3.0.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/phar-io/version.git\",\r\n                \"reference\": \"e4782611070e50613683d2b9a57730e9a3ba5451\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/phar-io/version/zipball/e4782611070e50613683d2b9a57730e9a3ba5451\",\r\n                \"reference\": \"e4782611070e50613683d2b9a57730e9a3ba5451\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Arne Blankerts\",\r\n                    \"email\": \"arne@blankerts.de\",\r\n                    \"role\": \"Developer\"\r\n                },\r\n                {\r\n                    \"name\": \"Sebastian Heuer\",\r\n                    \"email\": \"sebastian@phpeople.de\",\r\n                    \"role\": \"Developer\"\r\n                },\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"Library for handling version information and constraints\",\r\n            \"time\": \"2020-12-13T23:18:30+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpdocumentor/reflection-common\",\r\n            \"version\": \"2.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/phpDocumentor/ReflectionCommon.git\",\r\n                \"reference\": \"1d01c49d4ed62f25aa84a747ad35d5a16924662b\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b\",\r\n                \"reference\": \"1d01c49d4ed62f25aa84a747ad35d5a16924662b\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-2.x\": \"2.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"phpDocumentor\\\\Reflection\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Jaap van Otterdijk\",\r\n                    \"email\": \"opensource@ijaap.nl\"\r\n                }\r\n            ],\r\n            \"description\": \"Common reflection classes used by phpdocumentor to reflect the code structure\",\r\n            \"homepage\": \"http://www.phpdoc.org\",\r\n            \"keywords\": [\r\n                \"FQSEN\",\r\n                \"phpDocumentor\",\r\n                \"phpdoc\",\r\n                \"reflection\",\r\n                \"static analysis\"\r\n            ],\r\n            \"time\": \"2020-06-27T09:03:43+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpdocumentor/reflection-docblock\",\r\n            \"version\": \"5.2.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/phpDocumentor/ReflectionDocBlock.git\",\r\n                \"reference\": \"069a785b2141f5bcf49f3e353548dc1cce6df556\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556\",\r\n                \"reference\": \"069a785b2141f5bcf49f3e353548dc1cce6df556\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-filter\": \"*\",\r\n                \"php\": \"^7.2 || ^8.0\",\r\n                \"phpdocumentor/reflection-common\": \"^2.2\",\r\n                \"phpdocumentor/type-resolver\": \"^1.3\",\r\n                \"webmozart/assert\": \"^1.9.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"mockery/mockery\": \"~1.3.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"5.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"phpDocumentor\\\\Reflection\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Mike van Riel\",\r\n                    \"email\": \"me@mikevanriel.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Jaap van Otterdijk\",\r\n                    \"email\": \"account@ijaap.nl\"\r\n                }\r\n            ],\r\n            \"description\": \"With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.\",\r\n            \"time\": \"2020-09-03T19:13:55+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpdocumentor/type-resolver\",\r\n            \"version\": \"1.4.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/phpDocumentor/TypeResolver.git\",\r\n                \"reference\": \"6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0\",\r\n                \"reference\": \"6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^7.2 || ^8.0\",\r\n                \"phpdocumentor/reflection-common\": \"^2.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-tokenizer\": \"*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-1.x\": \"1.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"phpDocumentor\\\\Reflection\\\\\": \"src\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Mike van Riel\",\r\n                    \"email\": \"me@mikevanriel.com\"\r\n                }\r\n            ],\r\n            \"description\": \"A PSR-5 based resolver of Class names, Types and Structural Element Names\",\r\n            \"time\": \"2020-09-17T18:55:26+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpspec/prophecy\",\r\n            \"version\": \"1.12.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/phpspec/prophecy.git\",\r\n                \"reference\": \"245710e971a030f42e08f4912863805570f23d39\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/phpspec/prophecy/zipball/245710e971a030f42e08f4912863805570f23d39\",\r\n                \"reference\": \"245710e971a030f42e08f4912863805570f23d39\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"doctrine/instantiator\": \"^1.2\",\r\n                \"php\": \"^7.2 || ~8.0, <8.1\",\r\n                \"phpdocumentor/reflection-docblock\": \"^5.2\",\r\n                \"sebastian/comparator\": \"^3.0 || ^4.0\",\r\n                \"sebastian/recursion-context\": \"^3.0 || ^4.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpspec/phpspec\": \"^6.0\",\r\n                \"phpunit/phpunit\": \"^8.0 || ^9.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.11.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Prophecy\\\\\": \"src/Prophecy\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Konstantin Kudryashov\",\r\n                    \"email\": \"ever.zet@gmail.com\",\r\n                    \"homepage\": \"http://everzet.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Marcello Duarte\",\r\n                    \"email\": \"marcello.duarte@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Highly opinionated mocking framework for PHP 5.3+\",\r\n            \"homepage\": \"https://github.com/phpspec/prophecy\",\r\n            \"keywords\": [\r\n                \"Double\",\r\n                \"Dummy\",\r\n                \"fake\",\r\n                \"mock\",\r\n                \"spy\",\r\n                \"stub\"\r\n            ],\r\n            \"time\": \"2020-12-19T10:15:11+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpunit/php-code-coverage\",\r\n            \"version\": \"7.0.14\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\r\n                \"reference\": \"bb7c9a210c72e4709cdde67f8b7362f672f2225c\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/bb7c9a210c72e4709cdde67f8b7362f672f2225c\",\r\n                \"reference\": \"bb7c9a210c72e4709cdde67f8b7362f672f2225c\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-dom\": \"*\",\r\n                \"ext-xmlwriter\": \"*\",\r\n                \"php\": \">=7.2\",\r\n                \"phpunit/php-file-iterator\": \"^2.0.2\",\r\n                \"phpunit/php-text-template\": \"^1.2.1\",\r\n                \"phpunit/php-token-stream\": \"^3.1.1 || ^4.0\",\r\n                \"sebastian/code-unit-reverse-lookup\": \"^1.0.1\",\r\n                \"sebastian/environment\": \"^4.2.2\",\r\n                \"sebastian/version\": \"^2.0.1\",\r\n                \"theseer/tokenizer\": \"^1.1.3\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^8.2.2\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-xdebug\": \"^2.7.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"7.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\r\n            \"keywords\": [\r\n                \"coverage\",\r\n                \"testing\",\r\n                \"xunit\"\r\n            ],\r\n            \"time\": \"2020-12-02T13:39:03+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpunit/php-file-iterator\",\r\n            \"version\": \"2.0.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\r\n                \"reference\": \"4b49fb70f067272b659ef0174ff9ca40fdaa6357\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/4b49fb70f067272b659ef0174ff9ca40fdaa6357\",\r\n                \"reference\": \"4b49fb70f067272b659ef0174ff9ca40fdaa6357\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^8.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\r\n            \"keywords\": [\r\n                \"filesystem\",\r\n                \"iterator\"\r\n            ],\r\n            \"time\": \"2020-11-30T08:25:21+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpunit/php-text-template\",\r\n            \"version\": \"1.2.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\r\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\r\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.3.3\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"Simple template engine.\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\r\n            \"keywords\": [\r\n                \"template\"\r\n            ],\r\n            \"time\": \"2015-06-21T13:50:34+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpunit/php-timer\",\r\n            \"version\": \"2.1.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\r\n                \"reference\": \"2454ae1765516d20c4ffe103d85a58a9a3bd5662\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/2454ae1765516d20c4ffe103d85a58a9a3bd5662\",\r\n                \"reference\": \"2454ae1765516d20c4ffe103d85a58a9a3bd5662\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^8.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"Utility class for timing\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\r\n            \"keywords\": [\r\n                \"timer\"\r\n            ],\r\n            \"time\": \"2020-11-30T08:20:02+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpunit/php-token-stream\",\r\n            \"version\": \"3.1.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/php-token-stream.git\",\r\n                \"reference\": \"472b687829041c24b25f475e14c2f38a09edf1c2\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/472b687829041c24b25f475e14c2f38a09edf1c2\",\r\n                \"reference\": \"472b687829041c24b25f475e14c2f38a09edf1c2\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-tokenizer\": \"*\",\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^7.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Wrapper around PHP's tokenizer extension.\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/php-token-stream/\",\r\n            \"keywords\": [\r\n                \"tokenizer\"\r\n            ],\r\n            \"abandoned\": true,\r\n            \"time\": \"2020-11-30T08:38:46+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"phpunit/phpunit\",\r\n            \"version\": \"8.5.13\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\r\n                \"reference\": \"8e86be391a58104ef86037ba8a846524528d784e\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/8e86be391a58104ef86037ba8a846524528d784e\",\r\n                \"reference\": \"8e86be391a58104ef86037ba8a846524528d784e\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"doctrine/instantiator\": \"^1.3.1\",\r\n                \"ext-dom\": \"*\",\r\n                \"ext-json\": \"*\",\r\n                \"ext-libxml\": \"*\",\r\n                \"ext-mbstring\": \"*\",\r\n                \"ext-xml\": \"*\",\r\n                \"ext-xmlwriter\": \"*\",\r\n                \"myclabs/deep-copy\": \"^1.10.0\",\r\n                \"phar-io/manifest\": \"^2.0.1\",\r\n                \"phar-io/version\": \"^3.0.2\",\r\n                \"php\": \">=7.2\",\r\n                \"phpspec/prophecy\": \"^1.10.3\",\r\n                \"phpunit/php-code-coverage\": \"^7.0.12\",\r\n                \"phpunit/php-file-iterator\": \"^2.0.2\",\r\n                \"phpunit/php-text-template\": \"^1.2.1\",\r\n                \"phpunit/php-timer\": \"^2.1.2\",\r\n                \"sebastian/comparator\": \"^3.0.2\",\r\n                \"sebastian/diff\": \"^3.0.2\",\r\n                \"sebastian/environment\": \"^4.2.3\",\r\n                \"sebastian/exporter\": \"^3.1.2\",\r\n                \"sebastian/global-state\": \"^3.0.0\",\r\n                \"sebastian/object-enumerator\": \"^3.0.3\",\r\n                \"sebastian/resource-operations\": \"^2.0.1\",\r\n                \"sebastian/type\": \"^1.1.3\",\r\n                \"sebastian/version\": \"^2.0.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-pdo\": \"*\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-soap\": \"*\",\r\n                \"ext-xdebug\": \"*\",\r\n                \"phpunit/php-invoker\": \"^2.0.0\"\r\n            },\r\n            \"bin\": [\r\n                \"phpunit\"\r\n            ],\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"8.5-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"The PHP Unit Testing framework.\",\r\n            \"homepage\": \"https://phpunit.de/\",\r\n            \"keywords\": [\r\n                \"phpunit\",\r\n                \"testing\",\r\n                \"xunit\"\r\n            ],\r\n            \"time\": \"2020-12-01T04:53:52+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"scrivo/highlight.php\",\r\n            \"version\": \"v9.18.1.5\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/scrivo/highlight.php.git\",\r\n                \"reference\": \"fa75a865928a4a5d49e5e77faca6bd2f2410baaf\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/scrivo/highlight.php/zipball/fa75a865928a4a5d49e5e77faca6bd2f2410baaf\",\r\n                \"reference\": \"fa75a865928a4a5d49e5e77faca6bd2f2410baaf\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-json\": \"*\",\r\n                \"ext-mbstring\": \"*\",\r\n                \"php\": \">=5.4\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^4.8|^5.7\",\r\n                \"sabberworm/php-css-parser\": \"^8.3\",\r\n                \"symfony/finder\": \"^2.8|^3.4\",\r\n                \"symfony/var-dumper\": \"^2.8|^3.4\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-dom\": \"Needed to make use of the features in the utilities namespace\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-0\": {\r\n                    \"Highlight\\\\\": \"\",\r\n                    \"HighlightUtilities\\\\\": \"\"\r\n                },\r\n                \"files\": [\r\n                    \"HighlightUtilities/functions.php\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Geert Bergman\",\r\n                    \"homepage\": \"http://www.scrivo.org/\",\r\n                    \"role\": \"Project Author\"\r\n                },\r\n                {\r\n                    \"name\": \"Vladimir Jimenez\",\r\n                    \"homepage\": \"https://allejo.io\",\r\n                    \"role\": \"Maintainer\"\r\n                },\r\n                {\r\n                    \"name\": \"Martin Folkers\",\r\n                    \"homepage\": \"https://twobrain.io\",\r\n                    \"role\": \"Contributor\"\r\n                }\r\n            ],\r\n            \"description\": \"Server side syntax highlighter that supports 185 languages. It's a PHP port of highlight.js\",\r\n            \"keywords\": [\r\n                \"code\",\r\n                \"highlight\",\r\n                \"highlight.js\",\r\n                \"highlight.php\",\r\n                \"syntax\"\r\n            ],\r\n            \"time\": \"2020-11-22T06:07:40+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/code-unit-reverse-lookup\",\r\n            \"version\": \"1.0.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup.git\",\r\n                \"reference\": \"1de8cd5c010cb153fcd68b8d0f64606f523f7619\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/1de8cd5c010cb153fcd68b8d0f64606f523f7619\",\r\n                \"reference\": \"1de8cd5c010cb153fcd68b8d0f64606f523f7619\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.6\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^8.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Looks up which function or method a line of code belongs to\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/\",\r\n            \"time\": \"2020-11-30T08:15:22+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/comparator\",\r\n            \"version\": \"3.0.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\r\n                \"reference\": \"1071dfcef776a57013124ff35e1fc41ccd294758\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/1071dfcef776a57013124ff35e1fc41ccd294758\",\r\n                \"reference\": \"1071dfcef776a57013124ff35e1fc41ccd294758\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\",\r\n                \"sebastian/diff\": \"^3.0\",\r\n                \"sebastian/exporter\": \"^3.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^8.5\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                },\r\n                {\r\n                    \"name\": \"Jeff Welch\",\r\n                    \"email\": \"whatthejeff@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Volker Dusch\",\r\n                    \"email\": \"github@wallbash.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Bernhard Schussek\",\r\n                    \"email\": \"bschussek@2bepublished.at\"\r\n                }\r\n            ],\r\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/comparator\",\r\n            \"keywords\": [\r\n                \"comparator\",\r\n                \"compare\",\r\n                \"equality\"\r\n            ],\r\n            \"time\": \"2020-11-30T08:04:30+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/diff\",\r\n            \"version\": \"3.0.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\r\n                \"reference\": \"14f72dd46eaf2f2293cbe79c93cc0bc43161a211\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/14f72dd46eaf2f2293cbe79c93cc0bc43161a211\",\r\n                \"reference\": \"14f72dd46eaf2f2293cbe79c93cc0bc43161a211\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^7.5 || ^8.0\",\r\n                \"symfony/process\": \"^2 || ^3.3 || ^4\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                },\r\n                {\r\n                    \"name\": \"Kore Nordmann\",\r\n                    \"email\": \"mail@kore-nordmann.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Diff implementation\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/diff\",\r\n            \"keywords\": [\r\n                \"diff\",\r\n                \"udiff\",\r\n                \"unidiff\",\r\n                \"unified diff\"\r\n            ],\r\n            \"time\": \"2020-11-30T07:59:04+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/environment\",\r\n            \"version\": \"4.2.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\r\n                \"reference\": \"d47bbbad83711771f167c72d4e3f25f7fcc1f8b0\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/d47bbbad83711771f167c72d4e3f25f7fcc1f8b0\",\r\n                \"reference\": \"d47bbbad83711771f167c72d4e3f25f7fcc1f8b0\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^7.5\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-posix\": \"*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"4.2-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\r\n            \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\r\n            \"keywords\": [\r\n                \"Xdebug\",\r\n                \"environment\",\r\n                \"hhvm\"\r\n            ],\r\n            \"time\": \"2020-11-30T07:53:42+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/exporter\",\r\n            \"version\": \"3.1.3\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\r\n                \"reference\": \"6b853149eab67d4da22291d36f5b0631c0fd856e\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/6b853149eab67d4da22291d36f5b0631c0fd856e\",\r\n                \"reference\": \"6b853149eab67d4da22291d36f5b0631c0fd856e\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.0\",\r\n                \"sebastian/recursion-context\": \"^3.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-mbstring\": \"*\",\r\n                \"phpunit/phpunit\": \"^6.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.1.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                },\r\n                {\r\n                    \"name\": \"Jeff Welch\",\r\n                    \"email\": \"whatthejeff@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Volker Dusch\",\r\n                    \"email\": \"github@wallbash.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Adam Harvey\",\r\n                    \"email\": \"aharvey@php.net\"\r\n                },\r\n                {\r\n                    \"name\": \"Bernhard Schussek\",\r\n                    \"email\": \"bschussek@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\r\n            \"homepage\": \"http://www.github.com/sebastianbergmann/exporter\",\r\n            \"keywords\": [\r\n                \"export\",\r\n                \"exporter\"\r\n            ],\r\n            \"time\": \"2020-11-30T07:47:53+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/global-state\",\r\n            \"version\": \"3.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\r\n                \"reference\": \"474fb9edb7ab891665d3bfc6317f42a0a150454b\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/474fb9edb7ab891665d3bfc6317f42a0a150454b\",\r\n                \"reference\": \"474fb9edb7ab891665d3bfc6317f42a0a150454b\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2\",\r\n                \"sebastian/object-reflector\": \"^1.1.1\",\r\n                \"sebastian/recursion-context\": \"^3.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"ext-dom\": \"*\",\r\n                \"phpunit/phpunit\": \"^8.0\"\r\n            },\r\n            \"suggest\": {\r\n                \"ext-uopz\": \"*\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Snapshotting of global state\",\r\n            \"homepage\": \"http://www.github.com/sebastianbergmann/global-state\",\r\n            \"keywords\": [\r\n                \"global state\"\r\n            ],\r\n            \"time\": \"2020-11-30T07:43:24+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/object-enumerator\",\r\n            \"version\": \"3.0.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/object-enumerator.git\",\r\n                \"reference\": \"e67f6d32ebd0c749cf9d1dbd9f226c727043cdf2\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/e67f6d32ebd0c749cf9d1dbd9f226c727043cdf2\",\r\n                \"reference\": \"e67f6d32ebd0c749cf9d1dbd9f226c727043cdf2\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.0\",\r\n                \"sebastian/object-reflector\": \"^1.1.1\",\r\n                \"sebastian/recursion-context\": \"^3.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^6.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Traverses array structures and object graphs to enumerate all referenced objects\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/object-enumerator/\",\r\n            \"time\": \"2020-11-30T07:40:27+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/object-reflector\",\r\n            \"version\": \"1.1.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/object-reflector.git\",\r\n                \"reference\": \"9b8772b9cbd456ab45d4a598d2dd1a1bced6363d\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/9b8772b9cbd456ab45d4a598d2dd1a1bced6363d\",\r\n                \"reference\": \"9b8772b9cbd456ab45d4a598d2dd1a1bced6363d\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^6.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Allows reflection of object attributes, including inherited and non-public ones\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/object-reflector/\",\r\n            \"time\": \"2020-11-30T07:37:18+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/recursion-context\",\r\n            \"version\": \"3.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\r\n                \"reference\": \"367dcba38d6e1977be014dc4b22f47a484dac7fb\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/367dcba38d6e1977be014dc4b22f47a484dac7fb\",\r\n                \"reference\": \"367dcba38d6e1977be014dc4b22f47a484dac7fb\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.0\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^6.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"3.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                },\r\n                {\r\n                    \"name\": \"Jeff Welch\",\r\n                    \"email\": \"whatthejeff@gmail.com\"\r\n                },\r\n                {\r\n                    \"name\": \"Adam Harvey\",\r\n                    \"email\": \"aharvey@php.net\"\r\n                }\r\n            ],\r\n            \"description\": \"Provides functionality to recursively process PHP variables\",\r\n            \"homepage\": \"http://www.github.com/sebastianbergmann/recursion-context\",\r\n            \"time\": \"2020-11-30T07:34:24+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/resource-operations\",\r\n            \"version\": \"2.0.2\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/resource-operations.git\",\r\n                \"reference\": \"31d35ca87926450c44eae7e2611d45a7a65ea8b3\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/31d35ca87926450c44eae7e2611d45a7a65ea8b3\",\r\n                \"reference\": \"31d35ca87926450c44eae7e2611d45a7a65ea8b3\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.1\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\"\r\n                }\r\n            ],\r\n            \"description\": \"Provides a list of PHP built-in functions that operate on resources\",\r\n            \"homepage\": \"https://www.github.com/sebastianbergmann/resource-operations\",\r\n            \"time\": \"2020-11-30T07:30:19+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/type\",\r\n            \"version\": \"1.1.4\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/type.git\",\r\n                \"reference\": \"0150cfbc4495ed2df3872fb31b26781e4e077eb4\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/type/zipball/0150cfbc4495ed2df3872fb31b26781e4e077eb4\",\r\n                \"reference\": \"0150cfbc4495ed2df3872fb31b26781e4e077eb4\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=7.2\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^8.2\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"1.1-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"Collection of value objects that represent the types of the PHP type system\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/type\",\r\n            \"time\": \"2020-11-30T07:25:11+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"sebastian/version\",\r\n            \"version\": \"2.0.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\r\n                \"reference\": \"99732be0ddb3361e16ad77b68ba41efc8e979019\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/99732be0ddb3361e16ad77b68ba41efc8e979019\",\r\n                \"reference\": \"99732be0ddb3361e16ad77b68ba41efc8e979019\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \">=5.6\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"extra\": {\r\n                \"branch-alias\": {\r\n                    \"dev-master\": \"2.0.x-dev\"\r\n                }\r\n            },\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Sebastian Bergmann\",\r\n                    \"email\": \"sebastian@phpunit.de\",\r\n                    \"role\": \"lead\"\r\n                }\r\n            ],\r\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\r\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\r\n            \"time\": \"2016-10-03T07:35:21+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"theseer/tokenizer\",\r\n            \"version\": \"1.2.0\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/theseer/tokenizer.git\",\r\n                \"reference\": \"75a63c33a8577608444246075ea0af0d052e452a\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a\",\r\n                \"reference\": \"75a63c33a8577608444246075ea0af0d052e452a\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"ext-dom\": \"*\",\r\n                \"ext-tokenizer\": \"*\",\r\n                \"ext-xmlwriter\": \"*\",\r\n                \"php\": \"^7.2 || ^8.0\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"classmap\": [\r\n                    \"src/\"\r\n                ]\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"BSD-3-Clause\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Arne Blankerts\",\r\n                    \"email\": \"arne@blankerts.de\",\r\n                    \"role\": \"Developer\"\r\n                }\r\n            ],\r\n            \"description\": \"A small library for converting tokenized PHP source code into XML and potentially other formats\",\r\n            \"time\": \"2020-07-12T23:59:07+00:00\"\r\n        },\r\n        {\r\n            \"name\": \"webmozart/assert\",\r\n            \"version\": \"1.9.1\",\r\n            \"source\": {\r\n                \"type\": \"git\",\r\n                \"url\": \"https://github.com/webmozart/assert.git\",\r\n                \"reference\": \"bafc69caeb4d49c39fd0779086c03a3738cbb389\"\r\n            },\r\n            \"dist\": {\r\n                \"type\": \"zip\",\r\n                \"url\": \"https://api.github.com/repos/webmozart/assert/zipball/bafc69caeb4d49c39fd0779086c03a3738cbb389\",\r\n                \"reference\": \"bafc69caeb4d49c39fd0779086c03a3738cbb389\",\r\n                \"shasum\": \"\"\r\n            },\r\n            \"require\": {\r\n                \"php\": \"^5.3.3 || ^7.0 || ^8.0\",\r\n                \"symfony/polyfill-ctype\": \"^1.8\"\r\n            },\r\n            \"conflict\": {\r\n                \"phpstan/phpstan\": \"<0.12.20\",\r\n                \"vimeo/psalm\": \"<3.9.1\"\r\n            },\r\n            \"require-dev\": {\r\n                \"phpunit/phpunit\": \"^4.8.36 || ^7.5.13\"\r\n            },\r\n            \"type\": \"library\",\r\n            \"autoload\": {\r\n                \"psr-4\": {\r\n                    \"Webmozart\\\\Assert\\\\\": \"src/\"\r\n                }\r\n            },\r\n            \"notification-url\": \"https://packagist.org/downloads/\",\r\n            \"license\": [\r\n                \"MIT\"\r\n            ],\r\n            \"authors\": [\r\n                {\r\n                    \"name\": \"Bernhard Schussek\",\r\n                    \"email\": \"bschussek@gmail.com\"\r\n                }\r\n            ],\r\n            \"description\": \"Assertions to validate method input/output with nice error messages.\",\r\n            \"keywords\": [\r\n                \"assert\",\r\n                \"check\",\r\n                \"validate\"\r\n            ],\r\n            \"time\": \"2020-07-08T17:02:28+00:00\"\r\n        }\r\n    ],\r\n    \"aliases\": [],\r\n    \"minimum-stability\": \"dev\",\r\n    \"stability-flags\": [],\r\n    \"prefer-stable\": true,\r\n    \"prefer-lowest\": false,\r\n    \"platform\": {\r\n        \"php\": \"^7.2.5|^8.0\"\r\n    },\r\n    \"platform-dev\": []\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/composer.lock b/composer.lock
--- a/composer.lock	
+++ b/composer.lock	
@@ -713,16 +713,16 @@
         },
         {
             "name": "laravel/framework",
-            "version": "v7.30.0",
+            "version": "v7.30.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/framework.git",
-                "reference": "629c36a0fe87b66d8dccd3c82927950d0f59d3f9"
+                "reference": "e73855b18dcfc645c36d2474f437e4e73dd3c11d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/framework/zipball/629c36a0fe87b66d8dccd3c82927950d0f59d3f9",
-                "reference": "629c36a0fe87b66d8dccd3c82927950d0f59d3f9",
+                "url": "https://api.github.com/repos/laravel/framework/zipball/e73855b18dcfc645c36d2474f437e4e73dd3c11d",
+                "reference": "e73855b18dcfc645c36d2474f437e4e73dd3c11d",
                 "shasum": ""
             },
             "require": {
@@ -867,7 +867,7 @@
                 "framework",
                 "laravel"
             ],
-            "time": "2020-12-01T15:01:25+00:00"
+            "time": "2020-12-22T17:00:45+00:00"
         },
         {
             "name": "laravel/tinker",
@@ -1414,16 +1414,16 @@
         },
         {
             "name": "nikic/php-parser",
-            "version": "v4.10.3",
+            "version": "v4.10.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nikic/PHP-Parser.git",
-                "reference": "dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984"
+                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984",
-                "reference": "dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984",
+                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
+                "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e",
                 "shasum": ""
             },
             "require": {
@@ -1462,7 +1462,7 @@
                 "parser",
                 "php"
             ],
-            "time": "2020-12-03T17:45:45+00:00"
+            "time": "2020-12-20T10:01:03+00:00"
         },
         {
             "name": "opis/closure",
@@ -5414,16 +5414,16 @@
         },
         {
             "name": "scrivo/highlight.php",
-            "version": "v9.18.1.5",
+            "version": "v9.18.1.6",
             "source": {
                 "type": "git",
                 "url": "https://github.com/scrivo/highlight.php.git",
-                "reference": "fa75a865928a4a5d49e5e77faca6bd2f2410baaf"
+                "reference": "44a3d4136edb5ad8551590bf90f437db80b2d466"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/scrivo/highlight.php/zipball/fa75a865928a4a5d49e5e77faca6bd2f2410baaf",
-                "reference": "fa75a865928a4a5d49e5e77faca6bd2f2410baaf",
+                "url": "https://api.github.com/repos/scrivo/highlight.php/zipball/44a3d4136edb5ad8551590bf90f437db80b2d466",
+                "reference": "44a3d4136edb5ad8551590bf90f437db80b2d466",
                 "shasum": ""
             },
             "require": {
@@ -5437,9 +5437,6 @@
                 "symfony/finder": "^2.8|^3.4",
                 "symfony/var-dumper": "^2.8|^3.4"
             },
-            "suggest": {
-                "ext-dom": "Needed to make use of the features in the utilities namespace"
-            },
             "type": "library",
             "autoload": {
                 "psr-0": {
@@ -5479,7 +5476,7 @@
                 "highlight.php",
                 "syntax"
             ],
-            "time": "2020-11-22T06:07:40+00:00"
+            "time": "2020-12-22T19:20:29+00:00"
         },
         {
             "name": "sebastian/code-unit-reverse-lookup",
Index: vendor/nikic/php-parser/grammar/php7.y
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>%pure_parser\r\n%expect 2\r\n\r\n%tokens\r\n\r\n%%\r\n\r\nstart:\r\n    top_statement_list                                      { $$ = $this->handleNamespaces($1); }\r\n;\r\n\r\ntop_statement_list_ex:\r\n      top_statement_list_ex top_statement                   { pushNormalizing($1, $2); }\r\n    | /* empty */                                           { init(); }\r\n;\r\n\r\ntop_statement_list:\r\n      top_statement_list_ex\r\n          { makeZeroLengthNop($nop, $this->lookaheadStartAttributes);\r\n            if ($nop !== null) { $1[] = $nop; } $$ = $1; }\r\n;\r\n\r\nreserved_non_modifiers:\r\n      T_INCLUDE | T_INCLUDE_ONCE | T_EVAL | T_REQUIRE | T_REQUIRE_ONCE | T_LOGICAL_OR | T_LOGICAL_XOR | T_LOGICAL_AND\r\n    | T_INSTANCEOF | T_NEW | T_CLONE | T_EXIT | T_IF | T_ELSEIF | T_ELSE | T_ENDIF | T_ECHO | T_DO | T_WHILE\r\n    | T_ENDWHILE | T_FOR | T_ENDFOR | T_FOREACH | T_ENDFOREACH | T_DECLARE | T_ENDDECLARE | T_AS | T_TRY | T_CATCH\r\n    | T_FINALLY | T_THROW | T_USE | T_INSTEADOF | T_GLOBAL | T_VAR | T_UNSET | T_ISSET | T_EMPTY | T_CONTINUE | T_GOTO\r\n    | T_FUNCTION | T_CONST | T_RETURN | T_PRINT | T_YIELD | T_LIST | T_SWITCH | T_ENDSWITCH | T_CASE | T_DEFAULT\r\n    | T_BREAK | T_ARRAY | T_CALLABLE | T_EXTENDS | T_IMPLEMENTS | T_NAMESPACE | T_TRAIT | T_INTERFACE | T_CLASS\r\n    | T_CLASS_C | T_TRAIT_C | T_FUNC_C | T_METHOD_C | T_LINE | T_FILE | T_DIR | T_NS_C | T_HALT_COMPILER | T_FN\r\n    | T_MATCH\r\n;\r\n\r\nsemi_reserved:\r\n      reserved_non_modifiers\r\n    | T_STATIC | T_ABSTRACT | T_FINAL | T_PRIVATE | T_PROTECTED | T_PUBLIC\r\n;\r\n\r\nidentifier_ex:\r\n      T_STRING                                              { $$ = Node\\Identifier[$1]; }\r\n    | semi_reserved                                         { $$ = Node\\Identifier[$1]; }\r\n;\r\n\r\nidentifier:\r\n      T_STRING                                              { $$ = Node\\Identifier[$1]; }\r\n;\r\n\r\nreserved_non_modifiers_identifier:\r\n      reserved_non_modifiers                                { $$ = Node\\Identifier[$1]; }\r\n;\r\n\r\nnamespace_declaration_name:\r\n      T_STRING                                              { $$ = Name[$1]; }\r\n    | semi_reserved                                         { $$ = Name[$1]; }\r\n    | T_NAME_QUALIFIED                                      { $$ = Name[$1]; }\r\n;\r\n\r\nnamespace_name:\r\n      T_STRING                                              { $$ = Name[$1]; }\r\n    | T_NAME_QUALIFIED                                      { $$ = Name[$1]; }\r\n;\r\n\r\nlegacy_namespace_name:\r\n      namespace_name                                        { $$ = $1; }\r\n    | T_NAME_FULLY_QUALIFIED                                { $$ = Name[substr($1, 1)]; }\r\n;\r\n\r\nplain_variable:\r\n      T_VARIABLE                                            { $$ = Expr\\Variable[parseVar($1)]; }\r\n;\r\n\r\nsemi:\r\n      ';'                                                   { /* nothing */ }\r\n    | error                                                 { /* nothing */ }\r\n;\r\n\r\nno_comma:\r\n      /* empty */ { /* nothing */ }\r\n    | ',' { $this->emitError(new Error('A trailing comma is not allowed here', attributes())); }\r\n;\r\n\r\noptional_comma:\r\n      /* empty */\r\n    | ','\r\n;\r\n\r\nattribute_decl:\r\n      class_name                                            { $$ = Node\\Attribute[$1, []]; }\r\n    | class_name argument_list                              { $$ = Node\\Attribute[$1, $2]; }\r\n;\r\n\r\nattribute_group:\r\n      attribute_decl                                        { init($1); }\r\n    | attribute_group ',' attribute_decl                    { push($1, $3); }\r\n;\r\n\r\nattribute:\r\n      T_ATTRIBUTE attribute_group optional_comma ']'        { $$ = Node\\AttributeGroup[$2]; }\r\n;\r\n\r\nattributes:\r\n      attribute                                             { init($1); }\r\n    | attributes attribute                                  { push($1, $2); }\r\n;\r\n\r\noptional_attributes:\r\n      /* empty */                                           { $$ = []; }\r\n    | attributes                                            { $$ = $1; }\r\n;\r\n\r\ntop_statement:\r\n      statement                                             { $$ = $1; }\r\n    | function_declaration_statement                        { $$ = $1; }\r\n    | class_declaration_statement                           { $$ = $1; }\r\n    | T_HALT_COMPILER\r\n          { $$ = Stmt\\HaltCompiler[$this->lexer->handleHaltCompiler()]; }\r\n    | T_NAMESPACE namespace_declaration_name semi\r\n          { $$ = Stmt\\Namespace_[$2, null];\r\n            $$->setAttribute('kind', Stmt\\Namespace_::KIND_SEMICOLON);\r\n            $this->checkNamespace($$); }\r\n    | T_NAMESPACE namespace_declaration_name '{' top_statement_list '}'\r\n          { $$ = Stmt\\Namespace_[$2, $4];\r\n            $$->setAttribute('kind', Stmt\\Namespace_::KIND_BRACED);\r\n            $this->checkNamespace($$); }\r\n    | T_NAMESPACE '{' top_statement_list '}'\r\n          { $$ = Stmt\\Namespace_[null, $3];\r\n            $$->setAttribute('kind', Stmt\\Namespace_::KIND_BRACED);\r\n            $this->checkNamespace($$); }\r\n    | T_USE use_declarations semi                           { $$ = Stmt\\Use_[$2, Stmt\\Use_::TYPE_NORMAL]; }\r\n    | T_USE use_type use_declarations semi                  { $$ = Stmt\\Use_[$3, $2]; }\r\n    | group_use_declaration semi                            { $$ = $1; }\r\n    | T_CONST constant_declaration_list semi                { $$ = Stmt\\Const_[$2]; }\r\n;\r\n\r\nuse_type:\r\n      T_FUNCTION                                            { $$ = Stmt\\Use_::TYPE_FUNCTION; }\r\n    | T_CONST                                               { $$ = Stmt\\Use_::TYPE_CONSTANT; }\r\n;\r\n\r\ngroup_use_declaration:\r\n      T_USE use_type legacy_namespace_name T_NS_SEPARATOR '{' unprefixed_use_declarations '}'\r\n          { $$ = Stmt\\GroupUse[$3, $6, $2]; }\r\n    | T_USE legacy_namespace_name T_NS_SEPARATOR '{' inline_use_declarations '}'\r\n          { $$ = Stmt\\GroupUse[$2, $5, Stmt\\Use_::TYPE_UNKNOWN]; }\r\n;\r\n\r\nunprefixed_use_declarations:\r\n      non_empty_unprefixed_use_declarations optional_comma  { $$ = $1; }\r\n;\r\n\r\nnon_empty_unprefixed_use_declarations:\r\n      non_empty_unprefixed_use_declarations ',' unprefixed_use_declaration\r\n          { push($1, $3); }\r\n    | unprefixed_use_declaration                            { init($1); }\r\n;\r\n\r\nuse_declarations:\r\n      non_empty_use_declarations no_comma                   { $$ = $1; }\r\n;\r\n\r\nnon_empty_use_declarations:\r\n      non_empty_use_declarations ',' use_declaration        { push($1, $3); }\r\n    | use_declaration                                       { init($1); }\r\n;\r\n\r\ninline_use_declarations:\r\n      non_empty_inline_use_declarations optional_comma      { $$ = $1; }\r\n;\r\n\r\nnon_empty_inline_use_declarations:\r\n      non_empty_inline_use_declarations ',' inline_use_declaration\r\n          { push($1, $3); }\r\n    | inline_use_declaration                                { init($1); }\r\n;\r\n\r\nunprefixed_use_declaration:\r\n      namespace_name\r\n          { $$ = Stmt\\UseUse[$1, null, Stmt\\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #1); }\r\n    | namespace_name T_AS identifier\r\n          { $$ = Stmt\\UseUse[$1, $3, Stmt\\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #3); }\r\n;\r\n\r\nuse_declaration:\r\n      legacy_namespace_name\r\n          { $$ = Stmt\\UseUse[$1, null, Stmt\\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #1); }\r\n    | legacy_namespace_name T_AS identifier\r\n          { $$ = Stmt\\UseUse[$1, $3, Stmt\\Use_::TYPE_UNKNOWN]; $this->checkUseUse($$, #3); }\r\n;\r\n\r\ninline_use_declaration:\r\n      unprefixed_use_declaration                            { $$ = $1; $$->type = Stmt\\Use_::TYPE_NORMAL; }\r\n    | use_type unprefixed_use_declaration                   { $$ = $2; $$->type = $1; }\r\n;\r\n\r\nconstant_declaration_list:\r\n      non_empty_constant_declaration_list no_comma          { $$ = $1; }\r\n;\r\n\r\nnon_empty_constant_declaration_list:\r\n      non_empty_constant_declaration_list ',' constant_declaration\r\n          { push($1, $3); }\r\n    | constant_declaration                                  { init($1); }\r\n;\r\n\r\nconstant_declaration:\r\n    identifier '=' expr                                     { $$ = Node\\Const_[$1, $3]; }\r\n;\r\n\r\nclass_const_list:\r\n      non_empty_class_const_list no_comma                   { $$ = $1; }\r\n;\r\n\r\nnon_empty_class_const_list:\r\n      non_empty_class_const_list ',' class_const            { push($1, $3); }\r\n    | class_const                                           { init($1); }\r\n;\r\n\r\nclass_const:\r\n    identifier_ex '=' expr                                  { $$ = Node\\Const_[$1, $3]; }\r\n;\r\n\r\ninner_statement_list_ex:\r\n      inner_statement_list_ex inner_statement               { pushNormalizing($1, $2); }\r\n    | /* empty */                                           { init(); }\r\n;\r\n\r\ninner_statement_list:\r\n      inner_statement_list_ex\r\n          { makeZeroLengthNop($nop, $this->lookaheadStartAttributes);\r\n            if ($nop !== null) { $1[] = $nop; } $$ = $1; }\r\n;\r\n\r\ninner_statement:\r\n      statement                                             { $$ = $1; }\r\n    | function_declaration_statement                        { $$ = $1; }\r\n    | class_declaration_statement                           { $$ = $1; }\r\n    | T_HALT_COMPILER\r\n          { throw new Error('__HALT_COMPILER() can only be used from the outermost scope', attributes()); }\r\n;\r\n\r\nnon_empty_statement:\r\n      '{' inner_statement_list '}'\r\n    {\r\n        if ($2) {\r\n            $$ = $2; prependLeadingComments($$);\r\n        } else {\r\n            makeNop($$, $this->startAttributeStack[#1], $this->endAttributes);\r\n            if (null === $$) { $$ = array(); }\r\n        }\r\n    }\r\n    | T_IF '(' expr ')' statement elseif_list else_single\r\n          { $$ = Stmt\\If_[$3, ['stmts' => toArray($5), 'elseifs' => $6, 'else' => $7]]; }\r\n    | T_IF '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single T_ENDIF ';'\r\n          { $$ = Stmt\\If_[$3, ['stmts' => $6, 'elseifs' => $7, 'else' => $8]]; }\r\n    | T_WHILE '(' expr ')' while_statement                  { $$ = Stmt\\While_[$3, $5]; }\r\n    | T_DO statement T_WHILE '(' expr ')' ';'               { $$ = Stmt\\Do_   [$5, toArray($2)]; }\r\n    | T_FOR '(' for_expr ';'  for_expr ';' for_expr ')' for_statement\r\n          { $$ = Stmt\\For_[['init' => $3, 'cond' => $5, 'loop' => $7, 'stmts' => $9]]; }\r\n    | T_SWITCH '(' expr ')' switch_case_list                { $$ = Stmt\\Switch_[$3, $5]; }\r\n    | T_BREAK optional_expr semi                            { $$ = Stmt\\Break_[$2]; }\r\n    | T_CONTINUE optional_expr semi                         { $$ = Stmt\\Continue_[$2]; }\r\n    | T_RETURN optional_expr semi                           { $$ = Stmt\\Return_[$2]; }\r\n    | T_GLOBAL global_var_list semi                         { $$ = Stmt\\Global_[$2]; }\r\n    | T_STATIC static_var_list semi                         { $$ = Stmt\\Static_[$2]; }\r\n    | T_ECHO expr_list_forbid_comma semi                    { $$ = Stmt\\Echo_[$2]; }\r\n    | T_INLINE_HTML                                         { $$ = Stmt\\InlineHTML[$1]; }\r\n    | expr semi {\r\n        $e = $1;\r\n        if ($e instanceof Expr\\Throw_) {\r\n            // For backwards-compatibility reasons, convert throw in statement position into\r\n            // Stmt\\Throw_ rather than Stmt\\Expression(Expr\\Throw_).\r\n            $$ = Stmt\\Throw_[$e->expr];\r\n        } else {\r\n            $$ = Stmt\\Expression[$e];\r\n        }\r\n    }\r\n    | T_UNSET '(' variables_list ')' semi                   { $$ = Stmt\\Unset_[$3]; }\r\n    | T_FOREACH '(' expr T_AS foreach_variable ')' foreach_statement\r\n          { $$ = Stmt\\Foreach_[$3, $5[0], ['keyVar' => null, 'byRef' => $5[1], 'stmts' => $7]]; }\r\n    | T_FOREACH '(' expr T_AS variable T_DOUBLE_ARROW foreach_variable ')' foreach_statement\r\n          { $$ = Stmt\\Foreach_[$3, $7[0], ['keyVar' => $5, 'byRef' => $7[1], 'stmts' => $9]]; }\r\n    | T_FOREACH '(' expr error ')' foreach_statement\r\n          { $$ = Stmt\\Foreach_[$3, new Expr\\Error(stackAttributes(#4)), ['stmts' => $6]]; }\r\n    | T_DECLARE '(' declare_list ')' declare_statement      { $$ = Stmt\\Declare_[$3, $5]; }\r\n    | T_TRY '{' inner_statement_list '}' catches optional_finally\r\n          { $$ = Stmt\\TryCatch[$3, $5, $6]; $this->checkTryCatch($$); }\r\n    | T_GOTO identifier semi                                { $$ = Stmt\\Goto_[$2]; }\r\n    | identifier ':'                                        { $$ = Stmt\\Label[$1]; }\r\n    | error                                                 { $$ = array(); /* means: no statement */ }\r\n;\r\n\r\nstatement:\r\n      non_empty_statement                                   { $$ = $1; }\r\n    | ';'\r\n          { makeNop($$, $this->startAttributeStack[#1], $this->endAttributes);\r\n            if ($$ === null) $$ = array(); /* means: no statement */ }\r\n;\r\n\r\ncatches:\r\n      /* empty */                                           { init(); }\r\n    | catches catch                                         { push($1, $2); }\r\n;\r\n\r\nname_union:\r\n      name                                                  { init($1); }\r\n    | name_union '|' name                                   { push($1, $3); }\r\n;\r\n\r\ncatch:\r\n    T_CATCH '(' name_union optional_plain_variable ')' '{' inner_statement_list '}'\r\n        { $$ = Stmt\\Catch_[$3, $4, $7]; }\r\n;\r\n\r\noptional_finally:\r\n      /* empty */                                           { $$ = null; }\r\n    | T_FINALLY '{' inner_statement_list '}'                { $$ = Stmt\\Finally_[$3]; }\r\n;\r\n\r\nvariables_list:\r\n      non_empty_variables_list optional_comma               { $$ = $1; }\r\n;\r\n\r\nnon_empty_variables_list:\r\n      variable                                              { init($1); }\r\n    | non_empty_variables_list ',' variable                 { push($1, $3); }\r\n;\r\n\r\noptional_ref:\r\n      /* empty */                                           { $$ = false; }\r\n    | '&'                                                   { $$ = true; }\r\n;\r\n\r\noptional_ellipsis:\r\n      /* empty */                                           { $$ = false; }\r\n    | T_ELLIPSIS                                            { $$ = true; }\r\n;\r\n\r\nblock_or_error:\r\n      '{' inner_statement_list '}'                          { $$ = $2; }\r\n    | error                                                 { $$ = []; }\r\n;\r\n\r\nfunction_declaration_statement:\r\n      T_FUNCTION optional_ref identifier '(' parameter_list ')' optional_return_type block_or_error\r\n          { $$ = Stmt\\Function_[$3, ['byRef' => $2, 'params' => $5, 'returnType' => $7, 'stmts' => $8, 'attrGroups' => []]]; }\r\n    | attributes T_FUNCTION optional_ref identifier '(' parameter_list ')' optional_return_type block_or_error\r\n          { $$ = Stmt\\Function_[$4, ['byRef' => $3, 'params' => $6, 'returnType' => $8, 'stmts' => $9, 'attrGroups' => $1]]; }\r\n;\r\n\r\nclass_declaration_statement:\r\n      class_entry_type identifier extends_from implements_list '{' class_statement_list '}'\r\n          { $$ = Stmt\\Class_[$2, ['type' => $1, 'extends' => $3, 'implements' => $4, 'stmts' => $6, 'attrGroups' => []]];\r\n            $this->checkClass($$, #2); }\r\n    | attributes class_entry_type identifier extends_from implements_list '{' class_statement_list '}'\r\n          { $$ = Stmt\\Class_[$3, ['type' => $2, 'extends' => $4, 'implements' => $5, 'stmts' => $7, 'attrGroups' => $1]];\r\n            $this->checkClass($$, #3); }\r\n    | optional_attributes T_INTERFACE identifier interface_extends_list '{' class_statement_list '}'\r\n          { $$ = Stmt\\Interface_[$3, ['extends' => $4, 'stmts' => $6, 'attrGroups' => $1]];\r\n            $this->checkInterface($$, #3); }\r\n    | optional_attributes T_TRAIT identifier '{' class_statement_list '}'\r\n          { $$ = Stmt\\Trait_[$3, ['stmts' => $5, 'attrGroups' => $1]]; }\r\n;\r\n\r\nclass_entry_type:\r\n      T_CLASS                                               { $$ = 0; }\r\n    | T_ABSTRACT T_CLASS                                    { $$ = Stmt\\Class_::MODIFIER_ABSTRACT; }\r\n    | T_FINAL T_CLASS                                       { $$ = Stmt\\Class_::MODIFIER_FINAL; }\r\n;\r\n\r\nextends_from:\r\n      /* empty */                                           { $$ = null; }\r\n    | T_EXTENDS class_name                                  { $$ = $2; }\r\n;\r\n\r\ninterface_extends_list:\r\n      /* empty */                                           { $$ = array(); }\r\n    | T_EXTENDS class_name_list                             { $$ = $2; }\r\n;\r\n\r\nimplements_list:\r\n      /* empty */                                           { $$ = array(); }\r\n    | T_IMPLEMENTS class_name_list                          { $$ = $2; }\r\n;\r\n\r\nclass_name_list:\r\n      non_empty_class_name_list no_comma                    { $$ = $1; }\r\n;\r\n\r\nnon_empty_class_name_list:\r\n      class_name                                            { init($1); }\r\n    | non_empty_class_name_list ',' class_name              { push($1, $3); }\r\n;\r\n\r\nfor_statement:\r\n      statement                                             { $$ = toArray($1); }\r\n    | ':' inner_statement_list T_ENDFOR ';'                 { $$ = $2; }\r\n;\r\n\r\nforeach_statement:\r\n      statement                                             { $$ = toArray($1); }\r\n    | ':' inner_statement_list T_ENDFOREACH ';'             { $$ = $2; }\r\n;\r\n\r\ndeclare_statement:\r\n      non_empty_statement                                   { $$ = toArray($1); }\r\n    | ';'                                                   { $$ = null; }\r\n    | ':' inner_statement_list T_ENDDECLARE ';'             { $$ = $2; }\r\n;\r\n\r\ndeclare_list:\r\n      non_empty_declare_list no_comma                       { $$ = $1; }\r\n;\r\n\r\nnon_empty_declare_list:\r\n      declare_list_element                                  { init($1); }\r\n    | non_empty_declare_list ',' declare_list_element       { push($1, $3); }\r\n;\r\n\r\ndeclare_list_element:\r\n      identifier '=' expr                                   { $$ = Stmt\\DeclareDeclare[$1, $3]; }\r\n;\r\n\r\nswitch_case_list:\r\n      '{' case_list '}'                                     { $$ = $2; }\r\n    | '{' ';' case_list '}'                                 { $$ = $3; }\r\n    | ':' case_list T_ENDSWITCH ';'                         { $$ = $2; }\r\n    | ':' ';' case_list T_ENDSWITCH ';'                     { $$ = $3; }\r\n;\r\n\r\ncase_list:\r\n      /* empty */                                           { init(); }\r\n    | case_list case                                        { push($1, $2); }\r\n;\r\n\r\ncase:\r\n      T_CASE expr case_separator inner_statement_list_ex    { $$ = Stmt\\Case_[$2, $4]; }\r\n    | T_DEFAULT case_separator inner_statement_list_ex      { $$ = Stmt\\Case_[null, $3]; }\r\n;\r\n\r\ncase_separator:\r\n      ':'\r\n    | ';'\r\n;\r\n\r\nmatch:\r\n      T_MATCH '(' expr ')' '{' match_arm_list '}'           { $$ = Expr\\Match_[$3, $6]; }\r\n;\r\n\r\nmatch_arm_list:\r\n      /* empty */                                           { $$ = []; }\r\n    | non_empty_match_arm_list optional_comma               { $$ = $1; }\r\n;\r\n\r\nnon_empty_match_arm_list:\r\n      match_arm                                             { init($1); }\r\n    | non_empty_match_arm_list ',' match_arm                { push($1, $3); }\r\n;\r\n\r\nmatch_arm:\r\n      expr_list_allow_comma T_DOUBLE_ARROW expr             { $$ = Node\\MatchArm[$1, $3]; }\r\n    | T_DEFAULT optional_comma T_DOUBLE_ARROW expr          { $$ = Node\\MatchArm[null, $4]; }\r\n;\r\n\r\nwhile_statement:\r\n      statement                                             { $$ = toArray($1); }\r\n    | ':' inner_statement_list T_ENDWHILE ';'               { $$ = $2; }\r\n;\r\n\r\nelseif_list:\r\n      /* empty */                                           { init(); }\r\n    | elseif_list elseif                                    { push($1, $2); }\r\n;\r\n\r\nelseif:\r\n      T_ELSEIF '(' expr ')' statement                       { $$ = Stmt\\ElseIf_[$3, toArray($5)]; }\r\n;\r\n\r\nnew_elseif_list:\r\n      /* empty */                                           { init(); }\r\n    | new_elseif_list new_elseif                            { push($1, $2); }\r\n;\r\n\r\nnew_elseif:\r\n     T_ELSEIF '(' expr ')' ':' inner_statement_list         { $$ = Stmt\\ElseIf_[$3, $6]; }\r\n;\r\n\r\nelse_single:\r\n      /* empty */                                           { $$ = null; }\r\n    | T_ELSE statement                                      { $$ = Stmt\\Else_[toArray($2)]; }\r\n;\r\n\r\nnew_else_single:\r\n      /* empty */                                           { $$ = null; }\r\n    | T_ELSE ':' inner_statement_list                       { $$ = Stmt\\Else_[$3]; }\r\n;\r\n\r\nforeach_variable:\r\n      variable                                              { $$ = array($1, false); }\r\n    | '&' variable                                          { $$ = array($2, true); }\r\n    | list_expr                                             { $$ = array($1, false); }\r\n    | array_short_syntax                                    { $$ = array($1, false); }\r\n;\r\n\r\nparameter_list:\r\n      non_empty_parameter_list optional_comma               { $$ = $1; }\r\n    | /* empty */                                           { $$ = array(); }\r\n;\r\n\r\nnon_empty_parameter_list:\r\n      parameter                                             { init($1); }\r\n    | non_empty_parameter_list ',' parameter                { push($1, $3); }\r\n;\r\n\r\noptional_visibility_modifier:\r\n      /* empty */               { $$ = 0; }\r\n    | T_PUBLIC                  { $$ = Stmt\\Class_::MODIFIER_PUBLIC; }\r\n    | T_PROTECTED               { $$ = Stmt\\Class_::MODIFIER_PROTECTED; }\r\n    | T_PRIVATE                 { $$ = Stmt\\Class_::MODIFIER_PRIVATE; }\r\n;\r\n\r\nparameter:\r\n      optional_attributes optional_visibility_modifier optional_type_without_static optional_ref optional_ellipsis plain_variable\r\n          { $$ = new Node\\Param($6, null, $3, $4, $5, attributes(), $2, $1);\r\n            $this->checkParam($$); }\r\n    | optional_attributes optional_visibility_modifier optional_type_without_static optional_ref optional_ellipsis plain_variable '=' expr\r\n          { $$ = new Node\\Param($6, $8, $3, $4, $5, attributes(), $2, $1);\r\n            $this->checkParam($$); }\r\n    | optional_attributes optional_visibility_modifier optional_type_without_static optional_ref optional_ellipsis error\r\n          { $$ = new Node\\Param(Expr\\Error[], null, $3, $4, $5, attributes(), $2, $1); }\r\n;\r\n\r\ntype_expr:\r\n      type                                                  { $$ = $1; }\r\n    | '?' type                                              { $$ = Node\\NullableType[$2]; }\r\n    | union_type                                            { $$ = Node\\UnionType[$1]; }\r\n;\r\n\r\ntype:\r\n      type_without_static                                   { $$ = $1; }\r\n    | T_STATIC                                              { $$ = Node\\Name['static']; }\r\n;\r\n\r\ntype_without_static:\r\n      name                                                  { $$ = $this->handleBuiltinTypes($1); }\r\n    | T_ARRAY                                               { $$ = Node\\Identifier['array']; }\r\n    | T_CALLABLE                                            { $$ = Node\\Identifier['callable']; }\r\n;\r\n\r\nunion_type:\r\n      type '|' type                                         { init($1, $3); }\r\n    | union_type '|' type                                   { push($1, $3); }\r\n;\r\n\r\nunion_type_without_static:\r\n      type_without_static '|' type_without_static           { init($1, $3); }\r\n    | union_type_without_static '|' type_without_static     { push($1, $3); }\r\n;\r\n\r\ntype_expr_without_static:\r\n      type_without_static                                   { $$ = $1; }\r\n    | '?' type_without_static                               { $$ = Node\\NullableType[$2]; }\r\n    | union_type_without_static                             { $$ = Node\\UnionType[$1]; }\r\n;\r\n\r\noptional_type_without_static:\r\n      /* empty */                                           { $$ = null; }\r\n    | type_expr_without_static                              { $$ = $1; }\r\n;\r\n\r\noptional_return_type:\r\n      /* empty */                                           { $$ = null; }\r\n    | ':' type_expr                                         { $$ = $2; }\r\n    | ':' error                                             { $$ = null; }\r\n;\r\n\r\nargument_list:\r\n      '(' ')'                                               { $$ = array(); }\r\n    | '(' non_empty_argument_list optional_comma ')'        { $$ = $2; }\r\n;\r\n\r\nnon_empty_argument_list:\r\n      argument                                              { init($1); }\r\n    | non_empty_argument_list ',' argument                  { push($1, $3); }\r\n;\r\n\r\nargument:\r\n      expr                                                  { $$ = Node\\Arg[$1, false, false]; }\r\n    | '&' variable                                          { $$ = Node\\Arg[$2, true, false]; }\r\n    | T_ELLIPSIS expr                                       { $$ = Node\\Arg[$2, false, true]; }\r\n    | identifier_ex ':' expr\r\n          { $$ = new Node\\Arg($3, false, false, attributes(), $1); }\r\n;\r\n\r\nglobal_var_list:\r\n      non_empty_global_var_list no_comma                    { $$ = $1; }\r\n;\r\n\r\nnon_empty_global_var_list:\r\n      non_empty_global_var_list ',' global_var              { push($1, $3); }\r\n    | global_var                                            { init($1); }\r\n;\r\n\r\nglobal_var:\r\n      simple_variable                                       { $$ = Expr\\Variable[$1]; }\r\n;\r\n\r\nstatic_var_list:\r\n      non_empty_static_var_list no_comma                    { $$ = $1; }\r\n;\r\n\r\nnon_empty_static_var_list:\r\n      non_empty_static_var_list ',' static_var              { push($1, $3); }\r\n    | static_var                                            { init($1); }\r\n;\r\n\r\nstatic_var:\r\n      plain_variable                                        { $$ = Stmt\\StaticVar[$1, null]; }\r\n    | plain_variable '=' expr                               { $$ = Stmt\\StaticVar[$1, $3]; }\r\n;\r\n\r\nclass_statement_list_ex:\r\n      class_statement_list_ex class_statement               { if ($2 !== null) { push($1, $2); } }\r\n    | /* empty */                                           { init(); }\r\n;\r\n\r\nclass_statement_list:\r\n      class_statement_list_ex\r\n          { makeZeroLengthNop($nop, $this->lookaheadStartAttributes);\r\n            if ($nop !== null) { $1[] = $nop; } $$ = $1; }\r\n;\r\n\r\nclass_statement:\r\n      optional_attributes variable_modifiers optional_type_without_static property_declaration_list semi\r\n          { $$ = new Stmt\\Property($2, $4, attributes(), $3, $1);\r\n            $this->checkProperty($$, #2); }\r\n    | optional_attributes method_modifiers T_CONST class_const_list semi\r\n          { $$ = new Stmt\\ClassConst($4, $2, attributes(), $1);\r\n            $this->checkClassConst($$, #2); }\r\n    | optional_attributes method_modifiers T_FUNCTION optional_ref identifier_ex '(' parameter_list ')' optional_return_type method_body\r\n          { $$ = Stmt\\ClassMethod[$5, ['type' => $2, 'byRef' => $4, 'params' => $7, 'returnType' => $9, 'stmts' => $10, 'attrGroups' => $1]];\r\n            $this->checkClassMethod($$, #2); }\r\n    | T_USE class_name_list trait_adaptations               { $$ = Stmt\\TraitUse[$2, $3]; }\r\n    | error                                                 { $$ = null; /* will be skipped */ }\r\n;\r\n\r\ntrait_adaptations:\r\n      ';'                                                   { $$ = array(); }\r\n    | '{' trait_adaptation_list '}'                         { $$ = $2; }\r\n;\r\n\r\ntrait_adaptation_list:\r\n      /* empty */                                           { init(); }\r\n    | trait_adaptation_list trait_adaptation                { push($1, $2); }\r\n;\r\n\r\ntrait_adaptation:\r\n      trait_method_reference_fully_qualified T_INSTEADOF class_name_list ';'\r\n          { $$ = Stmt\\TraitUseAdaptation\\Precedence[$1[0], $1[1], $3]; }\r\n    | trait_method_reference T_AS member_modifier identifier_ex ';'\r\n          { $$ = Stmt\\TraitUseAdaptation\\Alias[$1[0], $1[1], $3, $4]; }\r\n    | trait_method_reference T_AS member_modifier ';'\r\n          { $$ = Stmt\\TraitUseAdaptation\\Alias[$1[0], $1[1], $3, null]; }\r\n    | trait_method_reference T_AS identifier ';'\r\n          { $$ = Stmt\\TraitUseAdaptation\\Alias[$1[0], $1[1], null, $3]; }\r\n    | trait_method_reference T_AS reserved_non_modifiers_identifier ';'\r\n          { $$ = Stmt\\TraitUseAdaptation\\Alias[$1[0], $1[1], null, $3]; }\r\n;\r\n\r\ntrait_method_reference_fully_qualified:\r\n      name T_PAAMAYIM_NEKUDOTAYIM identifier_ex             { $$ = array($1, $3); }\r\n;\r\ntrait_method_reference:\r\n      trait_method_reference_fully_qualified                { $$ = $1; }\r\n    | identifier_ex                                         { $$ = array(null, $1); }\r\n;\r\n\r\nmethod_body:\r\n      ';' /* abstract method */                             { $$ = null; }\r\n    | block_or_error                                        { $$ = $1; }\r\n;\r\n\r\nvariable_modifiers:\r\n      non_empty_member_modifiers                            { $$ = $1; }\r\n    | T_VAR                                                 { $$ = 0; }\r\n;\r\n\r\nmethod_modifiers:\r\n      /* empty */                                           { $$ = 0; }\r\n    | non_empty_member_modifiers                            { $$ = $1; }\r\n;\r\n\r\nnon_empty_member_modifiers:\r\n      member_modifier                                       { $$ = $1; }\r\n    | non_empty_member_modifiers member_modifier            { $this->checkModifier($1, $2, #2); $$ = $1 | $2; }\r\n;\r\n\r\nmember_modifier:\r\n      T_PUBLIC                                              { $$ = Stmt\\Class_::MODIFIER_PUBLIC; }\r\n    | T_PROTECTED                                           { $$ = Stmt\\Class_::MODIFIER_PROTECTED; }\r\n    | T_PRIVATE                                             { $$ = Stmt\\Class_::MODIFIER_PRIVATE; }\r\n    | T_STATIC                                              { $$ = Stmt\\Class_::MODIFIER_STATIC; }\r\n    | T_ABSTRACT                                            { $$ = Stmt\\Class_::MODIFIER_ABSTRACT; }\r\n    | T_FINAL                                               { $$ = Stmt\\Class_::MODIFIER_FINAL; }\r\n;\r\n\r\nproperty_declaration_list:\r\n      non_empty_property_declaration_list no_comma          { $$ = $1; }\r\n;\r\n\r\nnon_empty_property_declaration_list:\r\n      property_declaration                                  { init($1); }\r\n    | non_empty_property_declaration_list ',' property_declaration\r\n          { push($1, $3); }\r\n;\r\n\r\nproperty_decl_name:\r\n      T_VARIABLE                                            { $$ = Node\\VarLikeIdentifier[parseVar($1)]; }\r\n;\r\n\r\nproperty_declaration:\r\n      property_decl_name                                    { $$ = Stmt\\PropertyProperty[$1, null]; }\r\n    | property_decl_name '=' expr                           { $$ = Stmt\\PropertyProperty[$1, $3]; }\r\n;\r\n\r\nexpr_list_forbid_comma:\r\n      non_empty_expr_list no_comma                          { $$ = $1; }\r\n;\r\n\r\nexpr_list_allow_comma:\r\n      non_empty_expr_list optional_comma                    { $$ = $1; }\r\n;\r\n\r\nnon_empty_expr_list:\r\n      non_empty_expr_list ',' expr                          { push($1, $3); }\r\n    | expr                                                  { init($1); }\r\n;\r\n\r\nfor_expr:\r\n      /* empty */                                           { $$ = array(); }\r\n    | expr_list_forbid_comma                                { $$ = $1; }\r\n;\r\n\r\nexpr:\r\n      variable                                              { $$ = $1; }\r\n    | list_expr '=' expr                                    { $$ = Expr\\Assign[$1, $3]; }\r\n    | array_short_syntax '=' expr                           { $$ = Expr\\Assign[$1, $3]; }\r\n    | variable '=' expr                                     { $$ = Expr\\Assign[$1, $3]; }\r\n    | variable '=' '&' variable                             { $$ = Expr\\AssignRef[$1, $4]; }\r\n    | new_expr                                              { $$ = $1; }\r\n    | match                                                 { $$ = $1; }\r\n    | T_CLONE expr                                          { $$ = Expr\\Clone_[$2]; }\r\n    | variable T_PLUS_EQUAL expr                            { $$ = Expr\\AssignOp\\Plus      [$1, $3]; }\r\n    | variable T_MINUS_EQUAL expr                           { $$ = Expr\\AssignOp\\Minus     [$1, $3]; }\r\n    | variable T_MUL_EQUAL expr                             { $$ = Expr\\AssignOp\\Mul       [$1, $3]; }\r\n    | variable T_DIV_EQUAL expr                             { $$ = Expr\\AssignOp\\Div       [$1, $3]; }\r\n    | variable T_CONCAT_EQUAL expr                          { $$ = Expr\\AssignOp\\Concat    [$1, $3]; }\r\n    | variable T_MOD_EQUAL expr                             { $$ = Expr\\AssignOp\\Mod       [$1, $3]; }\r\n    | variable T_AND_EQUAL expr                             { $$ = Expr\\AssignOp\\BitwiseAnd[$1, $3]; }\r\n    | variable T_OR_EQUAL expr                              { $$ = Expr\\AssignOp\\BitwiseOr [$1, $3]; }\r\n    | variable T_XOR_EQUAL expr                             { $$ = Expr\\AssignOp\\BitwiseXor[$1, $3]; }\r\n    | variable T_SL_EQUAL expr                              { $$ = Expr\\AssignOp\\ShiftLeft [$1, $3]; }\r\n    | variable T_SR_EQUAL expr                              { $$ = Expr\\AssignOp\\ShiftRight[$1, $3]; }\r\n    | variable T_POW_EQUAL expr                             { $$ = Expr\\AssignOp\\Pow       [$1, $3]; }\r\n    | variable T_COALESCE_EQUAL expr                        { $$ = Expr\\AssignOp\\Coalesce  [$1, $3]; }\r\n    | variable T_INC                                        { $$ = Expr\\PostInc[$1]; }\r\n    | T_INC variable                                        { $$ = Expr\\PreInc [$2]; }\r\n    | variable T_DEC                                        { $$ = Expr\\PostDec[$1]; }\r\n    | T_DEC variable                                        { $$ = Expr\\PreDec [$2]; }\r\n    | expr T_BOOLEAN_OR expr                                { $$ = Expr\\BinaryOp\\BooleanOr [$1, $3]; }\r\n    | expr T_BOOLEAN_AND expr                               { $$ = Expr\\BinaryOp\\BooleanAnd[$1, $3]; }\r\n    | expr T_LOGICAL_OR expr                                { $$ = Expr\\BinaryOp\\LogicalOr [$1, $3]; }\r\n    | expr T_LOGICAL_AND expr                               { $$ = Expr\\BinaryOp\\LogicalAnd[$1, $3]; }\r\n    | expr T_LOGICAL_XOR expr                               { $$ = Expr\\BinaryOp\\LogicalXor[$1, $3]; }\r\n    | expr '|' expr                                         { $$ = Expr\\BinaryOp\\BitwiseOr [$1, $3]; }\r\n    | expr '&' expr                                         { $$ = Expr\\BinaryOp\\BitwiseAnd[$1, $3]; }\r\n    | expr '^' expr                                         { $$ = Expr\\BinaryOp\\BitwiseXor[$1, $3]; }\r\n    | expr '.' expr                                         { $$ = Expr\\BinaryOp\\Concat    [$1, $3]; }\r\n    | expr '+' expr                                         { $$ = Expr\\BinaryOp\\Plus      [$1, $3]; }\r\n    | expr '-' expr                                         { $$ = Expr\\BinaryOp\\Minus     [$1, $3]; }\r\n    | expr '*' expr                                         { $$ = Expr\\BinaryOp\\Mul       [$1, $3]; }\r\n    | expr '/' expr                                         { $$ = Expr\\BinaryOp\\Div       [$1, $3]; }\r\n    | expr '%' expr                                         { $$ = Expr\\BinaryOp\\Mod       [$1, $3]; }\r\n    | expr T_SL expr                                        { $$ = Expr\\BinaryOp\\ShiftLeft [$1, $3]; }\r\n    | expr T_SR expr                                        { $$ = Expr\\BinaryOp\\ShiftRight[$1, $3]; }\r\n    | expr T_POW expr                                       { $$ = Expr\\BinaryOp\\Pow       [$1, $3]; }\r\n    | '+' expr %prec T_INC                                  { $$ = Expr\\UnaryPlus [$2]; }\r\n    | '-' expr %prec T_INC                                  { $$ = Expr\\UnaryMinus[$2]; }\r\n    | '!' expr                                              { $$ = Expr\\BooleanNot[$2]; }\r\n    | '~' expr                                              { $$ = Expr\\BitwiseNot[$2]; }\r\n    | expr T_IS_IDENTICAL expr                              { $$ = Expr\\BinaryOp\\Identical     [$1, $3]; }\r\n    | expr T_IS_NOT_IDENTICAL expr                          { $$ = Expr\\BinaryOp\\NotIdentical  [$1, $3]; }\r\n    | expr T_IS_EQUAL expr                                  { $$ = Expr\\BinaryOp\\Equal         [$1, $3]; }\r\n    | expr T_IS_NOT_EQUAL expr                              { $$ = Expr\\BinaryOp\\NotEqual      [$1, $3]; }\r\n    | expr T_SPACESHIP expr                                 { $$ = Expr\\BinaryOp\\Spaceship     [$1, $3]; }\r\n    | expr '<' expr                                         { $$ = Expr\\BinaryOp\\Smaller       [$1, $3]; }\r\n    | expr T_IS_SMALLER_OR_EQUAL expr                       { $$ = Expr\\BinaryOp\\SmallerOrEqual[$1, $3]; }\r\n    | expr '>' expr                                         { $$ = Expr\\BinaryOp\\Greater       [$1, $3]; }\r\n    | expr T_IS_GREATER_OR_EQUAL expr                       { $$ = Expr\\BinaryOp\\GreaterOrEqual[$1, $3]; }\r\n    | expr T_INSTANCEOF class_name_reference                { $$ = Expr\\Instanceof_[$1, $3]; }\r\n    | '(' expr ')'                                          { $$ = $2; }\r\n    | expr '?' expr ':' expr                                { $$ = Expr\\Ternary[$1, $3,   $5]; }\r\n    | expr '?' ':' expr                                     { $$ = Expr\\Ternary[$1, null, $4]; }\r\n    | expr T_COALESCE expr                                  { $$ = Expr\\BinaryOp\\Coalesce[$1, $3]; }\r\n    | T_ISSET '(' expr_list_allow_comma ')'                 { $$ = Expr\\Isset_[$3]; }\r\n    | T_EMPTY '(' expr ')'                                  { $$ = Expr\\Empty_[$3]; }\r\n    | T_INCLUDE expr                                        { $$ = Expr\\Include_[$2, Expr\\Include_::TYPE_INCLUDE]; }\r\n    | T_INCLUDE_ONCE expr                                   { $$ = Expr\\Include_[$2, Expr\\Include_::TYPE_INCLUDE_ONCE]; }\r\n    | T_EVAL '(' expr ')'                                   { $$ = Expr\\Eval_[$3]; }\r\n    | T_REQUIRE expr                                        { $$ = Expr\\Include_[$2, Expr\\Include_::TYPE_REQUIRE]; }\r\n    | T_REQUIRE_ONCE expr                                   { $$ = Expr\\Include_[$2, Expr\\Include_::TYPE_REQUIRE_ONCE]; }\r\n    | T_INT_CAST expr                                       { $$ = Expr\\Cast\\Int_    [$2]; }\r\n    | T_DOUBLE_CAST expr\r\n          { $attrs = attributes();\r\n            $attrs['kind'] = $this->getFloatCastKind($1);\r\n            $$ = new Expr\\Cast\\Double($2, $attrs); }\r\n    | T_STRING_CAST expr                                    { $$ = Expr\\Cast\\String_ [$2]; }\r\n    | T_ARRAY_CAST expr                                     { $$ = Expr\\Cast\\Array_  [$2]; }\r\n    | T_OBJECT_CAST expr                                    { $$ = Expr\\Cast\\Object_ [$2]; }\r\n    | T_BOOL_CAST expr                                      { $$ = Expr\\Cast\\Bool_   [$2]; }\r\n    | T_UNSET_CAST expr                                     { $$ = Expr\\Cast\\Unset_  [$2]; }\r\n    | T_EXIT exit_expr\r\n          { $attrs = attributes();\r\n            $attrs['kind'] = strtolower($1) === 'exit' ? Expr\\Exit_::KIND_EXIT : Expr\\Exit_::KIND_DIE;\r\n            $$ = new Expr\\Exit_($2, $attrs); }\r\n    | '@' expr                                              { $$ = Expr\\ErrorSuppress[$2]; }\r\n    | scalar                                                { $$ = $1; }\r\n    | '`' backticks_expr '`'                                { $$ = Expr\\ShellExec[$2]; }\r\n    | T_PRINT expr                                          { $$ = Expr\\Print_[$2]; }\r\n    | T_YIELD                                               { $$ = Expr\\Yield_[null, null]; }\r\n    | T_YIELD expr                                          { $$ = Expr\\Yield_[$2, null]; }\r\n    | T_YIELD expr T_DOUBLE_ARROW expr                      { $$ = Expr\\Yield_[$4, $2]; }\r\n    | T_YIELD_FROM expr                                     { $$ = Expr\\YieldFrom[$2]; }\r\n    | T_THROW expr                                          { $$ = Expr\\Throw_[$2]; }\r\n\r\n    | T_FN optional_ref '(' parameter_list ')' optional_return_type T_DOUBLE_ARROW expr\r\n          { $$ = Expr\\ArrowFunction[['static' => false, 'byRef' => $2, 'params' => $4, 'returnType' => $6, 'expr' => $8, 'attrGroups' => []]]; }\r\n    | T_STATIC T_FN optional_ref '(' parameter_list ')' optional_return_type T_DOUBLE_ARROW expr\r\n          { $$ = Expr\\ArrowFunction[['static' => true, 'byRef' => $3, 'params' => $5, 'returnType' => $7, 'expr' => $9, 'attrGroups' => []]]; }\r\n    | T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type block_or_error\r\n          { $$ = Expr\\Closure[['static' => false, 'byRef' => $2, 'params' => $4, 'uses' => $6, 'returnType' => $7, 'stmts' => $8, 'attrGroups' => []]]; }\r\n    | T_STATIC T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type       block_or_error\r\n          { $$ = Expr\\Closure[['static' => true, 'byRef' => $3, 'params' => $5, 'uses' => $7, 'returnType' => $8, 'stmts' => $9, 'attrGroups' => []]]; }\r\n\r\n    | attributes T_FN optional_ref '(' parameter_list ')' optional_return_type T_DOUBLE_ARROW expr\r\n          { $$ = Expr\\ArrowFunction[['static' => false, 'byRef' => $3, 'params' => $5, 'returnType' => $7, 'expr' => $9, 'attrGroups' => $1]]; }\r\n    | attributes T_STATIC T_FN optional_ref '(' parameter_list ')' optional_return_type T_DOUBLE_ARROW expr\r\n          { $$ = Expr\\ArrowFunction[['static' => true, 'byRef' => $4, 'params' => $6, 'returnType' => $8, 'expr' => $10, 'attrGroups' => $1]]; }\r\n    | attributes T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type block_or_error\r\n          { $$ = Expr\\Closure[['static' => false, 'byRef' => $3, 'params' => $5, 'uses' => $7, 'returnType' => $8, 'stmts' => $9, 'attrGroups' => $1]]; }\r\n    | attributes T_STATIC T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type       block_or_error\r\n          { $$ = Expr\\Closure[['static' => true, 'byRef' => $4, 'params' => $6, 'uses' => $8, 'returnType' => $9, 'stmts' => $10, 'attrGroups' => $1]]; }\r\n;\r\n\r\nanonymous_class:\r\n      optional_attributes T_CLASS ctor_arguments extends_from implements_list '{' class_statement_list '}'\r\n          { $$ = array(Stmt\\Class_[null, ['type' => 0, 'extends' => $4, 'implements' => $5, 'stmts' => $7, 'attrGroups' => $1]], $3);\r\n            $this->checkClass($$[0], -1); }\r\n;\r\n\r\nnew_expr:\r\n      T_NEW class_name_reference ctor_arguments             { $$ = Expr\\New_[$2, $3]; }\r\n    | T_NEW anonymous_class\r\n          { list($class, $ctorArgs) = $2; $$ = Expr\\New_[$class, $ctorArgs]; }\r\n;\r\n\r\nlexical_vars:\r\n      /* empty */                                           { $$ = array(); }\r\n    | T_USE '(' lexical_var_list ')'                        { $$ = $3; }\r\n;\r\n\r\nlexical_var_list:\r\n      non_empty_lexical_var_list optional_comma             { $$ = $1; }\r\n;\r\n\r\nnon_empty_lexical_var_list:\r\n      lexical_var                                           { init($1); }\r\n    | non_empty_lexical_var_list ',' lexical_var            { push($1, $3); }\r\n;\r\n\r\nlexical_var:\r\n      optional_ref plain_variable                           { $$ = Expr\\ClosureUse[$2, $1]; }\r\n;\r\n\r\nfunction_call:\r\n      name argument_list                                    { $$ = Expr\\FuncCall[$1, $2]; }\r\n    | callable_expr argument_list                           { $$ = Expr\\FuncCall[$1, $2]; }\r\n    | class_name_or_var T_PAAMAYIM_NEKUDOTAYIM member_name argument_list\r\n          { $$ = Expr\\StaticCall[$1, $3, $4]; }\r\n;\r\n\r\nclass_name:\r\n      T_STATIC                                              { $$ = Name[$1]; }\r\n    | name                                                  { $$ = $1; }\r\n;\r\n\r\nname:\r\n      T_STRING                                              { $$ = Name[$1]; }\r\n    | T_NAME_QUALIFIED                                      { $$ = Name[$1]; }\r\n    | T_NAME_FULLY_QUALIFIED                                { $$ = Name\\FullyQualified[substr($1, 1)]; }\r\n    | T_NAME_RELATIVE                                       { $$ = Name\\Relative[substr($1, 10)]; }\r\n;\r\n\r\nclass_name_reference:\r\n      class_name                                            { $$ = $1; }\r\n    | new_variable                                          { $$ = $1; }\r\n    | '(' expr ')'                                          { $$ = $2; }\r\n    | error                                                 { $$ = Expr\\Error[]; $this->errorState = 2; }\r\n;\r\n\r\nclass_name_or_var:\r\n      class_name                                            { $$ = $1; }\r\n    | fully_dereferencable                                  { $$ = $1; }\r\n;\r\n\r\nexit_expr:\r\n      /* empty */                                           { $$ = null; }\r\n    | '(' optional_expr ')'                                 { $$ = $2; }\r\n;\r\n\r\nbackticks_expr:\r\n      /* empty */                                           { $$ = array(); }\r\n    | T_ENCAPSED_AND_WHITESPACE\r\n          { $$ = array(Scalar\\EncapsedStringPart[Scalar\\String_::parseEscapeSequences($1, '`')]); }\r\n    | encaps_list                                           { parseEncapsed($1, '`', true); $$ = $1; }\r\n;\r\n\r\nctor_arguments:\r\n      /* empty */                                           { $$ = array(); }\r\n    | argument_list                                         { $$ = $1; }\r\n;\r\n\r\nconstant:\r\n      name                                                  { $$ = Expr\\ConstFetch[$1]; }\r\n    | T_LINE                                                { $$ = Scalar\\MagicConst\\Line[]; }\r\n    | T_FILE                                                { $$ = Scalar\\MagicConst\\File[]; }\r\n    | T_DIR                                                 { $$ = Scalar\\MagicConst\\Dir[]; }\r\n    | T_CLASS_C                                             { $$ = Scalar\\MagicConst\\Class_[]; }\r\n    | T_TRAIT_C                                             { $$ = Scalar\\MagicConst\\Trait_[]; }\r\n    | T_METHOD_C                                            { $$ = Scalar\\MagicConst\\Method[]; }\r\n    | T_FUNC_C                                              { $$ = Scalar\\MagicConst\\Function_[]; }\r\n    | T_NS_C                                                { $$ = Scalar\\MagicConst\\Namespace_[]; }\r\n;\r\n\r\nclass_constant:\r\n      class_name_or_var T_PAAMAYIM_NEKUDOTAYIM identifier_ex\r\n          { $$ = Expr\\ClassConstFetch[$1, $3]; }\r\n    /* We interpret an isolated FOO:: as an unfinished class constant fetch. It could also be\r\n       an unfinished static property fetch or unfinished scoped call. */\r\n    | class_name_or_var T_PAAMAYIM_NEKUDOTAYIM error\r\n          { $$ = Expr\\ClassConstFetch[$1, new Expr\\Error(stackAttributes(#3))]; $this->errorState = 2; }\r\n;\r\n\r\narray_short_syntax:\r\n      '[' array_pair_list ']'\r\n          { $attrs = attributes(); $attrs['kind'] = Expr\\Array_::KIND_SHORT;\r\n            $$ = new Expr\\Array_($2, $attrs); }\r\n;\r\n\r\ndereferencable_scalar:\r\n      T_ARRAY '(' array_pair_list ')'\r\n          { $attrs = attributes(); $attrs['kind'] = Expr\\Array_::KIND_LONG;\r\n            $$ = new Expr\\Array_($3, $attrs); }\r\n    | array_short_syntax                                    { $$ = $1; }\r\n    | T_CONSTANT_ENCAPSED_STRING\r\n          { $attrs = attributes(); $attrs['kind'] = strKind($1);\r\n            $$ = new Scalar\\String_(Scalar\\String_::parse($1), $attrs); }\r\n    | '\"' encaps_list '\"'\r\n          { $attrs = attributes(); $attrs['kind'] = Scalar\\String_::KIND_DOUBLE_QUOTED;\r\n            parseEncapsed($2, '\"', true); $$ = new Scalar\\Encapsed($2, $attrs); }\r\n;\r\n\r\nscalar:\r\n      T_LNUMBER                                             { $$ = $this->parseLNumber($1, attributes()); }\r\n    | T_DNUMBER                                             { $$ = Scalar\\DNumber[Scalar\\DNumber::parse($1)]; }\r\n    | dereferencable_scalar                                 { $$ = $1; }\r\n    | constant                                              { $$ = $1; }\r\n    | class_constant                                        { $$ = $1; }\r\n    | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC\r\n          { $$ = $this->parseDocString($1, $2, $3, attributes(), stackAttributes(#3), true); }\r\n    | T_START_HEREDOC T_END_HEREDOC\r\n          { $$ = $this->parseDocString($1, '', $2, attributes(), stackAttributes(#2), true); }\r\n    | T_START_HEREDOC encaps_list T_END_HEREDOC\r\n          { $$ = $this->parseDocString($1, $2, $3, attributes(), stackAttributes(#3), true); }\r\n;\r\n\r\noptional_expr:\r\n      /* empty */                                           { $$ = null; }\r\n    | expr                                                  { $$ = $1; }\r\n;\r\n\r\nfully_dereferencable:\r\n      variable                                              { $$ = $1; }\r\n    | '(' expr ')'                                          { $$ = $2; }\r\n    | dereferencable_scalar                                 { $$ = $1; }\r\n    | class_constant                                        { $$ = $1; }\r\n;\r\n\r\narray_object_dereferencable:\r\n      fully_dereferencable                                  { $$ = $1; }\r\n    | constant                                              { $$ = $1; }\r\n;\r\n\r\ncallable_expr:\r\n      callable_variable                                     { $$ = $1; }\r\n    | '(' expr ')'                                          { $$ = $2; }\r\n    | dereferencable_scalar                                 { $$ = $1; }\r\n;\r\n\r\ncallable_variable:\r\n      simple_variable                                       { $$ = Expr\\Variable[$1]; }\r\n    | array_object_dereferencable '[' optional_expr ']'     { $$ = Expr\\ArrayDimFetch[$1, $3]; }\r\n    | array_object_dereferencable '{' expr '}'              { $$ = Expr\\ArrayDimFetch[$1, $3]; }\r\n    | function_call                                         { $$ = $1; }\r\n    | array_object_dereferencable T_OBJECT_OPERATOR property_name argument_list\r\n          { $$ = Expr\\MethodCall[$1, $3, $4]; }\r\n    | array_object_dereferencable T_NULLSAFE_OBJECT_OPERATOR property_name argument_list\r\n          { $$ = Expr\\NullsafeMethodCall[$1, $3, $4]; }\r\n;\r\n\r\noptional_plain_variable:\r\n      /* empty */                                           { $$ = null; }\r\n    | plain_variable                                        { $$ = $1; }\r\n;\r\n\r\nvariable:\r\n      callable_variable                                     { $$ = $1; }\r\n    | static_member                                         { $$ = $1; }\r\n    | array_object_dereferencable T_OBJECT_OPERATOR property_name\r\n          { $$ = Expr\\PropertyFetch[$1, $3]; }\r\n    | array_object_dereferencable T_NULLSAFE_OBJECT_OPERATOR property_name\r\n          { $$ = Expr\\NullsafePropertyFetch[$1, $3]; }\r\n;\r\n\r\nsimple_variable:\r\n      T_VARIABLE                                            { $$ = parseVar($1); }\r\n    | '$' '{' expr '}'                                      { $$ = $3; }\r\n    | '$' simple_variable                                   { $$ = Expr\\Variable[$2]; }\r\n    | '$' error                                             { $$ = Expr\\Error[]; $this->errorState = 2; }\r\n;\r\n\r\nstatic_member_prop_name:\r\n      simple_variable\r\n          { $var = $1; $$ = \\is_string($var) ? Node\\VarLikeIdentifier[$var] : $var; }\r\n;\r\n\r\nstatic_member:\r\n      class_name_or_var T_PAAMAYIM_NEKUDOTAYIM static_member_prop_name\r\n          { $$ = Expr\\StaticPropertyFetch[$1, $3]; }\r\n;\r\n\r\nnew_variable:\r\n      simple_variable                                       { $$ = Expr\\Variable[$1]; }\r\n    | new_variable '[' optional_expr ']'                    { $$ = Expr\\ArrayDimFetch[$1, $3]; }\r\n    | new_variable '{' expr '}'                             { $$ = Expr\\ArrayDimFetch[$1, $3]; }\r\n    | new_variable T_OBJECT_OPERATOR property_name          { $$ = Expr\\PropertyFetch[$1, $3]; }\r\n    | new_variable T_NULLSAFE_OBJECT_OPERATOR property_name { $$ = Expr\\NullsafePropertyFetch[$1, $3]; }\r\n    | class_name T_PAAMAYIM_NEKUDOTAYIM static_member_prop_name\r\n          { $$ = Expr\\StaticPropertyFetch[$1, $3]; }\r\n    | new_variable T_PAAMAYIM_NEKUDOTAYIM static_member_prop_name\r\n          { $$ = Expr\\StaticPropertyFetch[$1, $3]; }\r\n;\r\n\r\nmember_name:\r\n      identifier_ex                                         { $$ = $1; }\r\n    | '{' expr '}'                                          { $$ = $2; }\r\n    | simple_variable                                       { $$ = Expr\\Variable[$1]; }\r\n;\r\n\r\nproperty_name:\r\n      identifier                                            { $$ = $1; }\r\n    | '{' expr '}'                                          { $$ = $2; }\r\n    | simple_variable                                       { $$ = Expr\\Variable[$1]; }\r\n    | error                                                 { $$ = Expr\\Error[]; $this->errorState = 2; }\r\n;\r\n\r\nlist_expr:\r\n      T_LIST '(' inner_array_pair_list ')'                  { $$ = Expr\\List_[$3]; }\r\n;\r\n\r\narray_pair_list:\r\n      inner_array_pair_list\r\n          { $$ = $1; $end = count($$)-1; if ($$[$end] === null) array_pop($$); }\r\n;\r\n\r\ncomma_or_error:\r\n      ','\r\n    | error\r\n          { /* do nothing -- prevent default action of $$=$1. See #551. */ }\r\n;\r\n\r\ninner_array_pair_list:\r\n      inner_array_pair_list comma_or_error array_pair       { push($1, $3); }\r\n    | array_pair                                            { init($1); }\r\n;\r\n\r\narray_pair:\r\n      expr                                                  { $$ = Expr\\ArrayItem[$1, null, false]; }\r\n    | '&' variable                                          { $$ = Expr\\ArrayItem[$2, null, true]; }\r\n    | list_expr                                             { $$ = Expr\\ArrayItem[$1, null, false]; }\r\n    | expr T_DOUBLE_ARROW expr                              { $$ = Expr\\ArrayItem[$3, $1,   false]; }\r\n    | expr T_DOUBLE_ARROW '&' variable                      { $$ = Expr\\ArrayItem[$4, $1,   true]; }\r\n    | expr T_DOUBLE_ARROW list_expr                         { $$ = Expr\\ArrayItem[$3, $1,   false]; }\r\n    | T_ELLIPSIS expr                                       { $$ = Expr\\ArrayItem[$2, null, false, attributes(), true]; }\r\n    | /* empty */                                           { $$ = null; }\r\n;\r\n\r\nencaps_list:\r\n      encaps_list encaps_var                                { push($1, $2); }\r\n    | encaps_list encaps_string_part                        { push($1, $2); }\r\n    | encaps_var                                            { init($1); }\r\n    | encaps_string_part encaps_var                         { init($1, $2); }\r\n;\r\n\r\nencaps_string_part:\r\n      T_ENCAPSED_AND_WHITESPACE                             { $$ = Scalar\\EncapsedStringPart[$1]; }\r\n;\r\n\r\nencaps_str_varname:\r\n      T_STRING_VARNAME                                      { $$ = Expr\\Variable[$1]; }\r\n;\r\n\r\nencaps_var:\r\n      plain_variable                                        { $$ = $1; }\r\n    | plain_variable '[' encaps_var_offset ']'              { $$ = Expr\\ArrayDimFetch[$1, $3]; }\r\n    | plain_variable T_OBJECT_OPERATOR identifier           { $$ = Expr\\PropertyFetch[$1, $3]; }\r\n    | plain_variable T_NULLSAFE_OBJECT_OPERATOR identifier  { $$ = Expr\\NullsafePropertyFetch[$1, $3]; }\r\n    | T_DOLLAR_OPEN_CURLY_BRACES expr '}'                   { $$ = Expr\\Variable[$2]; }\r\n    | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'       { $$ = Expr\\Variable[$2]; }\r\n    | T_DOLLAR_OPEN_CURLY_BRACES encaps_str_varname '[' expr ']' '}'\r\n          { $$ = Expr\\ArrayDimFetch[$2, $4]; }\r\n    | T_CURLY_OPEN variable '}'                             { $$ = $2; }\r\n;\r\n\r\nencaps_var_offset:\r\n      T_STRING                                              { $$ = Scalar\\String_[$1]; }\r\n    | T_NUM_STRING                                          { $$ = $this->parseNumString($1, attributes()); }\r\n    | '-' T_NUM_STRING                                      { $$ = $this->parseNumString('-' . $2, attributes()); }\r\n    | plain_variable                                        { $$ = $1; }\r\n;\r\n\r\n%%\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/nikic/php-parser/grammar/php7.y b/vendor/nikic/php-parser/grammar/php7.y
--- a/vendor/nikic/php-parser/grammar/php7.y	
+++ b/vendor/nikic/php-parser/grammar/php7.y	
@@ -348,10 +348,7 @@
 ;
 
 class_declaration_statement:
-      class_entry_type identifier extends_from implements_list '{' class_statement_list '}'
-          { $$ = Stmt\Class_[$2, ['type' => $1, 'extends' => $3, 'implements' => $4, 'stmts' => $6, 'attrGroups' => []]];
-            $this->checkClass($$, #2); }
-    | attributes class_entry_type identifier extends_from implements_list '{' class_statement_list '}'
+      optional_attributes class_entry_type identifier extends_from implements_list '{' class_statement_list '}'
           { $$ = Stmt\Class_[$3, ['type' => $2, 'extends' => $4, 'implements' => $5, 'stmts' => $7, 'attrGroups' => $1]];
             $this->checkClass($$, #3); }
     | optional_attributes T_INTERFACE identifier interface_extends_list '{' class_statement_list '}'
@@ -601,7 +598,7 @@
 ;
 
 global_var:
-      simple_variable                                       { $$ = Expr\Variable[$1]; }
+      simple_variable                                       { $$ = $1; }
 ;
 
 static_var_list:
@@ -1007,7 +1004,7 @@
 ;
 
 callable_variable:
-      simple_variable                                       { $$ = Expr\Variable[$1]; }
+      simple_variable                                       { $$ = $1; }
     | array_object_dereferencable '[' optional_expr ']'     { $$ = Expr\ArrayDimFetch[$1, $3]; }
     | array_object_dereferencable '{' expr '}'              { $$ = Expr\ArrayDimFetch[$1, $3]; }
     | function_call                                         { $$ = $1; }
@@ -1032,15 +1029,15 @@
 ;
 
 simple_variable:
-      T_VARIABLE                                            { $$ = parseVar($1); }
-    | '$' '{' expr '}'                                      { $$ = $3; }
+      plain_variable                                        { $$ = $1; }
+    | '$' '{' expr '}'                                      { $$ = Expr\Variable[$3]; }
     | '$' simple_variable                                   { $$ = Expr\Variable[$2]; }
-    | '$' error                                             { $$ = Expr\Error[]; $this->errorState = 2; }
+    | '$' error                                             { $$ = Expr\Variable[Expr\Error[]]; $this->errorState = 2; }
 ;
 
 static_member_prop_name:
       simple_variable
-          { $var = $1; $$ = \is_string($var) ? Node\VarLikeIdentifier[$var] : $var; }
+          { $var = $1->name; $$ = \is_string($var) ? Node\VarLikeIdentifier[$var] : $var; }
 ;
 
 static_member:
@@ -1049,7 +1046,7 @@
 ;
 
 new_variable:
-      simple_variable                                       { $$ = Expr\Variable[$1]; }
+      simple_variable                                       { $$ = $1; }
     | new_variable '[' optional_expr ']'                    { $$ = Expr\ArrayDimFetch[$1, $3]; }
     | new_variable '{' expr '}'                             { $$ = Expr\ArrayDimFetch[$1, $3]; }
     | new_variable T_OBJECT_OPERATOR property_name          { $$ = Expr\PropertyFetch[$1, $3]; }
@@ -1063,13 +1060,13 @@
 member_name:
       identifier_ex                                         { $$ = $1; }
     | '{' expr '}'                                          { $$ = $2; }
-    | simple_variable                                       { $$ = Expr\Variable[$1]; }
+    | simple_variable                                       { $$ = $1; }
 ;
 
 property_name:
       identifier                                            { $$ = $1; }
     | '{' expr '}'                                          { $$ = $2; }
-    | simple_variable                                       { $$ = Expr\Variable[$1]; }
+    | simple_variable                                       { $$ = $1; }
     | error                                                 { $$ = Expr\Error[]; $this->errorState = 2; }
 ;
 
Index: app/Helper/system.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\n\r\n/**\r\n * Created by PhpStorm.\r\n * UserRequest: mohammedsobhei\r\n * Date: 5/12/17\r\n * Time: 2:50 PM\r\n */\r\n\r\nfunction generateVerificationCode($digits = 6)\r\n{\r\n    $i = 0; //counter\r\n    $pin = \"\"; //our default pin is blank.\r\n    while ($i < $digits) {\r\n        //generate a random number between 0 and 9.\r\n        $pin .= mt_rand(0, 9);\r\n        $i++;\r\n    }\r\n    return $pin;\r\n}\r\n\r\nfunction response_api($status, $statusCode, $message = null, $object = null, $page_count = null, $page = null, $count = null, $errors = null, $another_data = null)\r\n{\r\n\r\n    $message = isset($message) ? $message : message($statusCode);\r\n    $error = ['status' => false, 'statusCode' => $statusCode, 'message' => $message];\r\n    $success = ['status' => true, 'statusCode' => $statusCode, 'message' => $message];\r\n\r\n    if ($status && isset($object)) {\r\n        if (isset($page_count) && isset($page)) {\r\n            if (isset($another_data))\r\n                $success['items'] = ['info' => $another_data, 'data' => $object, 'total_pages' => $page_count, 'current_page' => $page + 1, 'total_records' => $count];\r\n            else\r\n                $success['items'] = ['data' => $object, 'total_pages' => $page_count, 'current_page' => $page + 1, 'total_records' => $count];\r\n        } else\r\n            $success['items'] = $object;\r\n\r\n    } else if (!$status && isset($errors))\r\n        $error['errors'] = $errors;\r\n    else if (isset($object) || (is_array($object) && empty($object)))\r\n        $error['items'] = $object;\r\n\r\n    if (isset($another_data))\r\n        foreach ($another_data as $key => $value)\r\n            $success [$key] = $value;\r\n    $response = ($status) ? $success : $error;\r\n    return response()->json($response);\r\n}\r\n\r\n\r\nfunction authAdmin()\r\n{\r\n    if (auth()->guard('admin')->check())\r\n        return auth()->guard('admin')->user();\r\n    return null;\r\n}\r\n\r\nfunction user()\r\n{\r\n    if (auth()->check())\r\n        return auth()->user();\r\n    return null;\r\n}\r\n\r\nfunction admin_dashboard_url()\r\n{\r\n    return '/admin/home';\r\n}\r\n\r\nfunction empObj()\r\n{\r\n    return new stdClass();\r\n}\r\n\r\nfunction modals($page)\r\n{\r\n    return 'admin.modals.' . $page;\r\n}\r\n\r\nfunction assets($folder)\r\n{\r\n    return url('assets/' . $folder . '/assets');\r\n}\r\n\r\nfunction layouts($folder)\r\n{\r\n    return $folder . '.layout';\r\n}\r\n\r\nfunction dashboard()\r\n{\r\n    return 'Dashboard';\r\n}\r\n\r\nfunction admin_vw()\r\n{\r\n    return 'admin';\r\n}\r\n\r\nfunction admin_web_url()\r\n{\r\n    return 'admin/web';\r\n}\r\n\r\nfunction admin_admins_url()\r\n{\r\n    return 'admin/admins';\r\n}\r\nfunction admin_admins_vw()\r\n{\r\n    return admin_vw() . '.admins';\r\n}\r\n\r\nfunction admin_subscriptions_management_url()\r\n{\r\n    return 'admin/subscriptions_management';\r\n}\r\nfunction admin_subscriptions_management_vw()\r\n{\r\n    return admin_vw() . '.subscriptions_management';\r\n}\r\n\r\n\r\nfunction admin_home_url()\r\n{\r\n    return 'admin/home';\r\n}\r\n\r\nfunction admin_users_vw()\r\n{\r\n    return admin_vw() . '.users';\r\n}\r\n\r\n\r\nfunction admin_users_url()\r\n{\r\n    return admin_vw() . '/users';\r\n}\r\n\r\n\r\nfunction admin_services_vw()\r\n{\r\n    return admin_vw() . '.services';\r\n}\r\n\r\nfunction admin_services_url()\r\n{\r\n    return admin_vw() . '/services';\r\n}\r\n\r\nfunction admin_products_vw()\r\n{\r\n    return admin_vw() . '.products';\r\n}\r\n\r\n\r\nfunction admin_products_url()\r\n{\r\n    return admin_vw() . '/products';\r\n}\r\nfunction admin_vendors_vw()\r\n{\r\n    return admin_vw() . '.vendors';\r\n}\r\n\r\n\r\nfunction admin_vendors_url()\r\n{\r\n    return admin_vw() . '/vendors';\r\n}\r\n\r\nfunction admin_mail_url()\r\n{\r\n    return admin_vw().'/mails';\r\n}\r\nfunction admin_mail_vw()\r\n{\r\n    return admin_vw() . '.mailVendors';\r\n}\r\n\r\nfunction admin_roles_url()\r\n{\r\n    return 'admin/roles';\r\n}\r\n\r\nfunction admin_roles_vw()\r\n{\r\n    return 'admin.roles';\r\n}\r\n\r\n\r\nfunction public_url()\r\n{\r\n    return url('public/');\r\n}\r\n\r\nfunction upload_url()\r\n{\r\n    return base_path() . '/public/upload';\r\n}\r\n\r\nfunction upload_assets()\r\n{\r\n    return url('/assets/upload');\r\n}\r\n\r\nfunction upload_storage()\r\n{\r\n    return storage_path('app');\r\n}\r\n\r\nfunction loader_icon()\r\n{\r\n    return url(assets('admin') . '/apps/img/preloader.gif');\r\n}\r\n\r\nfunction user_vw()\r\n{\r\n    return 'user';\r\n}\r\n\r\n\r\n\r\nfunction max_pagination($record = 10.0)\r\n{\r\n    return $record;\r\n}\r\n\r\nfunction admin_layout_vw()\r\n{\r\n    return 'admin.layout';\r\n}\r\n\r\n\r\nfunction site_layout_vw()\r\n{\r\n    return 'website.layout';\r\n}\r\nfunction site_home_vw()\r\n{\r\n    return 'website.home';\r\n}\r\n\r\nfunction notification_trans()\r\n{\r\n    return 'app.notification_message';\r\n}\r\n\r\n\r\nfunction message($status_code)\r\n{\r\n    switch ($status_code) {\r\n        case 200:\r\n            return __('app.success');\r\n        case 400:\r\n            return __('app.not_data_found');\r\n        case 401:\r\n            return __('app.invalid_token');\r\n        case 404:\r\n            return __('app.invalid_route');\r\n        case 422:\r\n            return __('app.client_input_error');//'Client input error.';\r\n        case 500:\r\n            return __('app.server_error');//'Something went wrong. Please try again later.';\r\n    }\r\n    return 'Sorry! You do not have permission.';\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Helper/system.php b/app/Helper/system.php
--- a/app/Helper/system.php	
+++ b/app/Helper/system.php	
@@ -143,7 +143,6 @@
 {
     return admin_vw() . '.services';
 }
-
 function admin_services_url()
 {
     return admin_vw() . '/services';
@@ -153,18 +152,15 @@
 {
     return admin_vw() . '.products';
 }
-
-
 function admin_products_url()
 {
     return admin_vw() . '/products';
 }
+
 function admin_vendors_vw()
 {
     return admin_vw() . '.vendors';
 }
-
-
 function admin_vendors_url()
 {
     return admin_vw() . '/vendors';
@@ -266,3 +262,7 @@
     }
     return 'Sorry! You do not have permission.';
 }
+function page_count($num_object, $page_size)
+{
+    return ceil($num_object / (doubleval($page_size)));
+}
Index: vendor/composer/installed.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[\r\n    {\r\n        \"name\": \"asm89/stack-cors\",\r\n        \"version\": \"v2.0.2\",\r\n        \"version_normalized\": \"2.0.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/asm89/stack-cors.git\",\r\n            \"reference\": \"8d8f88b3b3830916be94292c1fbce84433efb1aa\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/asm89/stack-cors/zipball/8d8f88b3b3830916be94292c1fbce84433efb1aa\",\r\n            \"reference\": \"8d8f88b3b3830916be94292c1fbce84433efb1aa\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.0|^8.0\",\r\n            \"symfony/http-foundation\": \"~2.7|~3.0|~4.0|~5.0\",\r\n            \"symfony/http-kernel\": \"~2.7|~3.0|~4.0|~5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^6|^7|^8|^9\",\r\n            \"squizlabs/php_codesniffer\": \"^3.5\"\r\n        },\r\n        \"time\": \"2020-10-29T16:03:21+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Asm89\\\\Stack\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Alexander\",\r\n                \"email\": \"iam.asm89@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Cross-origin resource sharing library and stack middleware\",\r\n        \"homepage\": \"https://github.com/asm89/stack-cors\",\r\n        \"keywords\": [\r\n            \"cors\",\r\n            \"stack\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"brick/math\",\r\n        \"version\": \"0.9.1\",\r\n        \"version_normalized\": \"0.9.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/brick/math.git\",\r\n            \"reference\": \"283a40c901101e66de7061bd359252c013dcc43c\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/brick/math/zipball/283a40c901101e66de7061bd359252c013dcc43c\",\r\n            \"reference\": \"283a40c901101e66de7061bd359252c013dcc43c\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-json\": \"*\",\r\n            \"php\": \"^7.1|^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"php-coveralls/php-coveralls\": \"^2.2\",\r\n            \"phpunit/phpunit\": \"^7.5.15|^8.5\",\r\n            \"vimeo/psalm\": \"^3.5\"\r\n        },\r\n        \"time\": \"2020-08-18T23:57:15+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Brick\\\\Math\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"description\": \"Arbitrary-precision arithmetic library\",\r\n        \"keywords\": [\r\n            \"Arbitrary-precision\",\r\n            \"BigInteger\",\r\n            \"BigRational\",\r\n            \"arithmetic\",\r\n            \"bigdecimal\",\r\n            \"bignum\",\r\n            \"brick\",\r\n            \"math\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"dnoegel/php-xdg-base-dir\",\r\n        \"version\": \"v0.1.1\",\r\n        \"version_normalized\": \"0.1.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/dnoegel/php-xdg-base-dir.git\",\r\n            \"reference\": \"8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd\",\r\n            \"reference\": \"8f8a6e48c5ecb0f991c2fdcf5f154a47d85f9ffd\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.3.2\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"~7.0|~6.0|~5.0|~4.8.35\"\r\n        },\r\n        \"time\": \"2019-12-04T15:06:13+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"XdgBaseDir\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"description\": \"implementation of xdg base directory specification for php\"\r\n    },\r\n    {\r\n        \"name\": \"doctrine/inflector\",\r\n        \"version\": \"2.0.3\",\r\n        \"version_normalized\": \"2.0.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/doctrine/inflector.git\",\r\n            \"reference\": \"9cf661f4eb38f7c881cac67c75ea9b00bf97b210\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/doctrine/inflector/zipball/9cf661f4eb38f7c881cac67c75ea9b00bf97b210\",\r\n            \"reference\": \"9cf661f4eb38f7c881cac67c75ea9b00bf97b210\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"doctrine/coding-standard\": \"^7.0\",\r\n            \"phpstan/phpstan\": \"^0.11\",\r\n            \"phpstan/phpstan-phpunit\": \"^0.11\",\r\n            \"phpstan/phpstan-strict-rules\": \"^0.11\",\r\n            \"phpunit/phpunit\": \"^7.0 || ^8.0 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-05-29T15:13:26+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Doctrine\\\\Inflector\\\\\": \"lib/Doctrine/Inflector\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Guilherme Blanco\",\r\n                \"email\": \"guilhermeblanco@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Roman Borschel\",\r\n                \"email\": \"roman@code-factory.org\"\r\n            },\r\n            {\r\n                \"name\": \"Benjamin Eberlei\",\r\n                \"email\": \"kontakt@beberlei.de\"\r\n            },\r\n            {\r\n                \"name\": \"Jonathan Wage\",\r\n                \"email\": \"jonwage@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Johannes Schmitt\",\r\n                \"email\": \"schmittjoh@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"PHP Doctrine Inflector is a small library that can perform string manipulations with regard to upper/lowercase and singular/plural forms of words.\",\r\n        \"homepage\": \"https://www.doctrine-project.org/projects/inflector.html\",\r\n        \"keywords\": [\r\n            \"inflection\",\r\n            \"inflector\",\r\n            \"lowercase\",\r\n            \"manipulation\",\r\n            \"php\",\r\n            \"plural\",\r\n            \"singular\",\r\n            \"strings\",\r\n            \"uppercase\",\r\n            \"words\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"doctrine/instantiator\",\r\n        \"version\": \"1.4.0\",\r\n        \"version_normalized\": \"1.4.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/doctrine/instantiator.git\",\r\n            \"reference\": \"d56bf6102915de5702778fe20f2de3b2fe570b5b\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b\",\r\n            \"reference\": \"d56bf6102915de5702778fe20f2de3b2fe570b5b\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.1 || ^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"doctrine/coding-standard\": \"^8.0\",\r\n            \"ext-pdo\": \"*\",\r\n            \"ext-phar\": \"*\",\r\n            \"phpbench/phpbench\": \"^0.13 || 1.0.0-alpha2\",\r\n            \"phpstan/phpstan\": \"^0.12\",\r\n            \"phpstan/phpstan-phpunit\": \"^0.12\",\r\n            \"phpunit/phpunit\": \"^7.0 || ^8.0 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-11-10T18:47:58+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Marco Pivetta\",\r\n                \"email\": \"ocramius@gmail.com\",\r\n                \"homepage\": \"https://ocramius.github.io/\"\r\n            }\r\n        ],\r\n        \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\r\n        \"homepage\": \"https://www.doctrine-project.org/projects/instantiator.html\",\r\n        \"keywords\": [\r\n            \"constructor\",\r\n            \"instantiate\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"doctrine/lexer\",\r\n        \"version\": \"1.2.1\",\r\n        \"version_normalized\": \"1.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/doctrine/lexer.git\",\r\n            \"reference\": \"e864bbf5904cb8f5bb334f99209b48018522f042\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/doctrine/lexer/zipball/e864bbf5904cb8f5bb334f99209b48018522f042\",\r\n            \"reference\": \"e864bbf5904cb8f5bb334f99209b48018522f042\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"doctrine/coding-standard\": \"^6.0\",\r\n            \"phpstan/phpstan\": \"^0.11.8\",\r\n            \"phpunit/phpunit\": \"^8.2\"\r\n        },\r\n        \"time\": \"2020-05-25T17:44:05+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.2.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Doctrine\\\\Common\\\\Lexer\\\\\": \"lib/Doctrine/Common/Lexer\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Guilherme Blanco\",\r\n                \"email\": \"guilhermeblanco@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Roman Borschel\",\r\n                \"email\": \"roman@code-factory.org\"\r\n            },\r\n            {\r\n                \"name\": \"Johannes Schmitt\",\r\n                \"email\": \"schmittjoh@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.\",\r\n        \"homepage\": \"https://www.doctrine-project.org/projects/lexer.html\",\r\n        \"keywords\": [\r\n            \"annotations\",\r\n            \"docblock\",\r\n            \"lexer\",\r\n            \"parser\",\r\n            \"php\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"dragonmantank/cron-expression\",\r\n        \"version\": \"v2.3.1\",\r\n        \"version_normalized\": \"2.3.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/dragonmantank/cron-expression.git\",\r\n            \"reference\": \"65b2d8ee1f10915efb3b55597da3404f096acba2\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/dragonmantank/cron-expression/zipball/65b2d8ee1f10915efb3b55597da3404f096acba2\",\r\n            \"reference\": \"65b2d8ee1f10915efb3b55597da3404f096acba2\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.0|^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^6.4|^7.0|^8.0|^9.0\"\r\n        },\r\n        \"time\": \"2020-10-13T00:52:37+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.3-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Cron\\\\\": \"src/Cron/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Michael Dowling\",\r\n                \"email\": \"mtdowling@gmail.com\",\r\n                \"homepage\": \"https://github.com/mtdowling\"\r\n            },\r\n            {\r\n                \"name\": \"Chris Tankersley\",\r\n                \"email\": \"chris@ctankersley.com\",\r\n                \"homepage\": \"https://github.com/dragonmantank\"\r\n            }\r\n        ],\r\n        \"description\": \"CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\",\r\n        \"keywords\": [\r\n            \"cron\",\r\n            \"schedule\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"egulias/email-validator\",\r\n        \"version\": \"2.1.24\",\r\n        \"version_normalized\": \"2.1.24.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/egulias/EmailValidator.git\",\r\n            \"reference\": \"ca90a3291eee1538cd48ff25163240695bd95448\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/egulias/EmailValidator/zipball/ca90a3291eee1538cd48ff25163240695bd95448\",\r\n            \"reference\": \"ca90a3291eee1538cd48ff25163240695bd95448\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"doctrine/lexer\": \"^1.0.1\",\r\n            \"php\": \">=5.5\",\r\n            \"symfony/polyfill-intl-idn\": \"^1.10\"\r\n        },\r\n        \"require-dev\": {\r\n            \"dominicsayers/isemail\": \"^3.0.7\",\r\n            \"phpunit/phpunit\": \"^4.8.36|^7.5.15\",\r\n            \"satooshi/php-coveralls\": \"^1.0.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-intl\": \"PHP Internationalization Libraries are required to use the SpoofChecking validation\"\r\n        },\r\n        \"time\": \"2020-11-14T15:56:27+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.1.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Egulias\\\\EmailValidator\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Eduardo Gulias Davis\"\r\n            }\r\n        ],\r\n        \"description\": \"A library for validating emails against several RFCs\",\r\n        \"homepage\": \"https://github.com/egulias/EmailValidator\",\r\n        \"keywords\": [\r\n            \"email\",\r\n            \"emailvalidation\",\r\n            \"emailvalidator\",\r\n            \"validation\",\r\n            \"validator\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"facade/flare-client-php\",\r\n        \"version\": \"1.3.7\",\r\n        \"version_normalized\": \"1.3.7.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/facade/flare-client-php.git\",\r\n            \"reference\": \"fd688d3c06658f2b3b5f7bb19f051ee4ddf02492\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/facade/flare-client-php/zipball/fd688d3c06658f2b3b5f7bb19f051ee4ddf02492\",\r\n            \"reference\": \"fd688d3c06658f2b3b5f7bb19f051ee4ddf02492\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"facade/ignition-contracts\": \"~1.0\",\r\n            \"illuminate/pipeline\": \"^5.5|^6.0|^7.0|^8.0\",\r\n            \"php\": \"^7.1|^8.0\",\r\n            \"symfony/http-foundation\": \"^3.3|^4.1|^5.0\",\r\n            \"symfony/mime\": \"^3.4|^4.0|^5.1\",\r\n            \"symfony/var-dumper\": \"^3.4|^4.0|^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"friendsofphp/php-cs-fixer\": \"^2.14\",\r\n            \"phpunit/phpunit\": \"^7.5.16\",\r\n            \"spatie/phpunit-snapshot-assertions\": \"^2.0\"\r\n        },\r\n        \"time\": \"2020-10-21T16:02:39+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Facade\\\\FlareClient\\\\\": \"src\"\r\n            },\r\n            \"files\": [\r\n                \"src/helpers.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"description\": \"Send PHP errors to Flare\",\r\n        \"homepage\": \"https://github.com/facade/flare-client-php\",\r\n        \"keywords\": [\r\n            \"exception\",\r\n            \"facade\",\r\n            \"flare\",\r\n            \"reporting\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"facade/ignition\",\r\n        \"version\": \"2.4.1\",\r\n        \"version_normalized\": \"2.4.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/facade/ignition.git\",\r\n            \"reference\": \"9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/facade/ignition/zipball/9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa\",\r\n            \"reference\": \"9fc6c3d3de5271a1b94cff19dce2c9295abf0ffa\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-json\": \"*\",\r\n            \"ext-mbstring\": \"*\",\r\n            \"facade/flare-client-php\": \"^1.0\",\r\n            \"facade/ignition-contracts\": \"^1.0\",\r\n            \"filp/whoops\": \"^2.4\",\r\n            \"illuminate/support\": \"^7.0|^8.0\",\r\n            \"monolog/monolog\": \"^2.0\",\r\n            \"php\": \"^7.2.5\",\r\n            \"scrivo/highlight.php\": \"^9.15\",\r\n            \"symfony/console\": \"^5.0\",\r\n            \"symfony/var-dumper\": \"^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"friendsofphp/php-cs-fixer\": \"^2.14\",\r\n            \"mockery/mockery\": \"^1.3\",\r\n            \"orchestra/testbench\": \"^5.0|^6.0\",\r\n            \"psalm/plugin-laravel\": \"^1.2\"\r\n        },\r\n        \"suggest\": {\r\n            \"laravel/telescope\": \"^3.1\"\r\n        },\r\n        \"time\": \"2020-10-14T08:59:59+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.x-dev\"\r\n            },\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Facade\\\\Ignition\\\\IgnitionServiceProvider\"\r\n                ],\r\n                \"aliases\": {\r\n                    \"Flare\": \"Facade\\\\Ignition\\\\Facades\\\\Flare\"\r\n                }\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Facade\\\\Ignition\\\\\": \"src\"\r\n            },\r\n            \"files\": [\r\n                \"src/helpers.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"description\": \"A beautiful error page for Laravel applications.\",\r\n        \"homepage\": \"https://github.com/facade/ignition\",\r\n        \"keywords\": [\r\n            \"error\",\r\n            \"flare\",\r\n            \"laravel\",\r\n            \"page\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"facade/ignition-contracts\",\r\n        \"version\": \"1.0.1\",\r\n        \"version_normalized\": \"1.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/facade/ignition-contracts.git\",\r\n            \"reference\": \"aeab1ce8b68b188a43e81758e750151ad7da796b\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/facade/ignition-contracts/zipball/aeab1ce8b68b188a43e81758e750151ad7da796b\",\r\n            \"reference\": \"aeab1ce8b68b188a43e81758e750151ad7da796b\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"friendsofphp/php-cs-fixer\": \"^2.14\",\r\n            \"phpunit/phpunit\": \"^7.5|^8.0\",\r\n            \"vimeo/psalm\": \"^3.12\"\r\n        },\r\n        \"time\": \"2020-07-14T10:10:28+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Facade\\\\IgnitionContracts\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Freek Van der Herten\",\r\n                \"email\": \"freek@spatie.be\",\r\n                \"homepage\": \"https://flareapp.io\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"Solution contracts for Ignition\",\r\n        \"homepage\": \"https://github.com/facade/ignition-contracts\",\r\n        \"keywords\": [\r\n            \"contracts\",\r\n            \"flare\",\r\n            \"ignition\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"fakerphp/faker\",\r\n        \"version\": \"v1.13.0\",\r\n        \"version_normalized\": \"1.13.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/FakerPHP/Faker.git\",\r\n            \"reference\": \"ab3f5364d01f2c2c16113442fb987d26e4004913\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/FakerPHP/Faker/zipball/ab3f5364d01f2c2c16113442fb987d26e4004913\",\r\n            \"reference\": \"ab3f5364d01f2c2c16113442fb987d26e4004913\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.1 || ^8.0\"\r\n        },\r\n        \"conflict\": {\r\n            \"fzaninotto/faker\": \"*\"\r\n        },\r\n        \"require-dev\": {\r\n            \"bamarni/composer-bin-plugin\": \"^1.4.1\",\r\n            \"ext-intl\": \"*\",\r\n            \"phpunit/phpunit\": \"^7.5.20 || ^8.5.8 || ^9.4.2\"\r\n        },\r\n        \"time\": \"2020-12-18T16:50:48+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Faker\\\\\": \"src/Faker/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"François Zaninotto\"\r\n            }\r\n        ],\r\n        \"description\": \"Faker is a PHP library that generates fake data for you.\",\r\n        \"keywords\": [\r\n            \"data\",\r\n            \"faker\",\r\n            \"fixtures\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"fideloper/proxy\",\r\n        \"version\": \"4.4.1\",\r\n        \"version_normalized\": \"4.4.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/fideloper/TrustedProxy.git\",\r\n            \"reference\": \"c073b2bd04d1c90e04dc1b787662b558dd65ade0\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/fideloper/TrustedProxy/zipball/c073b2bd04d1c90e04dc1b787662b558dd65ade0\",\r\n            \"reference\": \"c073b2bd04d1c90e04dc1b787662b558dd65ade0\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"illuminate/contracts\": \"^5.0|^6.0|^7.0|^8.0|^9.0\",\r\n            \"php\": \">=5.4.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"illuminate/http\": \"^5.0|^6.0|^7.0|^8.0|^9.0\",\r\n            \"mockery/mockery\": \"^1.0\",\r\n            \"phpunit/phpunit\": \"^6.0\"\r\n        },\r\n        \"time\": \"2020-10-22T13:48:01+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Fideloper\\\\Proxy\\\\TrustedProxyServiceProvider\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Fideloper\\\\Proxy\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Chris Fidao\",\r\n                \"email\": \"fideloper@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Set trusted proxies for Laravel\",\r\n        \"keywords\": [\r\n            \"load balancing\",\r\n            \"proxy\",\r\n            \"trusted proxy\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"filp/whoops\",\r\n        \"version\": \"2.9.1\",\r\n        \"version_normalized\": \"2.9.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/filp/whoops.git\",\r\n            \"reference\": \"307fb34a5ab697461ec4c9db865b20ff2fd40771\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/filp/whoops/zipball/307fb34a5ab697461ec4c9db865b20ff2fd40771\",\r\n            \"reference\": \"307fb34a5ab697461ec4c9db865b20ff2fd40771\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^5.5.9 || ^7.0 || ^8.0\",\r\n            \"psr/log\": \"^1.0.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"mockery/mockery\": \"^0.9 || ^1.0\",\r\n            \"phpunit/phpunit\": \"^4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.3\",\r\n            \"symfony/var-dumper\": \"^2.6 || ^3.0 || ^4.0 || ^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/var-dumper\": \"Pretty print complex values better with var-dumper available\",\r\n            \"whoops/soap\": \"Formats errors as SOAP responses\"\r\n        },\r\n        \"time\": \"2020-11-01T12:00:00+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.7-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Whoops\\\\\": \"src/Whoops/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Filipe Dobreira\",\r\n                \"homepage\": \"https://github.com/filp\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"php error handling for cool kids\",\r\n        \"homepage\": \"https://filp.github.io/whoops/\",\r\n        \"keywords\": [\r\n            \"error\",\r\n            \"exception\",\r\n            \"handling\",\r\n            \"library\",\r\n            \"throwable\",\r\n            \"whoops\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"fruitcake/laravel-cors\",\r\n        \"version\": \"v2.0.3\",\r\n        \"version_normalized\": \"2.0.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/fruitcake/laravel-cors.git\",\r\n            \"reference\": \"01de0fe5f71c70d1930ee9a80385f9cc28e0f63a\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/fruitcake/laravel-cors/zipball/01de0fe5f71c70d1930ee9a80385f9cc28e0f63a\",\r\n            \"reference\": \"01de0fe5f71c70d1930ee9a80385f9cc28e0f63a\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"asm89/stack-cors\": \"^2.0.1\",\r\n            \"illuminate/contracts\": \"^6|^7|^8|^9\",\r\n            \"illuminate/support\": \"^6|^7|^8|^9\",\r\n            \"php\": \">=7.2\",\r\n            \"symfony/http-foundation\": \"^4|^5\",\r\n            \"symfony/http-kernel\": \"^4.3.4|^5\"\r\n        },\r\n        \"require-dev\": {\r\n            \"laravel/framework\": \"^6|^7|^8\",\r\n            \"orchestra/testbench-dusk\": \"^4|^5|^6\",\r\n            \"phpunit/phpunit\": \"^6|^7|^8\",\r\n            \"squizlabs/php_codesniffer\": \"^3.5\"\r\n        },\r\n        \"time\": \"2020-10-22T13:57:20+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0-dev\"\r\n            },\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Fruitcake\\\\Cors\\\\CorsServiceProvider\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Fruitcake\\\\Cors\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fruitcake\",\r\n                \"homepage\": \"https://fruitcake.nl\"\r\n            },\r\n            {\r\n                \"name\": \"Barry vd. Heuvel\",\r\n                \"email\": \"barryvdh@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Adds CORS (Cross-Origin Resource Sharing) headers support in your Laravel application\",\r\n        \"keywords\": [\r\n            \"api\",\r\n            \"cors\",\r\n            \"crossdomain\",\r\n            \"laravel\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"guzzlehttp/guzzle\",\r\n        \"version\": \"7.2.0\",\r\n        \"version_normalized\": \"7.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/guzzle/guzzle.git\",\r\n            \"reference\": \"0aa74dfb41ae110835923ef10a9d803a22d50e79\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/guzzle/guzzle/zipball/0aa74dfb41ae110835923ef10a9d803a22d50e79\",\r\n            \"reference\": \"0aa74dfb41ae110835923ef10a9d803a22d50e79\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-json\": \"*\",\r\n            \"guzzlehttp/promises\": \"^1.4\",\r\n            \"guzzlehttp/psr7\": \"^1.7\",\r\n            \"php\": \"^7.2.5 || ^8.0\",\r\n            \"psr/http-client\": \"^1.0\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/http-client-implementation\": \"1.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-curl\": \"*\",\r\n            \"php-http/client-integration-tests\": \"^3.0\",\r\n            \"phpunit/phpunit\": \"^8.5.5 || ^9.3.5\",\r\n            \"psr/log\": \"^1.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-curl\": \"Required for CURL handler support\",\r\n            \"ext-intl\": \"Required for Internationalized Domain Name (IDN) support\",\r\n            \"psr/log\": \"Required for using the Log middleware\"\r\n        },\r\n        \"time\": \"2020-10-10T11:47:56+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"7.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"GuzzleHttp\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"src/functions_include.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Michael Dowling\",\r\n                \"email\": \"mtdowling@gmail.com\",\r\n                \"homepage\": \"https://github.com/mtdowling\"\r\n            },\r\n            {\r\n                \"name\": \"Márk Sági-Kazár\",\r\n                \"email\": \"mark.sagikazar@gmail.com\",\r\n                \"homepage\": \"https://sagikazarmark.hu\"\r\n            }\r\n        ],\r\n        \"description\": \"Guzzle is a PHP HTTP client library\",\r\n        \"homepage\": \"http://guzzlephp.org/\",\r\n        \"keywords\": [\r\n            \"client\",\r\n            \"curl\",\r\n            \"framework\",\r\n            \"http\",\r\n            \"http client\",\r\n            \"psr-18\",\r\n            \"psr-7\",\r\n            \"rest\",\r\n            \"web service\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"guzzlehttp/promises\",\r\n        \"version\": \"1.4.0\",\r\n        \"version_normalized\": \"1.4.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/guzzle/promises.git\",\r\n            \"reference\": \"60d379c243457e073cff02bc323a2a86cb355631\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/guzzle/promises/zipball/60d379c243457e073cff02bc323a2a86cb355631\",\r\n            \"reference\": \"60d379c243457e073cff02bc323a2a86cb355631\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.5\"\r\n        },\r\n        \"require-dev\": {\r\n            \"symfony/phpunit-bridge\": \"^4.4 || ^5.1\"\r\n        },\r\n        \"time\": \"2020-09-30T07:37:28+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.4-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"GuzzleHttp\\\\Promise\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"src/functions_include.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Michael Dowling\",\r\n                \"email\": \"mtdowling@gmail.com\",\r\n                \"homepage\": \"https://github.com/mtdowling\"\r\n            }\r\n        ],\r\n        \"description\": \"Guzzle promises library\",\r\n        \"keywords\": [\r\n            \"promise\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"guzzlehttp/psr7\",\r\n        \"version\": \"1.7.0\",\r\n        \"version_normalized\": \"1.7.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/guzzle/psr7.git\",\r\n            \"reference\": \"53330f47520498c0ae1f61f7e2c90f55690c06a3\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/guzzle/psr7/zipball/53330f47520498c0ae1f61f7e2c90f55690c06a3\",\r\n            \"reference\": \"53330f47520498c0ae1f61f7e2c90f55690c06a3\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.4.0\",\r\n            \"psr/http-message\": \"~1.0\",\r\n            \"ralouphie/getallheaders\": \"^2.0.5 || ^3.0.0\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/http-message-implementation\": \"1.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-zlib\": \"*\",\r\n            \"phpunit/phpunit\": \"~4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.10\"\r\n        },\r\n        \"suggest\": {\r\n            \"laminas/laminas-httphandlerrunner\": \"Emit PSR-7 responses\"\r\n        },\r\n        \"time\": \"2020-09-30T07:37:11+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.7-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"GuzzleHttp\\\\Psr7\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"src/functions_include.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Michael Dowling\",\r\n                \"email\": \"mtdowling@gmail.com\",\r\n                \"homepage\": \"https://github.com/mtdowling\"\r\n            },\r\n            {\r\n                \"name\": \"Tobias Schultze\",\r\n                \"homepage\": \"https://github.com/Tobion\"\r\n            }\r\n        ],\r\n        \"description\": \"PSR-7 message implementation that also provides common utility methods\",\r\n        \"keywords\": [\r\n            \"http\",\r\n            \"message\",\r\n            \"psr-7\",\r\n            \"request\",\r\n            \"response\",\r\n            \"stream\",\r\n            \"uri\",\r\n            \"url\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"hamcrest/hamcrest-php\",\r\n        \"version\": \"v2.0.1\",\r\n        \"version_normalized\": \"2.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/hamcrest/hamcrest-php.git\",\r\n            \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/hamcrest/hamcrest-php/zipball/8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\r\n            \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^5.3|^7.0|^8.0\"\r\n        },\r\n        \"replace\": {\r\n            \"cordoval/hamcrest-php\": \"*\",\r\n            \"davedevelopment/hamcrest-php\": \"*\",\r\n            \"kodova/hamcrest-php\": \"*\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/php-file-iterator\": \"^1.4 || ^2.0\",\r\n            \"phpunit/phpunit\": \"^4.8.36 || ^5.7 || ^6.5 || ^7.0\"\r\n        },\r\n        \"time\": \"2020-07-09T08:09:16+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"hamcrest\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"description\": \"This is the PHP port of Hamcrest Matchers\",\r\n        \"keywords\": [\r\n            \"test\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"laravel/framework\",\r\n        \"version\": \"v7.30.0\",\r\n        \"version_normalized\": \"7.30.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/laravel/framework.git\",\r\n            \"reference\": \"629c36a0fe87b66d8dccd3c82927950d0f59d3f9\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/laravel/framework/zipball/629c36a0fe87b66d8dccd3c82927950d0f59d3f9\",\r\n            \"reference\": \"629c36a0fe87b66d8dccd3c82927950d0f59d3f9\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"doctrine/inflector\": \"^1.4|^2.0\",\r\n            \"dragonmantank/cron-expression\": \"^2.3.1\",\r\n            \"egulias/email-validator\": \"^2.1.10\",\r\n            \"ext-json\": \"*\",\r\n            \"ext-mbstring\": \"*\",\r\n            \"ext-openssl\": \"*\",\r\n            \"league/commonmark\": \"^1.3\",\r\n            \"league/flysystem\": \"^1.1\",\r\n            \"monolog/monolog\": \"^2.0\",\r\n            \"nesbot/carbon\": \"^2.31\",\r\n            \"opis/closure\": \"^3.6\",\r\n            \"php\": \"^7.2.5|^8.0\",\r\n            \"psr/container\": \"^1.0\",\r\n            \"psr/simple-cache\": \"^1.0\",\r\n            \"ramsey/uuid\": \"^3.7|^4.0\",\r\n            \"swiftmailer/swiftmailer\": \"^6.0\",\r\n            \"symfony/console\": \"^5.0\",\r\n            \"symfony/error-handler\": \"^5.0\",\r\n            \"symfony/finder\": \"^5.0\",\r\n            \"symfony/http-foundation\": \"^5.0\",\r\n            \"symfony/http-kernel\": \"^5.0\",\r\n            \"symfony/mime\": \"^5.0\",\r\n            \"symfony/polyfill-php73\": \"^1.17\",\r\n            \"symfony/process\": \"^5.0\",\r\n            \"symfony/routing\": \"^5.0\",\r\n            \"symfony/var-dumper\": \"^5.0\",\r\n            \"tijsverkoyen/css-to-inline-styles\": \"^2.2.2\",\r\n            \"vlucas/phpdotenv\": \"^4.0\",\r\n            \"voku/portable-ascii\": \"^1.4.8\"\r\n        },\r\n        \"conflict\": {\r\n            \"tightenco/collect\": \"<5.5.33\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/container-implementation\": \"1.0\"\r\n        },\r\n        \"replace\": {\r\n            \"illuminate/auth\": \"self.version\",\r\n            \"illuminate/broadcasting\": \"self.version\",\r\n            \"illuminate/bus\": \"self.version\",\r\n            \"illuminate/cache\": \"self.version\",\r\n            \"illuminate/config\": \"self.version\",\r\n            \"illuminate/console\": \"self.version\",\r\n            \"illuminate/container\": \"self.version\",\r\n            \"illuminate/contracts\": \"self.version\",\r\n            \"illuminate/cookie\": \"self.version\",\r\n            \"illuminate/database\": \"self.version\",\r\n            \"illuminate/encryption\": \"self.version\",\r\n            \"illuminate/events\": \"self.version\",\r\n            \"illuminate/filesystem\": \"self.version\",\r\n            \"illuminate/hashing\": \"self.version\",\r\n            \"illuminate/http\": \"self.version\",\r\n            \"illuminate/log\": \"self.version\",\r\n            \"illuminate/mail\": \"self.version\",\r\n            \"illuminate/notifications\": \"self.version\",\r\n            \"illuminate/pagination\": \"self.version\",\r\n            \"illuminate/pipeline\": \"self.version\",\r\n            \"illuminate/queue\": \"self.version\",\r\n            \"illuminate/redis\": \"self.version\",\r\n            \"illuminate/routing\": \"self.version\",\r\n            \"illuminate/session\": \"self.version\",\r\n            \"illuminate/support\": \"self.version\",\r\n            \"illuminate/testing\": \"self.version\",\r\n            \"illuminate/translation\": \"self.version\",\r\n            \"illuminate/validation\": \"self.version\",\r\n            \"illuminate/view\": \"self.version\"\r\n        },\r\n        \"require-dev\": {\r\n            \"aws/aws-sdk-php\": \"^3.155\",\r\n            \"doctrine/dbal\": \"^2.6\",\r\n            \"filp/whoops\": \"^2.8\",\r\n            \"guzzlehttp/guzzle\": \"^6.3.1|^7.0.1\",\r\n            \"league/flysystem-cached-adapter\": \"^1.0\",\r\n            \"mockery/mockery\": \"~1.3.3|^1.4.2\",\r\n            \"moontoast/math\": \"^1.1\",\r\n            \"orchestra/testbench-core\": \"^5.8\",\r\n            \"pda/pheanstalk\": \"^4.0\",\r\n            \"phpunit/phpunit\": \"^8.4|^9.3.3\",\r\n            \"predis/predis\": \"^1.1.1\",\r\n            \"symfony/cache\": \"^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"aws/aws-sdk-php\": \"Required to use the SQS queue driver, DynamoDb failed job storage and SES mail driver (^3.155).\",\r\n            \"doctrine/dbal\": \"Required to rename columns and drop SQLite columns (^2.6).\",\r\n            \"ext-ftp\": \"Required to use the Flysystem FTP driver.\",\r\n            \"ext-gd\": \"Required to use Illuminate\\\\Http\\\\Testing\\\\FileFactory::image().\",\r\n            \"ext-memcached\": \"Required to use the memcache cache driver.\",\r\n            \"ext-pcntl\": \"Required to use all features of the queue worker.\",\r\n            \"ext-posix\": \"Required to use all features of the queue worker.\",\r\n            \"ext-redis\": \"Required to use the Redis cache and queue drivers (^4.0|^5.0).\",\r\n            \"fakerphp/faker\": \"Required to use the eloquent factory builder (^1.9.1).\",\r\n            \"filp/whoops\": \"Required for friendly error pages in development (^2.8).\",\r\n            \"guzzlehttp/guzzle\": \"Required to use the HTTP Client, Mailgun mail driver and the ping methods on schedules (^6.3.1|^7.0.1).\",\r\n            \"laravel/tinker\": \"Required to use the tinker console command (^2.0).\",\r\n            \"league/flysystem-aws-s3-v3\": \"Required to use the Flysystem S3 driver (^1.0).\",\r\n            \"league/flysystem-cached-adapter\": \"Required to use the Flysystem cache (^1.0).\",\r\n            \"league/flysystem-sftp\": \"Required to use the Flysystem SFTP driver (^1.0).\",\r\n            \"mockery/mockery\": \"Required to use mocking (~1.3.3|^1.4.2).\",\r\n            \"moontoast/math\": \"Required to use ordered UUIDs (^1.1).\",\r\n            \"nyholm/psr7\": \"Required to use PSR-7 bridging features (^1.2).\",\r\n            \"pda/pheanstalk\": \"Required to use the beanstalk queue driver (^4.0).\",\r\n            \"phpunit/phpunit\": \"Required to use assertions and run tests (^8.4|^9.3.3).\",\r\n            \"predis/predis\": \"Required to use the predis connector (^1.1.2).\",\r\n            \"psr/http-message\": \"Required to allow Storage::put to accept a StreamInterface (^1.0).\",\r\n            \"pusher/pusher-php-server\": \"Required to use the Pusher broadcast driver (^4.0).\",\r\n            \"symfony/cache\": \"Required to PSR-6 cache bridge (^5.0).\",\r\n            \"symfony/filesystem\": \"Required to create relative storage directory symbolic links (^5.0).\",\r\n            \"symfony/psr-http-message-bridge\": \"Required to use PSR-7 bridging features (^2.0).\",\r\n            \"wildbit/swiftmailer-postmark\": \"Required to use Postmark mail driver (^3.0).\"\r\n        },\r\n        \"time\": \"2020-12-01T15:01:25+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"7.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"src/Illuminate/Foundation/helpers.php\",\r\n                \"src/Illuminate/Support/helpers.php\"\r\n            ],\r\n            \"psr-4\": {\r\n                \"Illuminate\\\\\": \"src/Illuminate/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Taylor Otwell\",\r\n                \"email\": \"taylor@laravel.com\"\r\n            }\r\n        ],\r\n        \"description\": \"The Laravel Framework.\",\r\n        \"homepage\": \"https://laravel.com\",\r\n        \"keywords\": [\r\n            \"framework\",\r\n            \"laravel\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"laravel/tinker\",\r\n        \"version\": \"v2.5.0\",\r\n        \"version_normalized\": \"2.5.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/laravel/tinker.git\",\r\n            \"reference\": \"45884b526e10a88a1b179fa1a1a24d5468c668c2\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/laravel/tinker/zipball/45884b526e10a88a1b179fa1a1a24d5468c668c2\",\r\n            \"reference\": \"45884b526e10a88a1b179fa1a1a24d5468c668c2\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"illuminate/console\": \"^6.0|^7.0|^8.0\",\r\n            \"illuminate/contracts\": \"^6.0|^7.0|^8.0\",\r\n            \"illuminate/support\": \"^6.0|^7.0|^8.0\",\r\n            \"php\": \"^7.2.5|^8.0\",\r\n            \"psy/psysh\": \"^0.10.4\",\r\n            \"symfony/var-dumper\": \"^4.3.4|^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"mockery/mockery\": \"~1.3.3|^1.4.2\",\r\n            \"phpunit/phpunit\": \"^8.5.8|^9.3.3\"\r\n        },\r\n        \"suggest\": {\r\n            \"illuminate/database\": \"The Illuminate Database package (^6.0|^7.0|^8.0).\"\r\n        },\r\n        \"time\": \"2020-10-29T13:07:12+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.x-dev\"\r\n            },\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Laravel\\\\Tinker\\\\TinkerServiceProvider\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Laravel\\\\Tinker\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Taylor Otwell\",\r\n                \"email\": \"taylor@laravel.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Powerful REPL for the Laravel framework.\",\r\n        \"keywords\": [\r\n            \"REPL\",\r\n            \"Tinker\",\r\n            \"laravel\",\r\n            \"psysh\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"laravel/ui\",\r\n        \"version\": \"v2.4.0\",\r\n        \"version_normalized\": \"2.4.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/laravel/ui.git\",\r\n            \"reference\": \"f5398544a9cd4804a42d09ce51735e37cd51ea2d\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/laravel/ui/zipball/f5398544a9cd4804a42d09ce51735e37cd51ea2d\",\r\n            \"reference\": \"f5398544a9cd4804a42d09ce51735e37cd51ea2d\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"illuminate/console\": \"^7.0\",\r\n            \"illuminate/filesystem\": \"^7.0\",\r\n            \"illuminate/support\": \"^7.0\",\r\n            \"php\": \"^7.2.5\"\r\n        },\r\n        \"require-dev\": {\r\n            \"mockery/mockery\": \"^1.0\",\r\n            \"phpunit/phpunit\": \"^8.0\"\r\n        },\r\n        \"time\": \"2020-09-11T15:31:52+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Laravel\\\\Ui\\\\UiServiceProvider\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Laravel\\\\Ui\\\\\": \"src/\",\r\n                \"Illuminate\\\\Foundation\\\\Auth\\\\\": \"auth-backend/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Taylor Otwell\",\r\n                \"email\": \"taylor@laravel.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Laravel UI utilities and presets.\",\r\n        \"keywords\": [\r\n            \"laravel\",\r\n            \"ui\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"laravelcollective/html\",\r\n        \"version\": \"v6.2.1\",\r\n        \"version_normalized\": \"6.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/LaravelCollective/html.git\",\r\n            \"reference\": \"ae15b9c4bf918ec3a78f092b8555551dd693fde3\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/LaravelCollective/html/zipball/ae15b9c4bf918ec3a78f092b8555551dd693fde3\",\r\n            \"reference\": \"ae15b9c4bf918ec3a78f092b8555551dd693fde3\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"illuminate/http\": \"^6.0|^7.0|^8.0\",\r\n            \"illuminate/routing\": \"^6.0|^7.0|^8.0\",\r\n            \"illuminate/session\": \"^6.0|^7.0|^8.0\",\r\n            \"illuminate/support\": \"^6.0|^7.0|^8.0\",\r\n            \"illuminate/view\": \"^6.0|^7.0|^8.0\",\r\n            \"php\": \">=7.2.5\"\r\n        },\r\n        \"require-dev\": {\r\n            \"illuminate/database\": \"^6.0|^7.0|^8.0\",\r\n            \"mockery/mockery\": \"~1.0\",\r\n            \"phpunit/phpunit\": \"~8.5\"\r\n        },\r\n        \"time\": \"2020-12-15T20:20:05+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"6.x-dev\"\r\n            },\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Collective\\\\Html\\\\HtmlServiceProvider\"\r\n                ],\r\n                \"aliases\": {\r\n                    \"Form\": \"Collective\\\\Html\\\\FormFacade\",\r\n                    \"Html\": \"Collective\\\\Html\\\\HtmlFacade\"\r\n                }\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Collective\\\\Html\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"src/helpers.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Adam Engebretson\",\r\n                \"email\": \"adam@laravelcollective.com\"\r\n            },\r\n            {\r\n                \"name\": \"Taylor Otwell\",\r\n                \"email\": \"taylorotwell@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"HTML and Form Builders for the Laravel Framework\",\r\n        \"homepage\": \"https://laravelcollective.com\"\r\n    },\r\n    {\r\n        \"name\": \"league/commonmark\",\r\n        \"version\": \"1.5.7\",\r\n        \"version_normalized\": \"1.5.7.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/thephpleague/commonmark.git\",\r\n            \"reference\": \"11df9b36fd4f1d2b727a73bf14931d81373b9a54\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/thephpleague/commonmark/zipball/11df9b36fd4f1d2b727a73bf14931d81373b9a54\",\r\n            \"reference\": \"11df9b36fd4f1d2b727a73bf14931d81373b9a54\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-mbstring\": \"*\",\r\n            \"php\": \"^7.1 || ^8.0\"\r\n        },\r\n        \"conflict\": {\r\n            \"scrutinizer/ocular\": \"1.7.*\"\r\n        },\r\n        \"require-dev\": {\r\n            \"cebe/markdown\": \"~1.0\",\r\n            \"commonmark/commonmark.js\": \"0.29.2\",\r\n            \"erusev/parsedown\": \"~1.0\",\r\n            \"ext-json\": \"*\",\r\n            \"github/gfm\": \"0.29.0\",\r\n            \"michelf/php-markdown\": \"~1.4\",\r\n            \"mikehaertl/php-shellcommand\": \"^1.4\",\r\n            \"phpstan/phpstan\": \"^0.12\",\r\n            \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.2\",\r\n            \"scrutinizer/ocular\": \"^1.5\",\r\n            \"symfony/finder\": \"^4.2\"\r\n        },\r\n        \"time\": \"2020-10-31T13:49:32+00:00\",\r\n        \"bin\": [\r\n            \"bin/commonmark\"\r\n        ],\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"League\\\\CommonMark\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Colin O'Dell\",\r\n                \"email\": \"colinodell@gmail.com\",\r\n                \"homepage\": \"https://www.colinodell.com\",\r\n                \"role\": \"Lead Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"Highly-extensible PHP Markdown parser which fully supports the CommonMark spec and Github-Flavored Markdown (GFM)\",\r\n        \"homepage\": \"https://commonmark.thephpleague.com\",\r\n        \"keywords\": [\r\n            \"commonmark\",\r\n            \"flavored\",\r\n            \"gfm\",\r\n            \"github\",\r\n            \"github-flavored\",\r\n            \"markdown\",\r\n            \"md\",\r\n            \"parser\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"league/flysystem\",\r\n        \"version\": \"1.1.3\",\r\n        \"version_normalized\": \"1.1.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/thephpleague/flysystem.git\",\r\n            \"reference\": \"9be3b16c877d477357c015cec057548cf9b2a14a\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/thephpleague/flysystem/zipball/9be3b16c877d477357c015cec057548cf9b2a14a\",\r\n            \"reference\": \"9be3b16c877d477357c015cec057548cf9b2a14a\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-fileinfo\": \"*\",\r\n            \"league/mime-type-detection\": \"^1.3\",\r\n            \"php\": \"^7.2.5 || ^8.0\"\r\n        },\r\n        \"conflict\": {\r\n            \"league/flysystem-sftp\": \"<1.0.6\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpspec/prophecy\": \"^1.11.1\",\r\n            \"phpunit/phpunit\": \"^8.5.8\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-fileinfo\": \"Required for MimeType\",\r\n            \"ext-ftp\": \"Allows you to use FTP server storage\",\r\n            \"ext-openssl\": \"Allows you to use FTPS server storage\",\r\n            \"league/flysystem-aws-s3-v2\": \"Allows you to use S3 storage with AWS SDK v2\",\r\n            \"league/flysystem-aws-s3-v3\": \"Allows you to use S3 storage with AWS SDK v3\",\r\n            \"league/flysystem-azure\": \"Allows you to use Windows Azure Blob storage\",\r\n            \"league/flysystem-cached-adapter\": \"Flysystem adapter decorator for metadata caching\",\r\n            \"league/flysystem-eventable-filesystem\": \"Allows you to use EventableFilesystem\",\r\n            \"league/flysystem-rackspace\": \"Allows you to use Rackspace Cloud Files\",\r\n            \"league/flysystem-sftp\": \"Allows you to use SFTP server storage via phpseclib\",\r\n            \"league/flysystem-webdav\": \"Allows you to use WebDAV storage\",\r\n            \"league/flysystem-ziparchive\": \"Allows you to use ZipArchive adapter\",\r\n            \"spatie/flysystem-dropbox\": \"Allows you to use Dropbox storage\",\r\n            \"srmklive/flysystem-dropbox-v2\": \"Allows you to use Dropbox storage for PHP 5 applications\"\r\n        },\r\n        \"time\": \"2020-08-23T07:39:11+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"League\\\\Flysystem\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Frank de Jonge\",\r\n                \"email\": \"info@frenky.net\"\r\n            }\r\n        ],\r\n        \"description\": \"Filesystem abstraction: Many filesystems, one API.\",\r\n        \"keywords\": [\r\n            \"Cloud Files\",\r\n            \"WebDAV\",\r\n            \"abstraction\",\r\n            \"aws\",\r\n            \"cloud\",\r\n            \"copy.com\",\r\n            \"dropbox\",\r\n            \"file systems\",\r\n            \"files\",\r\n            \"filesystem\",\r\n            \"filesystems\",\r\n            \"ftp\",\r\n            \"rackspace\",\r\n            \"remote\",\r\n            \"s3\",\r\n            \"sftp\",\r\n            \"storage\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"league/mime-type-detection\",\r\n        \"version\": \"1.5.1\",\r\n        \"version_normalized\": \"1.5.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/thephpleague/mime-type-detection.git\",\r\n            \"reference\": \"353f66d7555d8a90781f6f5e7091932f9a4250aa\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/thephpleague/mime-type-detection/zipball/353f66d7555d8a90781f6f5e7091932f9a4250aa\",\r\n            \"reference\": \"353f66d7555d8a90781f6f5e7091932f9a4250aa\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-fileinfo\": \"*\",\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpstan/phpstan\": \"^0.12.36\",\r\n            \"phpunit/phpunit\": \"^8.5.8\"\r\n        },\r\n        \"time\": \"2020-10-18T11:50:25+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"League\\\\MimeTypeDetection\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Frank de Jonge\",\r\n                \"email\": \"info@frankdejonge.nl\"\r\n            }\r\n        ],\r\n        \"description\": \"Mime-type detection for Flysystem\"\r\n    },\r\n    {\r\n        \"name\": \"mockery/mockery\",\r\n        \"version\": \"1.3.3\",\r\n        \"version_normalized\": \"1.3.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/mockery/mockery.git\",\r\n            \"reference\": \"60fa2f67f6e4d3634bb4a45ff3171fa52215800d\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/mockery/mockery/zipball/60fa2f67f6e4d3634bb4a45ff3171fa52215800d\",\r\n            \"reference\": \"60fa2f67f6e4d3634bb4a45ff3171fa52215800d\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"hamcrest/hamcrest-php\": \"^2.0.1\",\r\n            \"lib-pcre\": \">=7.0\",\r\n            \"php\": \">=5.6.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^5.7.10|^6.5|^7.5|^8.5|^9.3\"\r\n        },\r\n        \"time\": \"2020-08-11T18:10:21+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.3.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-0\": {\r\n                \"Mockery\": \"library/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Pádraic Brady\",\r\n                \"email\": \"padraic.brady@gmail.com\",\r\n                \"homepage\": \"http://blog.astrumfutura.com\"\r\n            },\r\n            {\r\n                \"name\": \"Dave Marshall\",\r\n                \"email\": \"dave.marshall@atstsolutions.co.uk\",\r\n                \"homepage\": \"http://davedevelopment.co.uk\"\r\n            }\r\n        ],\r\n        \"description\": \"Mockery is a simple yet flexible PHP mock object framework\",\r\n        \"homepage\": \"https://github.com/mockery/mockery\",\r\n        \"keywords\": [\r\n            \"BDD\",\r\n            \"TDD\",\r\n            \"library\",\r\n            \"mock\",\r\n            \"mock objects\",\r\n            \"mockery\",\r\n            \"stub\",\r\n            \"test\",\r\n            \"test double\",\r\n            \"testing\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"monolog/monolog\",\r\n        \"version\": \"2.2.0\",\r\n        \"version_normalized\": \"2.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/Seldaek/monolog.git\",\r\n            \"reference\": \"1cb1cde8e8dd0f70cc0fe51354a59acad9302084\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/1cb1cde8e8dd0f70cc0fe51354a59acad9302084\",\r\n            \"reference\": \"1cb1cde8e8dd0f70cc0fe51354a59acad9302084\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2\",\r\n            \"psr/log\": \"^1.0.1\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/log-implementation\": \"1.0.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"aws/aws-sdk-php\": \"^2.4.9 || ^3.0\",\r\n            \"doctrine/couchdb\": \"~1.0@dev\",\r\n            \"elasticsearch/elasticsearch\": \"^7\",\r\n            \"graylog2/gelf-php\": \"^1.4.2\",\r\n            \"mongodb/mongodb\": \"^1.8\",\r\n            \"php-amqplib/php-amqplib\": \"~2.4\",\r\n            \"php-console/php-console\": \"^3.1.3\",\r\n            \"phpspec/prophecy\": \"^1.6.1\",\r\n            \"phpstan/phpstan\": \"^0.12.59\",\r\n            \"phpunit/phpunit\": \"^8.5\",\r\n            \"predis/predis\": \"^1.1\",\r\n            \"rollbar/rollbar\": \"^1.3\",\r\n            \"ruflin/elastica\": \">=0.90 <7.0.1\",\r\n            \"swiftmailer/swiftmailer\": \"^5.3|^6.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\r\n            \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\r\n            \"elasticsearch/elasticsearch\": \"Allow sending log messages to an Elasticsearch server via official client\",\r\n            \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\r\n            \"ext-mbstring\": \"Allow to work properly with unicode symbols\",\r\n            \"ext-mongodb\": \"Allow sending log messages to a MongoDB server (via driver)\",\r\n            \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\r\n            \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server (via library)\",\r\n            \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\r\n            \"php-console/php-console\": \"Allow sending log messages to Google Chrome\",\r\n            \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\r\n            \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\"\r\n        },\r\n        \"time\": \"2020-12-14T13:15:25+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"2.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Monolog\\\\\": \"src/Monolog\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Jordi Boggiano\",\r\n                \"email\": \"j.boggiano@seld.be\",\r\n                \"homepage\": \"https://seld.be\"\r\n            }\r\n        ],\r\n        \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\r\n        \"homepage\": \"https://github.com/Seldaek/monolog\",\r\n        \"keywords\": [\r\n            \"log\",\r\n            \"logging\",\r\n            \"psr-3\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"myclabs/deep-copy\",\r\n        \"version\": \"1.10.2\",\r\n        \"version_normalized\": \"1.10.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/myclabs/DeepCopy.git\",\r\n            \"reference\": \"776f831124e9c62e1a2c601ecc52e776d8bb7220\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/myclabs/DeepCopy/zipball/776f831124e9c62e1a2c601ecc52e776d8bb7220\",\r\n            \"reference\": \"776f831124e9c62e1a2c601ecc52e776d8bb7220\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.1 || ^8.0\"\r\n        },\r\n        \"replace\": {\r\n            \"myclabs/deep-copy\": \"self.version\"\r\n        },\r\n        \"require-dev\": {\r\n            \"doctrine/collections\": \"^1.0\",\r\n            \"doctrine/common\": \"^2.6\",\r\n            \"phpunit/phpunit\": \"^7.1\"\r\n        },\r\n        \"time\": \"2020-11-13T09:40:50+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"DeepCopy\\\\\": \"src/DeepCopy/\"\r\n            },\r\n            \"files\": [\r\n                \"src/DeepCopy/deep_copy.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"description\": \"Create deep copies (clones) of your objects\",\r\n        \"keywords\": [\r\n            \"clone\",\r\n            \"copy\",\r\n            \"duplicate\",\r\n            \"object\",\r\n            \"object graph\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"nesbot/carbon\",\r\n        \"version\": \"2.43.0\",\r\n        \"version_normalized\": \"2.43.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/briannesbitt/Carbon.git\",\r\n            \"reference\": \"d32c57d8389113742f4a88725a170236470012e2\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/briannesbitt/Carbon/zipball/d32c57d8389113742f4a88725a170236470012e2\",\r\n            \"reference\": \"d32c57d8389113742f4a88725a170236470012e2\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-json\": \"*\",\r\n            \"php\": \"^7.1.8 || ^8.0\",\r\n            \"symfony/polyfill-mbstring\": \"^1.0\",\r\n            \"symfony/translation\": \"^3.4 || ^4.0 || ^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"doctrine/orm\": \"^2.7\",\r\n            \"friendsofphp/php-cs-fixer\": \"^2.14 || ^3.0\",\r\n            \"kylekatarnls/multi-tester\": \"^2.0\",\r\n            \"phpmd/phpmd\": \"^2.9\",\r\n            \"phpstan/extension-installer\": \"^1.0\",\r\n            \"phpstan/phpstan\": \"^0.12.54\",\r\n            \"phpunit/phpunit\": \"^7.5 || ^8.0\",\r\n            \"squizlabs/php_codesniffer\": \"^3.4\"\r\n        },\r\n        \"time\": \"2020-12-17T20:55:32+00:00\",\r\n        \"bin\": [\r\n            \"bin/carbon\"\r\n        ],\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.x-dev\",\r\n                \"dev-3.x\": \"3.x-dev\"\r\n            },\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Carbon\\\\Laravel\\\\ServiceProvider\"\r\n                ]\r\n            },\r\n            \"phpstan\": {\r\n                \"includes\": [\r\n                    \"extension.neon\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Carbon\\\\\": \"src/Carbon/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Brian Nesbitt\",\r\n                \"email\": \"brian@nesbot.com\",\r\n                \"homepage\": \"http://nesbot.com\"\r\n            },\r\n            {\r\n                \"name\": \"kylekatarnls\",\r\n                \"homepage\": \"http://github.com/kylekatarnls\"\r\n            }\r\n        ],\r\n        \"description\": \"An API extension for DateTime that supports 281 different languages.\",\r\n        \"homepage\": \"http://carbon.nesbot.com\",\r\n        \"keywords\": [\r\n            \"date\",\r\n            \"datetime\",\r\n            \"time\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"nikic/php-parser\",\r\n        \"version\": \"v4.10.3\",\r\n        \"version_normalized\": \"4.10.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/nikic/PHP-Parser.git\",\r\n            \"reference\": \"dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984\",\r\n            \"reference\": \"dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-tokenizer\": \"*\",\r\n            \"php\": \">=7.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ircmaxell/php-yacc\": \"^0.0.7\",\r\n            \"phpunit/phpunit\": \"^6.5 || ^7.0 || ^8.0 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-12-03T17:45:45+00:00\",\r\n        \"bin\": [\r\n            \"bin/php-parse\"\r\n        ],\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"4.9-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"PhpParser\\\\\": \"lib/PhpParser\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nikita Popov\"\r\n            }\r\n        ],\r\n        \"description\": \"A PHP parser written in PHP\",\r\n        \"keywords\": [\r\n            \"parser\",\r\n            \"php\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"nunomaduro/collision\",\r\n        \"version\": \"v4.3.0\",\r\n        \"version_normalized\": \"4.3.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/nunomaduro/collision.git\",\r\n            \"reference\": \"7c125dc2463f3e144ddc7e05e63077109508c94e\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/nunomaduro/collision/zipball/7c125dc2463f3e144ddc7e05e63077109508c94e\",\r\n            \"reference\": \"7c125dc2463f3e144ddc7e05e63077109508c94e\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"facade/ignition-contracts\": \"^1.0\",\r\n            \"filp/whoops\": \"^2.4\",\r\n            \"php\": \"^7.2.5 || ^8.0\",\r\n            \"symfony/console\": \"^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"facade/ignition\": \"^2.0\",\r\n            \"fideloper/proxy\": \"^4.2\",\r\n            \"friendsofphp/php-cs-fixer\": \"^2.16\",\r\n            \"fruitcake/laravel-cors\": \"^1.0\",\r\n            \"laravel/framework\": \"^7.0\",\r\n            \"laravel/tinker\": \"^2.0\",\r\n            \"nunomaduro/larastan\": \"^0.6\",\r\n            \"orchestra/testbench\": \"^5.0\",\r\n            \"phpstan/phpstan\": \"^0.12.3\",\r\n            \"phpunit/phpunit\": \"^8.5.1 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-10-29T15:12:23+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"NunoMaduro\\\\Collision\\\\Adapters\\\\Laravel\\\\CollisionServiceProvider\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"NunoMaduro\\\\Collision\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nuno Maduro\",\r\n                \"email\": \"enunomaduro@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Cli error handling for console/command-line PHP applications.\",\r\n        \"keywords\": [\r\n            \"artisan\",\r\n            \"cli\",\r\n            \"command-line\",\r\n            \"console\",\r\n            \"error\",\r\n            \"handling\",\r\n            \"laravel\",\r\n            \"laravel-zero\",\r\n            \"php\",\r\n            \"symfony\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"opis/closure\",\r\n        \"version\": \"3.6.1\",\r\n        \"version_normalized\": \"3.6.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/opis/closure.git\",\r\n            \"reference\": \"943b5d70cc5ae7483f6aff6ff43d7e34592ca0f5\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/opis/closure/zipball/943b5d70cc5ae7483f6aff6ff43d7e34592ca0f5\",\r\n            \"reference\": \"943b5d70cc5ae7483f6aff6ff43d7e34592ca0f5\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^5.4 || ^7.0 || ^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"jeremeamia/superclosure\": \"^2.0\",\r\n            \"phpunit/phpunit\": \"^4.0 || ^5.0 || ^6.0 || ^7.0 || ^8.0 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-11-07T02:01:34+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.6.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Opis\\\\Closure\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"functions.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Marius Sarca\",\r\n                \"email\": \"marius.sarca@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Sorin Sarca\",\r\n                \"email\": \"sarca_sorin@hotmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"A library that can be used to serialize closures (anonymous functions) and arbitrary objects.\",\r\n        \"homepage\": \"https://opis.io/closure\",\r\n        \"keywords\": [\r\n            \"anonymous functions\",\r\n            \"closure\",\r\n            \"function\",\r\n            \"serializable\",\r\n            \"serialization\",\r\n            \"serialize\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phar-io/manifest\",\r\n        \"version\": \"2.0.1\",\r\n        \"version_normalized\": \"2.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/phar-io/manifest.git\",\r\n            \"reference\": \"85265efd3af7ba3ca4b2a2c34dbfc5788dd29133\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133\",\r\n            \"reference\": \"85265efd3af7ba3ca4b2a2c34dbfc5788dd29133\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-dom\": \"*\",\r\n            \"ext-phar\": \"*\",\r\n            \"ext-xmlwriter\": \"*\",\r\n            \"phar-io/version\": \"^3.0.1\",\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"time\": \"2020-06-27T14:33:11+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Arne Blankerts\",\r\n                \"email\": \"arne@blankerts.de\",\r\n                \"role\": \"Developer\"\r\n            },\r\n            {\r\n                \"name\": \"Sebastian Heuer\",\r\n                \"email\": \"sebastian@phpeople.de\",\r\n                \"role\": \"Developer\"\r\n            },\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"Component for reading phar.io manifest information from a PHP Archive (PHAR)\"\r\n    },\r\n    {\r\n        \"name\": \"phar-io/version\",\r\n        \"version\": \"3.0.4\",\r\n        \"version_normalized\": \"3.0.4.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/phar-io/version.git\",\r\n            \"reference\": \"e4782611070e50613683d2b9a57730e9a3ba5451\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/phar-io/version/zipball/e4782611070e50613683d2b9a57730e9a3ba5451\",\r\n            \"reference\": \"e4782611070e50613683d2b9a57730e9a3ba5451\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"time\": \"2020-12-13T23:18:30+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Arne Blankerts\",\r\n                \"email\": \"arne@blankerts.de\",\r\n                \"role\": \"Developer\"\r\n            },\r\n            {\r\n                \"name\": \"Sebastian Heuer\",\r\n                \"email\": \"sebastian@phpeople.de\",\r\n                \"role\": \"Developer\"\r\n            },\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"Library for handling version information and constraints\"\r\n    },\r\n    {\r\n        \"name\": \"phpdocumentor/reflection-common\",\r\n        \"version\": \"2.2.0\",\r\n        \"version_normalized\": \"2.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/phpDocumentor/ReflectionCommon.git\",\r\n            \"reference\": \"1d01c49d4ed62f25aa84a747ad35d5a16924662b\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b\",\r\n            \"reference\": \"1d01c49d4ed62f25aa84a747ad35d5a16924662b\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"time\": \"2020-06-27T09:03:43+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-2.x\": \"2.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"phpDocumentor\\\\Reflection\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Jaap van Otterdijk\",\r\n                \"email\": \"opensource@ijaap.nl\"\r\n            }\r\n        ],\r\n        \"description\": \"Common reflection classes used by phpdocumentor to reflect the code structure\",\r\n        \"homepage\": \"http://www.phpdoc.org\",\r\n        \"keywords\": [\r\n            \"FQSEN\",\r\n            \"phpDocumentor\",\r\n            \"phpdoc\",\r\n            \"reflection\",\r\n            \"static analysis\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpdocumentor/reflection-docblock\",\r\n        \"version\": \"5.2.2\",\r\n        \"version_normalized\": \"5.2.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/phpDocumentor/ReflectionDocBlock.git\",\r\n            \"reference\": \"069a785b2141f5bcf49f3e353548dc1cce6df556\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556\",\r\n            \"reference\": \"069a785b2141f5bcf49f3e353548dc1cce6df556\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-filter\": \"*\",\r\n            \"php\": \"^7.2 || ^8.0\",\r\n            \"phpdocumentor/reflection-common\": \"^2.2\",\r\n            \"phpdocumentor/type-resolver\": \"^1.3\",\r\n            \"webmozart/assert\": \"^1.9.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"mockery/mockery\": \"~1.3.2\"\r\n        },\r\n        \"time\": \"2020-09-03T19:13:55+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"5.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"phpDocumentor\\\\Reflection\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Mike van Riel\",\r\n                \"email\": \"me@mikevanriel.com\"\r\n            },\r\n            {\r\n                \"name\": \"Jaap van Otterdijk\",\r\n                \"email\": \"account@ijaap.nl\"\r\n            }\r\n        ],\r\n        \"description\": \"With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.\"\r\n    },\r\n    {\r\n        \"name\": \"phpdocumentor/type-resolver\",\r\n        \"version\": \"1.4.0\",\r\n        \"version_normalized\": \"1.4.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/phpDocumentor/TypeResolver.git\",\r\n            \"reference\": \"6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0\",\r\n            \"reference\": \"6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.2 || ^8.0\",\r\n            \"phpdocumentor/reflection-common\": \"^2.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-tokenizer\": \"*\"\r\n        },\r\n        \"time\": \"2020-09-17T18:55:26+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-1.x\": \"1.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"phpDocumentor\\\\Reflection\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Mike van Riel\",\r\n                \"email\": \"me@mikevanriel.com\"\r\n            }\r\n        ],\r\n        \"description\": \"A PSR-5 based resolver of Class names, Types and Structural Element Names\"\r\n    },\r\n    {\r\n        \"name\": \"phpoption/phpoption\",\r\n        \"version\": \"1.7.5\",\r\n        \"version_normalized\": \"1.7.5.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/schmittjoh/php-option.git\",\r\n            \"reference\": \"994ecccd8f3283ecf5ac33254543eb0ac946d525\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/schmittjoh/php-option/zipball/994ecccd8f3283ecf5ac33254543eb0ac946d525\",\r\n            \"reference\": \"994ecccd8f3283ecf5ac33254543eb0ac946d525\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^5.5.9 || ^7.0 || ^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"bamarni/composer-bin-plugin\": \"^1.4.1\",\r\n            \"phpunit/phpunit\": \"^4.8.35 || ^5.7.27 || ^6.5.6 || ^7.0 || ^8.0 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-07-20T17:29:33+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.7-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"PhpOption\\\\\": \"src/PhpOption/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"Apache-2.0\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Johannes M. Schmitt\",\r\n                \"email\": \"schmittjoh@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Graham Campbell\",\r\n                \"email\": \"graham@alt-three.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Option Type for PHP\",\r\n        \"keywords\": [\r\n            \"language\",\r\n            \"option\",\r\n            \"php\",\r\n            \"type\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpspec/prophecy\",\r\n        \"version\": \"1.12.2\",\r\n        \"version_normalized\": \"1.12.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/phpspec/prophecy.git\",\r\n            \"reference\": \"245710e971a030f42e08f4912863805570f23d39\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/phpspec/prophecy/zipball/245710e971a030f42e08f4912863805570f23d39\",\r\n            \"reference\": \"245710e971a030f42e08f4912863805570f23d39\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"doctrine/instantiator\": \"^1.2\",\r\n            \"php\": \"^7.2 || ~8.0, <8.1\",\r\n            \"phpdocumentor/reflection-docblock\": \"^5.2\",\r\n            \"sebastian/comparator\": \"^3.0 || ^4.0\",\r\n            \"sebastian/recursion-context\": \"^3.0 || ^4.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpspec/phpspec\": \"^6.0\",\r\n            \"phpunit/phpunit\": \"^8.0 || ^9.0\"\r\n        },\r\n        \"time\": \"2020-12-19T10:15:11+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.11.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Prophecy\\\\\": \"src/Prophecy\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Konstantin Kudryashov\",\r\n                \"email\": \"ever.zet@gmail.com\",\r\n                \"homepage\": \"http://everzet.com\"\r\n            },\r\n            {\r\n                \"name\": \"Marcello Duarte\",\r\n                \"email\": \"marcello.duarte@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Highly opinionated mocking framework for PHP 5.3+\",\r\n        \"homepage\": \"https://github.com/phpspec/prophecy\",\r\n        \"keywords\": [\r\n            \"Double\",\r\n            \"Dummy\",\r\n            \"fake\",\r\n            \"mock\",\r\n            \"spy\",\r\n            \"stub\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpunit/php-code-coverage\",\r\n        \"version\": \"7.0.14\",\r\n        \"version_normalized\": \"7.0.14.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\r\n            \"reference\": \"bb7c9a210c72e4709cdde67f8b7362f672f2225c\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/bb7c9a210c72e4709cdde67f8b7362f672f2225c\",\r\n            \"reference\": \"bb7c9a210c72e4709cdde67f8b7362f672f2225c\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-dom\": \"*\",\r\n            \"ext-xmlwriter\": \"*\",\r\n            \"php\": \">=7.2\",\r\n            \"phpunit/php-file-iterator\": \"^2.0.2\",\r\n            \"phpunit/php-text-template\": \"^1.2.1\",\r\n            \"phpunit/php-token-stream\": \"^3.1.1 || ^4.0\",\r\n            \"sebastian/code-unit-reverse-lookup\": \"^1.0.1\",\r\n            \"sebastian/environment\": \"^4.2.2\",\r\n            \"sebastian/version\": \"^2.0.1\",\r\n            \"theseer/tokenizer\": \"^1.1.3\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^8.2.2\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-xdebug\": \"^2.7.2\"\r\n        },\r\n        \"time\": \"2020-12-02T13:39:03+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"7.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\r\n        \"keywords\": [\r\n            \"coverage\",\r\n            \"testing\",\r\n            \"xunit\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpunit/php-file-iterator\",\r\n        \"version\": \"2.0.3\",\r\n        \"version_normalized\": \"2.0.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\r\n            \"reference\": \"4b49fb70f067272b659ef0174ff9ca40fdaa6357\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/4b49fb70f067272b659ef0174ff9ca40fdaa6357\",\r\n            \"reference\": \"4b49fb70f067272b659ef0174ff9ca40fdaa6357\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^8.5\"\r\n        },\r\n        \"time\": \"2020-11-30T08:25:21+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\r\n        \"keywords\": [\r\n            \"filesystem\",\r\n            \"iterator\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpunit/php-text-template\",\r\n        \"version\": \"1.2.1\",\r\n        \"version_normalized\": \"1.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\r\n            \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\r\n            \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.3.3\"\r\n        },\r\n        \"time\": \"2015-06-21T13:50:34+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"Simple template engine.\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\r\n        \"keywords\": [\r\n            \"template\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpunit/php-timer\",\r\n        \"version\": \"2.1.3\",\r\n        \"version_normalized\": \"2.1.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\r\n            \"reference\": \"2454ae1765516d20c4ffe103d85a58a9a3bd5662\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/2454ae1765516d20c4ffe103d85a58a9a3bd5662\",\r\n            \"reference\": \"2454ae1765516d20c4ffe103d85a58a9a3bd5662\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^8.5\"\r\n        },\r\n        \"time\": \"2020-11-30T08:20:02+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"Utility class for timing\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\r\n        \"keywords\": [\r\n            \"timer\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"phpunit/php-token-stream\",\r\n        \"version\": \"3.1.2\",\r\n        \"version_normalized\": \"3.1.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/php-token-stream.git\",\r\n            \"reference\": \"472b687829041c24b25f475e14c2f38a09edf1c2\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/472b687829041c24b25f475e14c2f38a09edf1c2\",\r\n            \"reference\": \"472b687829041c24b25f475e14c2f38a09edf1c2\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-tokenizer\": \"*\",\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^7.0\"\r\n        },\r\n        \"time\": \"2020-11-30T08:38:46+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Wrapper around PHP's tokenizer extension.\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/php-token-stream/\",\r\n        \"keywords\": [\r\n            \"tokenizer\"\r\n        ],\r\n        \"abandoned\": true\r\n    },\r\n    {\r\n        \"name\": \"phpunit/phpunit\",\r\n        \"version\": \"8.5.13\",\r\n        \"version_normalized\": \"8.5.13.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\r\n            \"reference\": \"8e86be391a58104ef86037ba8a846524528d784e\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/8e86be391a58104ef86037ba8a846524528d784e\",\r\n            \"reference\": \"8e86be391a58104ef86037ba8a846524528d784e\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"doctrine/instantiator\": \"^1.3.1\",\r\n            \"ext-dom\": \"*\",\r\n            \"ext-json\": \"*\",\r\n            \"ext-libxml\": \"*\",\r\n            \"ext-mbstring\": \"*\",\r\n            \"ext-xml\": \"*\",\r\n            \"ext-xmlwriter\": \"*\",\r\n            \"myclabs/deep-copy\": \"^1.10.0\",\r\n            \"phar-io/manifest\": \"^2.0.1\",\r\n            \"phar-io/version\": \"^3.0.2\",\r\n            \"php\": \">=7.2\",\r\n            \"phpspec/prophecy\": \"^1.10.3\",\r\n            \"phpunit/php-code-coverage\": \"^7.0.12\",\r\n            \"phpunit/php-file-iterator\": \"^2.0.2\",\r\n            \"phpunit/php-text-template\": \"^1.2.1\",\r\n            \"phpunit/php-timer\": \"^2.1.2\",\r\n            \"sebastian/comparator\": \"^3.0.2\",\r\n            \"sebastian/diff\": \"^3.0.2\",\r\n            \"sebastian/environment\": \"^4.2.3\",\r\n            \"sebastian/exporter\": \"^3.1.2\",\r\n            \"sebastian/global-state\": \"^3.0.0\",\r\n            \"sebastian/object-enumerator\": \"^3.0.3\",\r\n            \"sebastian/resource-operations\": \"^2.0.1\",\r\n            \"sebastian/type\": \"^1.1.3\",\r\n            \"sebastian/version\": \"^2.0.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-pdo\": \"*\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-soap\": \"*\",\r\n            \"ext-xdebug\": \"*\",\r\n            \"phpunit/php-invoker\": \"^2.0.0\"\r\n        },\r\n        \"time\": \"2020-12-01T04:53:52+00:00\",\r\n        \"bin\": [\r\n            \"phpunit\"\r\n        ],\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"8.5-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"The PHP Unit Testing framework.\",\r\n        \"homepage\": \"https://phpunit.de/\",\r\n        \"keywords\": [\r\n            \"phpunit\",\r\n            \"testing\",\r\n            \"xunit\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psr/container\",\r\n        \"version\": \"1.0.0\",\r\n        \"version_normalized\": \"1.0.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/php-fig/container.git\",\r\n            \"reference\": \"b7ce3b176482dbbc1245ebf52b181af44c2cf55f\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/php-fig/container/zipball/b7ce3b176482dbbc1245ebf52b181af44c2cf55f\",\r\n            \"reference\": \"b7ce3b176482dbbc1245ebf52b181af44c2cf55f\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.3.0\"\r\n        },\r\n        \"time\": \"2017-02-14T16:28:37+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Psr\\\\Container\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"PHP-FIG\",\r\n                \"homepage\": \"http://www.php-fig.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Common Container Interface (PHP FIG PSR-11)\",\r\n        \"homepage\": \"https://github.com/php-fig/container\",\r\n        \"keywords\": [\r\n            \"PSR-11\",\r\n            \"container\",\r\n            \"container-interface\",\r\n            \"container-interop\",\r\n            \"psr\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psr/event-dispatcher\",\r\n        \"version\": \"1.0.0\",\r\n        \"version_normalized\": \"1.0.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/php-fig/event-dispatcher.git\",\r\n            \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0\",\r\n            \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.0\"\r\n        },\r\n        \"time\": \"2019-01-08T18:20:26+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Psr\\\\EventDispatcher\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"PHP-FIG\",\r\n                \"homepage\": \"http://www.php-fig.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Standard interfaces for event handling.\",\r\n        \"keywords\": [\r\n            \"events\",\r\n            \"psr\",\r\n            \"psr-14\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psr/http-client\",\r\n        \"version\": \"1.0.1\",\r\n        \"version_normalized\": \"1.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/php-fig/http-client.git\",\r\n            \"reference\": \"2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/php-fig/http-client/zipball/2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\",\r\n            \"reference\": \"2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.0 || ^8.0\",\r\n            \"psr/http-message\": \"^1.0\"\r\n        },\r\n        \"time\": \"2020-06-29T06:28:15+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Psr\\\\Http\\\\Client\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"PHP-FIG\",\r\n                \"homepage\": \"http://www.php-fig.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Common interface for HTTP clients\",\r\n        \"homepage\": \"https://github.com/php-fig/http-client\",\r\n        \"keywords\": [\r\n            \"http\",\r\n            \"http-client\",\r\n            \"psr\",\r\n            \"psr-18\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psr/http-message\",\r\n        \"version\": \"1.0.1\",\r\n        \"version_normalized\": \"1.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/php-fig/http-message.git\",\r\n            \"reference\": \"f6561bf28d520154e4b0ec72be95418abe6d9363\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363\",\r\n            \"reference\": \"f6561bf28d520154e4b0ec72be95418abe6d9363\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.3.0\"\r\n        },\r\n        \"time\": \"2016-08-06T14:39:51+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"PHP-FIG\",\r\n                \"homepage\": \"http://www.php-fig.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Common interface for HTTP messages\",\r\n        \"homepage\": \"https://github.com/php-fig/http-message\",\r\n        \"keywords\": [\r\n            \"http\",\r\n            \"http-message\",\r\n            \"psr\",\r\n            \"psr-7\",\r\n            \"request\",\r\n            \"response\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psr/log\",\r\n        \"version\": \"1.1.3\",\r\n        \"version_normalized\": \"1.1.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/php-fig/log.git\",\r\n            \"reference\": \"0f73288fd15629204f9d42b7055f72dacbe811fc\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc\",\r\n            \"reference\": \"0f73288fd15629204f9d42b7055f72dacbe811fc\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.3.0\"\r\n        },\r\n        \"time\": \"2020-03-23T09:12:05+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.1.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Psr\\\\Log\\\\\": \"Psr/Log/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"PHP-FIG\",\r\n                \"homepage\": \"http://www.php-fig.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Common interface for logging libraries\",\r\n        \"homepage\": \"https://github.com/php-fig/log\",\r\n        \"keywords\": [\r\n            \"log\",\r\n            \"psr\",\r\n            \"psr-3\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psr/simple-cache\",\r\n        \"version\": \"1.0.1\",\r\n        \"version_normalized\": \"1.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/php-fig/simple-cache.git\",\r\n            \"reference\": \"408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/php-fig/simple-cache/zipball/408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\",\r\n            \"reference\": \"408d5eafb83c57f6365a3ca330ff23aa4a5fa39b\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.3.0\"\r\n        },\r\n        \"time\": \"2017-10-23T01:57:42+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Psr\\\\SimpleCache\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"PHP-FIG\",\r\n                \"homepage\": \"http://www.php-fig.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Common interfaces for simple caching\",\r\n        \"keywords\": [\r\n            \"cache\",\r\n            \"caching\",\r\n            \"psr\",\r\n            \"psr-16\",\r\n            \"simple-cache\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"psy/psysh\",\r\n        \"version\": \"v0.10.5\",\r\n        \"version_normalized\": \"0.10.5.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/bobthecow/psysh.git\",\r\n            \"reference\": \"7c710551d4a2653afa259c544508dc18a9098956\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/bobthecow/psysh/zipball/7c710551d4a2653afa259c544508dc18a9098956\",\r\n            \"reference\": \"7c710551d4a2653afa259c544508dc18a9098956\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"dnoegel/php-xdg-base-dir\": \"0.1.*\",\r\n            \"ext-json\": \"*\",\r\n            \"ext-tokenizer\": \"*\",\r\n            \"nikic/php-parser\": \"~4.0|~3.0|~2.0|~1.3\",\r\n            \"php\": \"^8.0 || ^7.0 || ^5.5.9\",\r\n            \"symfony/console\": \"~5.0|~4.0|~3.0|^2.4.2|~2.3.10\",\r\n            \"symfony/var-dumper\": \"~5.0|~4.0|~3.0|~2.7\"\r\n        },\r\n        \"require-dev\": {\r\n            \"bamarni/composer-bin-plugin\": \"^1.2\",\r\n            \"hoa/console\": \"3.17.*\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-pcntl\": \"Enabling the PCNTL extension makes PsySH a lot happier :)\",\r\n            \"ext-pdo-sqlite\": \"The doc command requires SQLite to work.\",\r\n            \"ext-posix\": \"If you have PCNTL, you'll want the POSIX extension as well.\",\r\n            \"ext-readline\": \"Enables support for arrow-key history navigation, and showing and manipulating command history.\",\r\n            \"hoa/console\": \"A pure PHP readline implementation. You'll want this if your PHP install doesn't already support readline or libedit.\"\r\n        },\r\n        \"time\": \"2020-12-04T02:51:30+00:00\",\r\n        \"bin\": [\r\n            \"bin/psysh\"\r\n        ],\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"0.10.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"src/functions.php\"\r\n            ],\r\n            \"psr-4\": {\r\n                \"Psy\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Justin Hileman\",\r\n                \"email\": \"justin@justinhileman.info\",\r\n                \"homepage\": \"http://justinhileman.com\"\r\n            }\r\n        ],\r\n        \"description\": \"An interactive shell for modern PHP.\",\r\n        \"homepage\": \"http://psysh.org\",\r\n        \"keywords\": [\r\n            \"REPL\",\r\n            \"console\",\r\n            \"interactive\",\r\n            \"shell\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"ralouphie/getallheaders\",\r\n        \"version\": \"3.0.3\",\r\n        \"version_normalized\": \"3.0.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/ralouphie/getallheaders.git\",\r\n            \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822\",\r\n            \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.6\"\r\n        },\r\n        \"require-dev\": {\r\n            \"php-coveralls/php-coveralls\": \"^2.1\",\r\n            \"phpunit/phpunit\": \"^5 || ^6.5\"\r\n        },\r\n        \"time\": \"2019-03-08T08:55:37+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"src/getallheaders.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Ralph Khattar\",\r\n                \"email\": \"ralph.khattar@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"A polyfill for getallheaders.\"\r\n    },\r\n    {\r\n        \"name\": \"ramsey/collection\",\r\n        \"version\": \"1.1.1\",\r\n        \"version_normalized\": \"1.1.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/ramsey/collection.git\",\r\n            \"reference\": \"24d93aefb2cd786b7edd9f45b554aea20b28b9b1\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/ramsey/collection/zipball/24d93aefb2cd786b7edd9f45b554aea20b28b9b1\",\r\n            \"reference\": \"24d93aefb2cd786b7edd9f45b554aea20b28b9b1\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^7.2 || ^8\"\r\n        },\r\n        \"require-dev\": {\r\n            \"captainhook/captainhook\": \"^5.3\",\r\n            \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.7.0\",\r\n            \"ergebnis/composer-normalize\": \"^2.6\",\r\n            \"fzaninotto/faker\": \"^1.5\",\r\n            \"hamcrest/hamcrest-php\": \"^2\",\r\n            \"jangregor/phpstan-prophecy\": \"^0.6\",\r\n            \"mockery/mockery\": \"^1.3\",\r\n            \"phpstan/extension-installer\": \"^1\",\r\n            \"phpstan/phpstan\": \"^0.12.32\",\r\n            \"phpstan/phpstan-mockery\": \"^0.12.5\",\r\n            \"phpstan/phpstan-phpunit\": \"^0.12.11\",\r\n            \"phpunit/phpunit\": \"^8.5\",\r\n            \"psy/psysh\": \"^0.10.4\",\r\n            \"slevomat/coding-standard\": \"^6.3\",\r\n            \"squizlabs/php_codesniffer\": \"^3.5\",\r\n            \"vimeo/psalm\": \"^3.12.2\"\r\n        },\r\n        \"time\": \"2020-09-10T20:58:17+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Ramsey\\\\Collection\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Ben Ramsey\",\r\n                \"email\": \"ben@benramsey.com\",\r\n                \"homepage\": \"https://benramsey.com\"\r\n            }\r\n        ],\r\n        \"description\": \"A PHP 7.2+ library for representing and manipulating collections.\",\r\n        \"keywords\": [\r\n            \"array\",\r\n            \"collection\",\r\n            \"hash\",\r\n            \"map\",\r\n            \"queue\",\r\n            \"set\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"ramsey/uuid\",\r\n        \"version\": \"4.1.1\",\r\n        \"version_normalized\": \"4.1.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/ramsey/uuid.git\",\r\n            \"reference\": \"cd4032040a750077205918c86049aa0f43d22947\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/ramsey/uuid/zipball/cd4032040a750077205918c86049aa0f43d22947\",\r\n            \"reference\": \"cd4032040a750077205918c86049aa0f43d22947\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"brick/math\": \"^0.8 || ^0.9\",\r\n            \"ext-json\": \"*\",\r\n            \"php\": \"^7.2 || ^8\",\r\n            \"ramsey/collection\": \"^1.0\",\r\n            \"symfony/polyfill-ctype\": \"^1.8\"\r\n        },\r\n        \"replace\": {\r\n            \"rhumsaa/uuid\": \"self.version\"\r\n        },\r\n        \"require-dev\": {\r\n            \"codeception/aspect-mock\": \"^3\",\r\n            \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.6.2 || ^0.7.0\",\r\n            \"doctrine/annotations\": \"^1.8\",\r\n            \"goaop/framework\": \"^2\",\r\n            \"mockery/mockery\": \"^1.3\",\r\n            \"moontoast/math\": \"^1.1\",\r\n            \"paragonie/random-lib\": \"^2\",\r\n            \"php-mock/php-mock-mockery\": \"^1.3\",\r\n            \"php-mock/php-mock-phpunit\": \"^2.5\",\r\n            \"php-parallel-lint/php-parallel-lint\": \"^1.1\",\r\n            \"phpbench/phpbench\": \"^0.17.1\",\r\n            \"phpstan/extension-installer\": \"^1.0\",\r\n            \"phpstan/phpstan\": \"^0.12\",\r\n            \"phpstan/phpstan-mockery\": \"^0.12\",\r\n            \"phpstan/phpstan-phpunit\": \"^0.12\",\r\n            \"phpunit/phpunit\": \"^8.5\",\r\n            \"psy/psysh\": \"^0.10.0\",\r\n            \"slevomat/coding-standard\": \"^6.0\",\r\n            \"squizlabs/php_codesniffer\": \"^3.5\",\r\n            \"vimeo/psalm\": \"3.9.4\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-bcmath\": \"Enables faster math with arbitrary-precision integers using BCMath.\",\r\n            \"ext-ctype\": \"Enables faster processing of character classification using ctype functions.\",\r\n            \"ext-gmp\": \"Enables faster math with arbitrary-precision integers using GMP.\",\r\n            \"ext-uuid\": \"Enables the use of PeclUuidTimeGenerator and PeclUuidRandomGenerator.\",\r\n            \"paragonie/random-lib\": \"Provides RandomLib for use with the RandomLibAdapter\",\r\n            \"ramsey/uuid-doctrine\": \"Allows the use of Ramsey\\\\Uuid\\\\Uuid as Doctrine field type.\"\r\n        },\r\n        \"time\": \"2020-08-18T17:17:46+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"4.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Ramsey\\\\Uuid\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"src/functions.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"description\": \"A PHP library for generating and working with universally unique identifiers (UUIDs).\",\r\n        \"homepage\": \"https://github.com/ramsey/uuid\",\r\n        \"keywords\": [\r\n            \"guid\",\r\n            \"identifier\",\r\n            \"uuid\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"scrivo/highlight.php\",\r\n        \"version\": \"v9.18.1.5\",\r\n        \"version_normalized\": \"9.18.1.5\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/scrivo/highlight.php.git\",\r\n            \"reference\": \"fa75a865928a4a5d49e5e77faca6bd2f2410baaf\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/scrivo/highlight.php/zipball/fa75a865928a4a5d49e5e77faca6bd2f2410baaf\",\r\n            \"reference\": \"fa75a865928a4a5d49e5e77faca6bd2f2410baaf\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-json\": \"*\",\r\n            \"ext-mbstring\": \"*\",\r\n            \"php\": \">=5.4\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^4.8|^5.7\",\r\n            \"sabberworm/php-css-parser\": \"^8.3\",\r\n            \"symfony/finder\": \"^2.8|^3.4\",\r\n            \"symfony/var-dumper\": \"^2.8|^3.4\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-dom\": \"Needed to make use of the features in the utilities namespace\"\r\n        },\r\n        \"time\": \"2020-11-22T06:07:40+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-0\": {\r\n                \"Highlight\\\\\": \"\",\r\n                \"HighlightUtilities\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"HighlightUtilities/functions.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Geert Bergman\",\r\n                \"homepage\": \"http://www.scrivo.org/\",\r\n                \"role\": \"Project Author\"\r\n            },\r\n            {\r\n                \"name\": \"Vladimir Jimenez\",\r\n                \"homepage\": \"https://allejo.io\",\r\n                \"role\": \"Maintainer\"\r\n            },\r\n            {\r\n                \"name\": \"Martin Folkers\",\r\n                \"homepage\": \"https://twobrain.io\",\r\n                \"role\": \"Contributor\"\r\n            }\r\n        ],\r\n        \"description\": \"Server side syntax highlighter that supports 185 languages. It's a PHP port of highlight.js\",\r\n        \"keywords\": [\r\n            \"code\",\r\n            \"highlight\",\r\n            \"highlight.js\",\r\n            \"highlight.php\",\r\n            \"syntax\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"sebastian/code-unit-reverse-lookup\",\r\n        \"version\": \"1.0.2\",\r\n        \"version_normalized\": \"1.0.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup.git\",\r\n            \"reference\": \"1de8cd5c010cb153fcd68b8d0f64606f523f7619\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/1de8cd5c010cb153fcd68b8d0f64606f523f7619\",\r\n            \"reference\": \"1de8cd5c010cb153fcd68b8d0f64606f523f7619\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.6\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^8.5\"\r\n        },\r\n        \"time\": \"2020-11-30T08:15:22+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Looks up which function or method a line of code belongs to\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/\"\r\n    },\r\n    {\r\n        \"name\": \"sebastian/comparator\",\r\n        \"version\": \"3.0.3\",\r\n        \"version_normalized\": \"3.0.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\r\n            \"reference\": \"1071dfcef776a57013124ff35e1fc41ccd294758\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/1071dfcef776a57013124ff35e1fc41ccd294758\",\r\n            \"reference\": \"1071dfcef776a57013124ff35e1fc41ccd294758\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\",\r\n            \"sebastian/diff\": \"^3.0\",\r\n            \"sebastian/exporter\": \"^3.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^8.5\"\r\n        },\r\n        \"time\": \"2020-11-30T08:04:30+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            },\r\n            {\r\n                \"name\": \"Jeff Welch\",\r\n                \"email\": \"whatthejeff@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Volker Dusch\",\r\n                \"email\": \"github@wallbash.com\"\r\n            },\r\n            {\r\n                \"name\": \"Bernhard Schussek\",\r\n                \"email\": \"bschussek@2bepublished.at\"\r\n            }\r\n        ],\r\n        \"description\": \"Provides the functionality to compare PHP values for equality\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/comparator\",\r\n        \"keywords\": [\r\n            \"comparator\",\r\n            \"compare\",\r\n            \"equality\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"sebastian/diff\",\r\n        \"version\": \"3.0.3\",\r\n        \"version_normalized\": \"3.0.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/diff.git\",\r\n            \"reference\": \"14f72dd46eaf2f2293cbe79c93cc0bc43161a211\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/14f72dd46eaf2f2293cbe79c93cc0bc43161a211\",\r\n            \"reference\": \"14f72dd46eaf2f2293cbe79c93cc0bc43161a211\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^7.5 || ^8.0\",\r\n            \"symfony/process\": \"^2 || ^3.3 || ^4\"\r\n        },\r\n        \"time\": \"2020-11-30T07:59:04+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            },\r\n            {\r\n                \"name\": \"Kore Nordmann\",\r\n                \"email\": \"mail@kore-nordmann.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Diff implementation\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/diff\",\r\n        \"keywords\": [\r\n            \"diff\",\r\n            \"udiff\",\r\n            \"unidiff\",\r\n            \"unified diff\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"sebastian/environment\",\r\n        \"version\": \"4.2.4\",\r\n        \"version_normalized\": \"4.2.4.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/environment.git\",\r\n            \"reference\": \"d47bbbad83711771f167c72d4e3f25f7fcc1f8b0\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/d47bbbad83711771f167c72d4e3f25f7fcc1f8b0\",\r\n            \"reference\": \"d47bbbad83711771f167c72d4e3f25f7fcc1f8b0\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^7.5\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-posix\": \"*\"\r\n        },\r\n        \"time\": \"2020-11-30T07:53:42+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"4.2-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Provides functionality to handle HHVM/PHP environments\",\r\n        \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\r\n        \"keywords\": [\r\n            \"Xdebug\",\r\n            \"environment\",\r\n            \"hhvm\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"sebastian/exporter\",\r\n        \"version\": \"3.1.3\",\r\n        \"version_normalized\": \"3.1.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\r\n            \"reference\": \"6b853149eab67d4da22291d36f5b0631c0fd856e\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/6b853149eab67d4da22291d36f5b0631c0fd856e\",\r\n            \"reference\": \"6b853149eab67d4da22291d36f5b0631c0fd856e\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.0\",\r\n            \"sebastian/recursion-context\": \"^3.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-mbstring\": \"*\",\r\n            \"phpunit/phpunit\": \"^6.0\"\r\n        },\r\n        \"time\": \"2020-11-30T07:47:53+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.1.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            },\r\n            {\r\n                \"name\": \"Jeff Welch\",\r\n                \"email\": \"whatthejeff@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Volker Dusch\",\r\n                \"email\": \"github@wallbash.com\"\r\n            },\r\n            {\r\n                \"name\": \"Adam Harvey\",\r\n                \"email\": \"aharvey@php.net\"\r\n            },\r\n            {\r\n                \"name\": \"Bernhard Schussek\",\r\n                \"email\": \"bschussek@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Provides the functionality to export PHP variables for visualization\",\r\n        \"homepage\": \"http://www.github.com/sebastianbergmann/exporter\",\r\n        \"keywords\": [\r\n            \"export\",\r\n            \"exporter\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"sebastian/global-state\",\r\n        \"version\": \"3.0.1\",\r\n        \"version_normalized\": \"3.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\r\n            \"reference\": \"474fb9edb7ab891665d3bfc6317f42a0a150454b\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/474fb9edb7ab891665d3bfc6317f42a0a150454b\",\r\n            \"reference\": \"474fb9edb7ab891665d3bfc6317f42a0a150454b\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2\",\r\n            \"sebastian/object-reflector\": \"^1.1.1\",\r\n            \"sebastian/recursion-context\": \"^3.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-dom\": \"*\",\r\n            \"phpunit/phpunit\": \"^8.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-uopz\": \"*\"\r\n        },\r\n        \"time\": \"2020-11-30T07:43:24+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Snapshotting of global state\",\r\n        \"homepage\": \"http://www.github.com/sebastianbergmann/global-state\",\r\n        \"keywords\": [\r\n            \"global state\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"sebastian/object-enumerator\",\r\n        \"version\": \"3.0.4\",\r\n        \"version_normalized\": \"3.0.4.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/object-enumerator.git\",\r\n            \"reference\": \"e67f6d32ebd0c749cf9d1dbd9f226c727043cdf2\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/e67f6d32ebd0c749cf9d1dbd9f226c727043cdf2\",\r\n            \"reference\": \"e67f6d32ebd0c749cf9d1dbd9f226c727043cdf2\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.0\",\r\n            \"sebastian/object-reflector\": \"^1.1.1\",\r\n            \"sebastian/recursion-context\": \"^3.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^6.0\"\r\n        },\r\n        \"time\": \"2020-11-30T07:40:27+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Traverses array structures and object graphs to enumerate all referenced objects\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/object-enumerator/\"\r\n    },\r\n    {\r\n        \"name\": \"sebastian/object-reflector\",\r\n        \"version\": \"1.1.2\",\r\n        \"version_normalized\": \"1.1.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/object-reflector.git\",\r\n            \"reference\": \"9b8772b9cbd456ab45d4a598d2dd1a1bced6363d\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/9b8772b9cbd456ab45d4a598d2dd1a1bced6363d\",\r\n            \"reference\": \"9b8772b9cbd456ab45d4a598d2dd1a1bced6363d\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^6.0\"\r\n        },\r\n        \"time\": \"2020-11-30T07:37:18+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Allows reflection of object attributes, including inherited and non-public ones\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/object-reflector/\"\r\n    },\r\n    {\r\n        \"name\": \"sebastian/recursion-context\",\r\n        \"version\": \"3.0.1\",\r\n        \"version_normalized\": \"3.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\r\n            \"reference\": \"367dcba38d6e1977be014dc4b22f47a484dac7fb\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/367dcba38d6e1977be014dc4b22f47a484dac7fb\",\r\n            \"reference\": \"367dcba38d6e1977be014dc4b22f47a484dac7fb\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^6.0\"\r\n        },\r\n        \"time\": \"2020-11-30T07:34:24+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"3.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            },\r\n            {\r\n                \"name\": \"Jeff Welch\",\r\n                \"email\": \"whatthejeff@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Adam Harvey\",\r\n                \"email\": \"aharvey@php.net\"\r\n            }\r\n        ],\r\n        \"description\": \"Provides functionality to recursively process PHP variables\",\r\n        \"homepage\": \"http://www.github.com/sebastianbergmann/recursion-context\"\r\n    },\r\n    {\r\n        \"name\": \"sebastian/resource-operations\",\r\n        \"version\": \"2.0.2\",\r\n        \"version_normalized\": \"2.0.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/resource-operations.git\",\r\n            \"reference\": \"31d35ca87926450c44eae7e2611d45a7a65ea8b3\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/31d35ca87926450c44eae7e2611d45a7a65ea8b3\",\r\n            \"reference\": \"31d35ca87926450c44eae7e2611d45a7a65ea8b3\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"time\": \"2020-11-30T07:30:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\"\r\n            }\r\n        ],\r\n        \"description\": \"Provides a list of PHP built-in functions that operate on resources\",\r\n        \"homepage\": \"https://www.github.com/sebastianbergmann/resource-operations\"\r\n    },\r\n    {\r\n        \"name\": \"sebastian/type\",\r\n        \"version\": \"1.1.4\",\r\n        \"version_normalized\": \"1.1.4.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/type.git\",\r\n            \"reference\": \"0150cfbc4495ed2df3872fb31b26781e4e077eb4\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/type/zipball/0150cfbc4495ed2df3872fb31b26781e4e077eb4\",\r\n            \"reference\": \"0150cfbc4495ed2df3872fb31b26781e4e077eb4\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^8.2\"\r\n        },\r\n        \"time\": \"2020-11-30T07:25:11+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"1.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"Collection of value objects that represent the types of the PHP type system\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/type\"\r\n    },\r\n    {\r\n        \"name\": \"sebastian/version\",\r\n        \"version\": \"2.0.1\",\r\n        \"version_normalized\": \"2.0.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/sebastianbergmann/version.git\",\r\n            \"reference\": \"99732be0ddb3361e16ad77b68ba41efc8e979019\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/99732be0ddb3361e16ad77b68ba41efc8e979019\",\r\n            \"reference\": \"99732be0ddb3361e16ad77b68ba41efc8e979019\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=5.6\"\r\n        },\r\n        \"time\": \"2016-10-03T07:35:21+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.0.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Sebastian Bergmann\",\r\n                \"email\": \"sebastian@phpunit.de\",\r\n                \"role\": \"lead\"\r\n            }\r\n        ],\r\n        \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\r\n        \"homepage\": \"https://github.com/sebastianbergmann/version\"\r\n    },\r\n    {\r\n        \"name\": \"spatie/laravel-permission\",\r\n        \"version\": \"3.18.0\",\r\n        \"version_normalized\": \"3.18.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/spatie/laravel-permission.git\",\r\n            \"reference\": \"1c51a5fa12131565fe3860705163e53d7a26258a\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/spatie/laravel-permission/zipball/1c51a5fa12131565fe3860705163e53d7a26258a\",\r\n            \"reference\": \"1c51a5fa12131565fe3860705163e53d7a26258a\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"illuminate/auth\": \"^5.8|^6.0|^7.0|^8.0\",\r\n            \"illuminate/container\": \"^5.8|^6.0|^7.0|^8.0\",\r\n            \"illuminate/contracts\": \"^5.8|^6.0|^7.0|^8.0\",\r\n            \"illuminate/database\": \"^5.8|^6.0|^7.0|^8.0\",\r\n            \"php\": \"^7.2.5|^8.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"orchestra/testbench\": \"^3.8|^4.0|^5.0|^6.0\",\r\n            \"phpunit/phpunit\": \"^8.0|^9.0\",\r\n            \"predis/predis\": \"^1.1\"\r\n        },\r\n        \"time\": \"2020-11-09T14:08:36+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Spatie\\\\Permission\\\\PermissionServiceProvider\"\r\n                ]\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Spatie\\\\Permission\\\\\": \"src\"\r\n            },\r\n            \"files\": [\r\n                \"src/helpers.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Freek Van der Herten\",\r\n                \"email\": \"freek@spatie.be\",\r\n                \"homepage\": \"https://spatie.be\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"Permission handling for Laravel 5.8 and up\",\r\n        \"homepage\": \"https://github.com/spatie/laravel-permission\",\r\n        \"keywords\": [\r\n            \"acl\",\r\n            \"laravel\",\r\n            \"permission\",\r\n            \"permissions\",\r\n            \"rbac\",\r\n            \"roles\",\r\n            \"security\",\r\n            \"spatie\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"swiftmailer/swiftmailer\",\r\n        \"version\": \"v6.2.4\",\r\n        \"version_normalized\": \"6.2.4.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/swiftmailer/swiftmailer.git\",\r\n            \"reference\": \"56f0ab23f54c4ccbb0d5dcc67ff8552e0c98d59e\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/swiftmailer/swiftmailer/zipball/56f0ab23f54c4ccbb0d5dcc67ff8552e0c98d59e\",\r\n            \"reference\": \"56f0ab23f54c4ccbb0d5dcc67ff8552e0c98d59e\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"egulias/email-validator\": \"^2.0\",\r\n            \"php\": \">=7.0.0\",\r\n            \"symfony/polyfill-iconv\": \"^1.0\",\r\n            \"symfony/polyfill-intl-idn\": \"^1.10\",\r\n            \"symfony/polyfill-mbstring\": \"^1.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"mockery/mockery\": \"^1.0\",\r\n            \"symfony/phpunit-bridge\": \"^4.4|^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-intl\": \"Needed to support internationalized email addresses\"\r\n        },\r\n        \"time\": \"2020-12-08T18:02:06+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"6.2-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"lib/swift_required.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Chris Corbyn\"\r\n            },\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Swiftmailer, free feature-rich PHP mailer\",\r\n        \"homepage\": \"https://swiftmailer.symfony.com\",\r\n        \"keywords\": [\r\n            \"email\",\r\n            \"mail\",\r\n            \"mailer\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/console\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/console.git\",\r\n            \"reference\": \"47c02526c532fb381374dab26df05e7313978976\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/console/zipball/47c02526c532fb381374dab26df05e7313978976\",\r\n            \"reference\": \"47c02526c532fb381374dab26df05e7313978976\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/polyfill-mbstring\": \"~1.0\",\r\n            \"symfony/polyfill-php73\": \"^1.8\",\r\n            \"symfony/polyfill-php80\": \"^1.15\",\r\n            \"symfony/service-contracts\": \"^1.1|^2\",\r\n            \"symfony/string\": \"^5.1\"\r\n        },\r\n        \"conflict\": {\r\n            \"symfony/dependency-injection\": \"<4.4\",\r\n            \"symfony/dotenv\": \"<5.1\",\r\n            \"symfony/event-dispatcher\": \"<4.4\",\r\n            \"symfony/lock\": \"<4.4\",\r\n            \"symfony/process\": \"<4.4\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/log-implementation\": \"1.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"psr/log\": \"~1.0\",\r\n            \"symfony/config\": \"^4.4|^5.0\",\r\n            \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n            \"symfony/event-dispatcher\": \"^4.4|^5.0\",\r\n            \"symfony/lock\": \"^4.4|^5.0\",\r\n            \"symfony/process\": \"^4.4|^5.0\",\r\n            \"symfony/var-dumper\": \"^4.4|^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"psr/log\": \"For using the console logger\",\r\n            \"symfony/event-dispatcher\": \"\",\r\n            \"symfony/lock\": \"\",\r\n            \"symfony/process\": \"\"\r\n        },\r\n        \"time\": \"2020-12-18T08:03:05+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\Console\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony Console Component\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"cli\",\r\n            \"command line\",\r\n            \"console\",\r\n            \"terminal\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/css-selector\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/css-selector.git\",\r\n            \"reference\": \"f789e7ead4c79e04ca9a6d6162fc629c89bd8054\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/css-selector/zipball/f789e7ead4c79e04ca9a6d6162fc629c89bd8054\",\r\n            \"reference\": \"f789e7ead4c79e04ca9a6d6162fc629c89bd8054\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\"\r\n        },\r\n        \"time\": \"2020-12-08T17:02:38+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\CssSelector\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Jean-François Simon\",\r\n                \"email\": \"jeanfrancois.simon@sensiolabs.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony CssSelector Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/deprecation-contracts\",\r\n        \"version\": \"v2.2.0\",\r\n        \"version_normalized\": \"2.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/deprecation-contracts.git\",\r\n            \"reference\": \"5fa56b4074d1ae755beb55617ddafe6f5d78f665\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/deprecation-contracts/zipball/5fa56b4074d1ae755beb55617ddafe6f5d78f665\",\r\n            \"reference\": \"5fa56b4074d1ae755beb55617ddafe6f5d78f665\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"time\": \"2020-09-07T11:33:47+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.2-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/contracts\",\r\n                \"url\": \"https://github.com/symfony/contracts\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"function.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"A generic function and convention to trigger deprecation notices\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/error-handler\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/error-handler.git\",\r\n            \"reference\": \"59b190ce16ddf32771a22087b60f6dafd3407147\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/error-handler/zipball/59b190ce16ddf32771a22087b60f6dafd3407147\",\r\n            \"reference\": \"59b190ce16ddf32771a22087b60f6dafd3407147\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"psr/log\": \"^1.0\",\r\n            \"symfony/polyfill-php80\": \"^1.15\",\r\n            \"symfony/var-dumper\": \"^4.4|^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"symfony/deprecation-contracts\": \"^2.1\",\r\n            \"symfony/http-kernel\": \"^4.4|^5.0\",\r\n            \"symfony/serializer\": \"^4.4|^5.0\"\r\n        },\r\n        \"time\": \"2020-12-09T18:54:12+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\ErrorHandler\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony ErrorHandler Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/event-dispatcher\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/event-dispatcher.git\",\r\n            \"reference\": \"1c93f7a1dff592c252574c79a8635a8a80856042\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/event-dispatcher/zipball/1c93f7a1dff592c252574c79a8635a8a80856042\",\r\n            \"reference\": \"1c93f7a1dff592c252574c79a8635a8a80856042\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/deprecation-contracts\": \"^2.1\",\r\n            \"symfony/event-dispatcher-contracts\": \"^2\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"conflict\": {\r\n            \"symfony/dependency-injection\": \"<4.4\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/event-dispatcher-implementation\": \"1.0\",\r\n            \"symfony/event-dispatcher-implementation\": \"2.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"psr/log\": \"~1.0\",\r\n            \"symfony/config\": \"^4.4|^5.0\",\r\n            \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n            \"symfony/error-handler\": \"^4.4|^5.0\",\r\n            \"symfony/expression-language\": \"^4.4|^5.0\",\r\n            \"symfony/http-foundation\": \"^4.4|^5.0\",\r\n            \"symfony/service-contracts\": \"^1.1|^2\",\r\n            \"symfony/stopwatch\": \"^4.4|^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/dependency-injection\": \"\",\r\n            \"symfony/http-kernel\": \"\"\r\n        },\r\n        \"time\": \"2020-12-18T08:03:05+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony EventDispatcher Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/event-dispatcher-contracts\",\r\n        \"version\": \"v2.2.0\",\r\n        \"version_normalized\": \"2.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/event-dispatcher-contracts.git\",\r\n            \"reference\": \"0ba7d54483095a198fa51781bc608d17e84dffa2\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/0ba7d54483095a198fa51781bc608d17e84dffa2\",\r\n            \"reference\": \"0ba7d54483095a198fa51781bc608d17e84dffa2\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"psr/event-dispatcher\": \"^1\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/event-dispatcher-implementation\": \"\"\r\n        },\r\n        \"time\": \"2020-09-07T11:33:47+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.2-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/contracts\",\r\n                \"url\": \"https://github.com/symfony/contracts\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Contracts\\\\EventDispatcher\\\\\": \"\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Generic abstractions related to dispatching event\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"abstractions\",\r\n            \"contracts\",\r\n            \"decoupling\",\r\n            \"interfaces\",\r\n            \"interoperability\",\r\n            \"standards\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/finder\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/finder.git\",\r\n            \"reference\": \"0b9231a5922fd7287ba5b411893c0ecd2733e5ba\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/finder/zipball/0b9231a5922fd7287ba5b411893c0ecd2733e5ba\",\r\n            \"reference\": \"0b9231a5922fd7287ba5b411893c0ecd2733e5ba\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\"\r\n        },\r\n        \"time\": \"2020-12-08T17:02:38+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\Finder\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony Finder Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/http-client-contracts\",\r\n        \"version\": \"v2.3.1\",\r\n        \"version_normalized\": \"2.3.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/http-client-contracts.git\",\r\n            \"reference\": \"41db680a15018f9c1d4b23516059633ce280ca33\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/http-client-contracts/zipball/41db680a15018f9c1d4b23516059633ce280ca33\",\r\n            \"reference\": \"41db680a15018f9c1d4b23516059633ce280ca33\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/http-client-implementation\": \"\"\r\n        },\r\n        \"time\": \"2020-10-14T17:08:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-version\": \"2.3\",\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"2.3-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/contracts\",\r\n                \"url\": \"https://github.com/symfony/contracts\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Contracts\\\\HttpClient\\\\\": \"\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Generic abstractions related to HTTP clients\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"abstractions\",\r\n            \"contracts\",\r\n            \"decoupling\",\r\n            \"interfaces\",\r\n            \"interoperability\",\r\n            \"standards\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/http-foundation\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/http-foundation.git\",\r\n            \"reference\": \"a1f6218b29897ab52acba58cfa905b83625bef8d\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/http-foundation/zipball/a1f6218b29897ab52acba58cfa905b83625bef8d\",\r\n            \"reference\": \"a1f6218b29897ab52acba58cfa905b83625bef8d\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/deprecation-contracts\": \"^2.1\",\r\n            \"symfony/polyfill-mbstring\": \"~1.1\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"require-dev\": {\r\n            \"predis/predis\": \"~1.0\",\r\n            \"symfony/cache\": \"^4.4|^5.0\",\r\n            \"symfony/expression-language\": \"^4.4|^5.0\",\r\n            \"symfony/mime\": \"^4.4|^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/mime\": \"To use the file extension guesser\"\r\n        },\r\n        \"time\": \"2020-12-18T10:00:10+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\HttpFoundation\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony HttpFoundation Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/http-kernel\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/http-kernel.git\",\r\n            \"reference\": \"1feb619286d819180f7b8bc0dc44f516d9c62647\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/http-kernel/zipball/1feb619286d819180f7b8bc0dc44f516d9c62647\",\r\n            \"reference\": \"1feb619286d819180f7b8bc0dc44f516d9c62647\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"psr/log\": \"~1.0\",\r\n            \"symfony/deprecation-contracts\": \"^2.1\",\r\n            \"symfony/error-handler\": \"^4.4|^5.0\",\r\n            \"symfony/event-dispatcher\": \"^5.0\",\r\n            \"symfony/http-client-contracts\": \"^1.1|^2\",\r\n            \"symfony/http-foundation\": \"^4.4|^5.0\",\r\n            \"symfony/polyfill-ctype\": \"^1.8\",\r\n            \"symfony/polyfill-php73\": \"^1.9\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"conflict\": {\r\n            \"symfony/browser-kit\": \"<4.4\",\r\n            \"symfony/cache\": \"<5.0\",\r\n            \"symfony/config\": \"<5.0\",\r\n            \"symfony/console\": \"<4.4\",\r\n            \"symfony/dependency-injection\": \"<5.1.8\",\r\n            \"symfony/doctrine-bridge\": \"<5.0\",\r\n            \"symfony/form\": \"<5.0\",\r\n            \"symfony/http-client\": \"<5.0\",\r\n            \"symfony/mailer\": \"<5.0\",\r\n            \"symfony/messenger\": \"<5.0\",\r\n            \"symfony/translation\": \"<5.0\",\r\n            \"symfony/twig-bridge\": \"<5.0\",\r\n            \"symfony/validator\": \"<5.0\",\r\n            \"twig/twig\": \"<2.4\"\r\n        },\r\n        \"provide\": {\r\n            \"psr/log-implementation\": \"1.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"psr/cache\": \"~1.0\",\r\n            \"symfony/browser-kit\": \"^4.4|^5.0\",\r\n            \"symfony/config\": \"^5.0\",\r\n            \"symfony/console\": \"^4.4|^5.0\",\r\n            \"symfony/css-selector\": \"^4.4|^5.0\",\r\n            \"symfony/dependency-injection\": \"^5.1.8\",\r\n            \"symfony/dom-crawler\": \"^4.4|^5.0\",\r\n            \"symfony/expression-language\": \"^4.4|^5.0\",\r\n            \"symfony/finder\": \"^4.4|^5.0\",\r\n            \"symfony/process\": \"^4.4|^5.0\",\r\n            \"symfony/routing\": \"^4.4|^5.0\",\r\n            \"symfony/stopwatch\": \"^4.4|^5.0\",\r\n            \"symfony/translation\": \"^4.4|^5.0\",\r\n            \"symfony/translation-contracts\": \"^1.1|^2\",\r\n            \"twig/twig\": \"^2.4|^3.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/browser-kit\": \"\",\r\n            \"symfony/config\": \"\",\r\n            \"symfony/console\": \"\",\r\n            \"symfony/dependency-injection\": \"\"\r\n        },\r\n        \"time\": \"2020-12-18T13:49:39+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\HttpKernel\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony HttpKernel Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/mime\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/mime.git\",\r\n            \"reference\": \"de97005aef7426ba008c46ba840fc301df577ada\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/mime/zipball/de97005aef7426ba008c46ba840fc301df577ada\",\r\n            \"reference\": \"de97005aef7426ba008c46ba840fc301df577ada\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/deprecation-contracts\": \"^2.1\",\r\n            \"symfony/polyfill-intl-idn\": \"^1.10\",\r\n            \"symfony/polyfill-mbstring\": \"^1.0\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"conflict\": {\r\n            \"symfony/mailer\": \"<4.4\"\r\n        },\r\n        \"require-dev\": {\r\n            \"egulias/email-validator\": \"^2.1.10\",\r\n            \"phpdocumentor/reflection-docblock\": \"^3.0|^4.0|^5.0\",\r\n            \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n            \"symfony/property-access\": \"^4.4|^5.1\",\r\n            \"symfony/property-info\": \"^4.4|^5.1\",\r\n            \"symfony/serializer\": \"^5.2\"\r\n        },\r\n        \"time\": \"2020-12-09T18:54:12+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\Mime\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"A library to manipulate MIME messages\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"mime\",\r\n            \"mime-type\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-ctype\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-ctype.git\",\r\n            \"reference\": \"f4ba089a5b6366e453971d3aad5fe8e897b37f41\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-ctype/zipball/f4ba089a5b6366e453971d3aad5fe8e897b37f41\",\r\n            \"reference\": \"f4ba089a5b6366e453971d3aad5fe8e897b37f41\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-ctype\": \"For best performance\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Ctype\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Gert de Pagter\",\r\n                \"email\": \"BackEndTea@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill for ctype functions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"ctype\",\r\n            \"polyfill\",\r\n            \"portable\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-iconv\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-iconv.git\",\r\n            \"reference\": \"c536646fdb4f29104dd26effc2fdcb9a5b085024\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-iconv/zipball/c536646fdb4f29104dd26effc2fdcb9a5b085024\",\r\n            \"reference\": \"c536646fdb4f29104dd26effc2fdcb9a5b085024\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-iconv\": \"For best performance\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Iconv\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill for the Iconv extension\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"iconv\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-intl-grapheme\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-intl-grapheme.git\",\r\n            \"reference\": \"c7cf3f858ec7d70b89559d6e6eb1f7c2517d479c\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/c7cf3f858ec7d70b89559d6e6eb1f7c2517d479c\",\r\n            \"reference\": \"c7cf3f858ec7d70b89559d6e6eb1f7c2517d479c\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-intl\": \"For best performance\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Intl\\\\Grapheme\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill for intl's grapheme_* functions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"grapheme\",\r\n            \"intl\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-intl-idn\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-intl-idn.git\",\r\n            \"reference\": \"3b75acd829741c768bc8b1f84eb33265e7cc5117\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/3b75acd829741c768bc8b1f84eb33265e7cc5117\",\r\n            \"reference\": \"3b75acd829741c768bc8b1f84eb33265e7cc5117\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\",\r\n            \"symfony/polyfill-intl-normalizer\": \"^1.10\",\r\n            \"symfony/polyfill-php72\": \"^1.10\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-intl\": \"For best performance\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Intl\\\\Idn\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Laurent Bassin\",\r\n                \"email\": \"laurent@bassin.info\"\r\n            },\r\n            {\r\n                \"name\": \"Trevor Rowbotham\",\r\n                \"email\": \"trevor.rowbotham@pm.me\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"idn\",\r\n            \"intl\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-intl-normalizer\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-intl-normalizer.git\",\r\n            \"reference\": \"727d1096295d807c309fb01a851577302394c897\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/727d1096295d807c309fb01a851577302394c897\",\r\n            \"reference\": \"727d1096295d807c309fb01a851577302394c897\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-intl\": \"For best performance\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Intl\\\\Normalizer\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ],\r\n            \"classmap\": [\r\n                \"Resources/stubs\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill for intl's Normalizer class and related functions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"intl\",\r\n            \"normalizer\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-mbstring\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\r\n            \"reference\": \"39d483bdf39be819deabf04ec872eb0b2410b531\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/39d483bdf39be819deabf04ec872eb0b2410b531\",\r\n            \"reference\": \"39d483bdf39be819deabf04ec872eb0b2410b531\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-mbstring\": \"For best performance\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill for the Mbstring extension\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"mbstring\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-php72\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-php72.git\",\r\n            \"reference\": \"cede45fcdfabdd6043b3592e83678e42ec69e930\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-php72/zipball/cede45fcdfabdd6043b3592e83678e42ec69e930\",\r\n            \"reference\": \"cede45fcdfabdd6043b3592e83678e42ec69e930\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Php72\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill backporting some PHP 7.2+ features to lower PHP versions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-php73\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-php73.git\",\r\n            \"reference\": \"8ff431c517be11c78c48a39a66d37431e26a6bed\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-php73/zipball/8ff431c517be11c78c48a39a66d37431e26a6bed\",\r\n            \"reference\": \"8ff431c517be11c78c48a39a66d37431e26a6bed\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Php73\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ],\r\n            \"classmap\": [\r\n                \"Resources/stubs\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill backporting some PHP 7.3+ features to lower PHP versions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/polyfill-php80\",\r\n        \"version\": \"v1.20.0\",\r\n        \"version_normalized\": \"1.20.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/polyfill-php80.git\",\r\n            \"reference\": \"e70aa8b064c5b72d3df2abd5ab1e90464ad009de\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/polyfill-php80/zipball/e70aa8b064c5b72d3df2abd5ab1e90464ad009de\",\r\n            \"reference\": \"e70aa8b064c5b72d3df2abd5ab1e90464ad009de\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.1\"\r\n        },\r\n        \"time\": \"2020-10-23T14:02:19+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-main\": \"1.20-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/polyfill\",\r\n                \"url\": \"https://github.com/symfony/polyfill\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Polyfill\\\\Php80\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"bootstrap.php\"\r\n            ],\r\n            \"classmap\": [\r\n                \"Resources/stubs\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Ion Bazan\",\r\n                \"email\": \"ion.bazan@gmail.com\"\r\n            },\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"compatibility\",\r\n            \"polyfill\",\r\n            \"portable\",\r\n            \"shim\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/process\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/process.git\",\r\n            \"reference\": \"bd8815b8b6705298beaa384f04fabd459c10bedd\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/process/zipball/bd8815b8b6705298beaa384f04fabd459c10bedd\",\r\n            \"reference\": \"bd8815b8b6705298beaa384f04fabd459c10bedd\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"time\": \"2020-12-08T17:03:37+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\Process\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony Process Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/routing\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/routing.git\",\r\n            \"reference\": \"934ac2720dcc878a47a45c986b483a7ee7193620\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/routing/zipball/934ac2720dcc878a47a45c986b483a7ee7193620\",\r\n            \"reference\": \"934ac2720dcc878a47a45c986b483a7ee7193620\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/deprecation-contracts\": \"^2.1\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"conflict\": {\r\n            \"symfony/config\": \"<5.0\",\r\n            \"symfony/dependency-injection\": \"<4.4\",\r\n            \"symfony/yaml\": \"<4.4\"\r\n        },\r\n        \"require-dev\": {\r\n            \"doctrine/annotations\": \"^1.7\",\r\n            \"psr/log\": \"~1.0\",\r\n            \"symfony/config\": \"^5.0\",\r\n            \"symfony/dependency-injection\": \"^4.4|^5.0\",\r\n            \"symfony/expression-language\": \"^4.4|^5.0\",\r\n            \"symfony/http-foundation\": \"^4.4|^5.0\",\r\n            \"symfony/yaml\": \"^4.4|^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"doctrine/annotations\": \"For using the annotation loader\",\r\n            \"symfony/config\": \"For using the all-in-one router or any loader\",\r\n            \"symfony/expression-language\": \"For using expression matching\",\r\n            \"symfony/http-foundation\": \"For using a Symfony Request object\",\r\n            \"symfony/yaml\": \"For using the YAML loader\"\r\n        },\r\n        \"time\": \"2020-12-08T17:03:37+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\Routing\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony Routing Component\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"router\",\r\n            \"routing\",\r\n            \"uri\",\r\n            \"url\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/service-contracts\",\r\n        \"version\": \"v2.2.0\",\r\n        \"version_normalized\": \"2.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/service-contracts.git\",\r\n            \"reference\": \"d15da7ba4957ffb8f1747218be9e1a121fd298a1\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/service-contracts/zipball/d15da7ba4957ffb8f1747218be9e1a121fd298a1\",\r\n            \"reference\": \"d15da7ba4957ffb8f1747218be9e1a121fd298a1\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"psr/container\": \"^1.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/service-implementation\": \"\"\r\n        },\r\n        \"time\": \"2020-09-07T11:33:47+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.2-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/contracts\",\r\n                \"url\": \"https://github.com/symfony/contracts\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Contracts\\\\Service\\\\\": \"\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Generic abstractions related to writing services\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"abstractions\",\r\n            \"contracts\",\r\n            \"decoupling\",\r\n            \"interfaces\",\r\n            \"interoperability\",\r\n            \"standards\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/string\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/string.git\",\r\n            \"reference\": \"5bd67751d2e3f7d6f770c9154b8fbcb2aa05f7ed\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/string/zipball/5bd67751d2e3f7d6f770c9154b8fbcb2aa05f7ed\",\r\n            \"reference\": \"5bd67751d2e3f7d6f770c9154b8fbcb2aa05f7ed\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/polyfill-ctype\": \"~1.8\",\r\n            \"symfony/polyfill-intl-grapheme\": \"~1.0\",\r\n            \"symfony/polyfill-intl-normalizer\": \"~1.0\",\r\n            \"symfony/polyfill-mbstring\": \"~1.0\",\r\n            \"symfony/polyfill-php80\": \"~1.15\"\r\n        },\r\n        \"require-dev\": {\r\n            \"symfony/error-handler\": \"^4.4|^5.0\",\r\n            \"symfony/http-client\": \"^4.4|^5.0\",\r\n            \"symfony/translation-contracts\": \"^1.1|^2\",\r\n            \"symfony/var-exporter\": \"^4.4|^5.0\"\r\n        },\r\n        \"time\": \"2020-12-05T07:33:16+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\String\\\\\": \"\"\r\n            },\r\n            \"files\": [\r\n                \"Resources/functions.php\"\r\n            ],\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony String component\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"grapheme\",\r\n            \"i18n\",\r\n            \"string\",\r\n            \"unicode\",\r\n            \"utf-8\",\r\n            \"utf8\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/translation\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/translation.git\",\r\n            \"reference\": \"a04209ba0d1391c828e5b2373181dac63c52ee70\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/translation/zipball/a04209ba0d1391c828e5b2373181dac63c52ee70\",\r\n            \"reference\": \"a04209ba0d1391c828e5b2373181dac63c52ee70\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/polyfill-mbstring\": \"~1.0\",\r\n            \"symfony/polyfill-php80\": \"^1.15\",\r\n            \"symfony/translation-contracts\": \"^2.3\"\r\n        },\r\n        \"conflict\": {\r\n            \"symfony/config\": \"<4.4\",\r\n            \"symfony/dependency-injection\": \"<5.0\",\r\n            \"symfony/http-kernel\": \"<5.0\",\r\n            \"symfony/twig-bundle\": \"<5.0\",\r\n            \"symfony/yaml\": \"<4.4\"\r\n        },\r\n        \"provide\": {\r\n            \"symfony/translation-implementation\": \"2.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"psr/log\": \"~1.0\",\r\n            \"symfony/config\": \"^4.4|^5.0\",\r\n            \"symfony/console\": \"^4.4|^5.0\",\r\n            \"symfony/dependency-injection\": \"^5.0\",\r\n            \"symfony/finder\": \"^4.4|^5.0\",\r\n            \"symfony/http-kernel\": \"^5.0\",\r\n            \"symfony/intl\": \"^4.4|^5.0\",\r\n            \"symfony/service-contracts\": \"^1.1.2|^2\",\r\n            \"symfony/yaml\": \"^4.4|^5.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"psr/log-implementation\": \"To use logging capability in translator\",\r\n            \"symfony/config\": \"\",\r\n            \"symfony/yaml\": \"\"\r\n        },\r\n        \"time\": \"2020-12-08T17:03:37+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"Resources/functions.php\"\r\n            ],\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\Translation\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Fabien Potencier\",\r\n                \"email\": \"fabien@symfony.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony Translation Component\",\r\n        \"homepage\": \"https://symfony.com\"\r\n    },\r\n    {\r\n        \"name\": \"symfony/translation-contracts\",\r\n        \"version\": \"v2.3.0\",\r\n        \"version_normalized\": \"2.3.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/translation-contracts.git\",\r\n            \"reference\": \"e2eaa60b558f26a4b0354e1bbb25636efaaad105\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/translation-contracts/zipball/e2eaa60b558f26a4b0354e1bbb25636efaaad105\",\r\n            \"reference\": \"e2eaa60b558f26a4b0354e1bbb25636efaaad105\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\"\r\n        },\r\n        \"suggest\": {\r\n            \"symfony/translation-implementation\": \"\"\r\n        },\r\n        \"time\": \"2020-09-28T13:05:58+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.3-dev\"\r\n            },\r\n            \"thanks\": {\r\n                \"name\": \"symfony/contracts\",\r\n                \"url\": \"https://github.com/symfony/contracts\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Contracts\\\\Translation\\\\\": \"\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Generic abstractions related to translation\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"abstractions\",\r\n            \"contracts\",\r\n            \"decoupling\",\r\n            \"interfaces\",\r\n            \"interoperability\",\r\n            \"standards\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"symfony/var-dumper\",\r\n        \"version\": \"v5.2.1\",\r\n        \"version_normalized\": \"5.2.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/symfony/var-dumper.git\",\r\n            \"reference\": \"13e7e882eaa55863faa7c4ad7c60f12f1a8b5089\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/symfony/var-dumper/zipball/13e7e882eaa55863faa7c4ad7c60f12f1a8b5089\",\r\n            \"reference\": \"13e7e882eaa55863faa7c4ad7c60f12f1a8b5089\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.2.5\",\r\n            \"symfony/polyfill-mbstring\": \"~1.0\",\r\n            \"symfony/polyfill-php80\": \"^1.15\"\r\n        },\r\n        \"conflict\": {\r\n            \"phpunit/phpunit\": \"<5.4.3\",\r\n            \"symfony/console\": \"<4.4\"\r\n        },\r\n        \"require-dev\": {\r\n            \"ext-iconv\": \"*\",\r\n            \"symfony/console\": \"^4.4|^5.0\",\r\n            \"symfony/process\": \"^4.4|^5.0\",\r\n            \"twig/twig\": \"^2.4|^3.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-iconv\": \"To convert non-UTF-8 strings to UTF-8 (or symfony/polyfill-iconv in case ext-iconv cannot be used).\",\r\n            \"ext-intl\": \"To show region name in time zone dump\",\r\n            \"symfony/console\": \"To use the ServerDumpCommand and/or the bin/var-dump-server script\"\r\n        },\r\n        \"time\": \"2020-12-16T17:02:19+00:00\",\r\n        \"bin\": [\r\n            \"Resources/bin/var-dump-server\"\r\n        ],\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"files\": [\r\n                \"Resources/functions/dump.php\"\r\n            ],\r\n            \"psr-4\": {\r\n                \"Symfony\\\\Component\\\\VarDumper\\\\\": \"\"\r\n            },\r\n            \"exclude-from-classmap\": [\r\n                \"/Tests/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Nicolas Grekas\",\r\n                \"email\": \"p@tchwork.com\"\r\n            },\r\n            {\r\n                \"name\": \"Symfony Community\",\r\n                \"homepage\": \"https://symfony.com/contributors\"\r\n            }\r\n        ],\r\n        \"description\": \"Symfony mechanism for exploring and dumping PHP variables\",\r\n        \"homepage\": \"https://symfony.com\",\r\n        \"keywords\": [\r\n            \"debug\",\r\n            \"dump\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"theseer/tokenizer\",\r\n        \"version\": \"1.2.0\",\r\n        \"version_normalized\": \"1.2.0.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/theseer/tokenizer.git\",\r\n            \"reference\": \"75a63c33a8577608444246075ea0af0d052e452a\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a\",\r\n            \"reference\": \"75a63c33a8577608444246075ea0af0d052e452a\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-dom\": \"*\",\r\n            \"ext-tokenizer\": \"*\",\r\n            \"ext-xmlwriter\": \"*\",\r\n            \"php\": \"^7.2 || ^8.0\"\r\n        },\r\n        \"time\": \"2020-07-12T23:59:07+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"classmap\": [\r\n                \"src/\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Arne Blankerts\",\r\n                \"email\": \"arne@blankerts.de\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"A small library for converting tokenized PHP source code into XML and potentially other formats\"\r\n    },\r\n    {\r\n        \"name\": \"tijsverkoyen/css-to-inline-styles\",\r\n        \"version\": \"2.2.3\",\r\n        \"version_normalized\": \"2.2.3.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/tijsverkoyen/CssToInlineStyles.git\",\r\n            \"reference\": \"b43b05cf43c1b6d849478965062b6ef73e223bb5\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/b43b05cf43c1b6d849478965062b6ef73e223bb5\",\r\n            \"reference\": \"b43b05cf43c1b6d849478965062b6ef73e223bb5\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"ext-dom\": \"*\",\r\n            \"ext-libxml\": \"*\",\r\n            \"php\": \"^5.5 || ^7.0 || ^8.0\",\r\n            \"symfony/css-selector\": \"^2.7 || ^3.0 || ^4.0 || ^5.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^4.8.35 || ^5.7 || ^6.0 || ^7.5\"\r\n        },\r\n        \"time\": \"2020-07-13T06:12:54+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"2.2.x-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"TijsVerkoyen\\\\CssToInlineStyles\\\\\": \"src\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Tijs Verkoyen\",\r\n                \"email\": \"css_to_inline_styles@verkoyen.eu\",\r\n                \"role\": \"Developer\"\r\n            }\r\n        ],\r\n        \"description\": \"CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.\",\r\n        \"homepage\": \"https://github.com/tijsverkoyen/CssToInlineStyles\"\r\n    },\r\n    {\r\n        \"name\": \"vlucas/phpdotenv\",\r\n        \"version\": \"v4.1.8\",\r\n        \"version_normalized\": \"4.1.8.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/vlucas/phpdotenv.git\",\r\n            \"reference\": \"572af79d913627a9d70374d27a6f5d689a35de32\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/572af79d913627a9d70374d27a6f5d689a35de32\",\r\n            \"reference\": \"572af79d913627a9d70374d27a6f5d689a35de32\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^5.5.9 || ^7.0 || ^8.0\",\r\n            \"phpoption/phpoption\": \"^1.7.3\",\r\n            \"symfony/polyfill-ctype\": \"^1.17\"\r\n        },\r\n        \"require-dev\": {\r\n            \"bamarni/composer-bin-plugin\": \"^1.4.1\",\r\n            \"ext-filter\": \"*\",\r\n            \"ext-pcre\": \"*\",\r\n            \"phpunit/phpunit\": \"^4.8.35 || ^5.7.27 || ^6.5.6 || ^7.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-filter\": \"Required to use the boolean validator.\",\r\n            \"ext-pcre\": \"Required to use most of the library.\"\r\n        },\r\n        \"time\": \"2020-07-14T19:22:52+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"4.1-dev\"\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Dotenv\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"BSD-3-Clause\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Graham Campbell\",\r\n                \"email\": \"graham@alt-three.com\",\r\n                \"homepage\": \"https://gjcampbell.co.uk/\"\r\n            },\r\n            {\r\n                \"name\": \"Vance Lucas\",\r\n                \"email\": \"vance@vancelucas.com\",\r\n                \"homepage\": \"https://vancelucas.com/\"\r\n            }\r\n        ],\r\n        \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\r\n        \"keywords\": [\r\n            \"dotenv\",\r\n            \"env\",\r\n            \"environment\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"voku/portable-ascii\",\r\n        \"version\": \"1.5.6\",\r\n        \"version_normalized\": \"1.5.6.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/voku/portable-ascii.git\",\r\n            \"reference\": \"80953678b19901e5165c56752d087fc11526017c\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/voku/portable-ascii/zipball/80953678b19901e5165c56752d087fc11526017c\",\r\n            \"reference\": \"80953678b19901e5165c56752d087fc11526017c\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \">=7.0.0\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"~6.0 || ~7.0 || ~9.0\"\r\n        },\r\n        \"suggest\": {\r\n            \"ext-intl\": \"Use Intl for transliterator_transliterate() support\"\r\n        },\r\n        \"time\": \"2020-11-12T00:07:28+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"voku\\\\\": \"src/voku/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Lars Moelleken\",\r\n                \"homepage\": \"http://www.moelleken.org/\"\r\n            }\r\n        ],\r\n        \"description\": \"Portable ASCII library - performance optimized (ascii) string functions for php.\",\r\n        \"homepage\": \"https://github.com/voku/portable-ascii\",\r\n        \"keywords\": [\r\n            \"ascii\",\r\n            \"clean\",\r\n            \"php\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"webmozart/assert\",\r\n        \"version\": \"1.9.1\",\r\n        \"version_normalized\": \"1.9.1.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/webmozart/assert.git\",\r\n            \"reference\": \"bafc69caeb4d49c39fd0779086c03a3738cbb389\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/webmozart/assert/zipball/bafc69caeb4d49c39fd0779086c03a3738cbb389\",\r\n            \"reference\": \"bafc69caeb4d49c39fd0779086c03a3738cbb389\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"php\": \"^5.3.3 || ^7.0 || ^8.0\",\r\n            \"symfony/polyfill-ctype\": \"^1.8\"\r\n        },\r\n        \"conflict\": {\r\n            \"phpstan/phpstan\": \"<0.12.20\",\r\n            \"vimeo/psalm\": \"<3.9.1\"\r\n        },\r\n        \"require-dev\": {\r\n            \"phpunit/phpunit\": \"^4.8.36 || ^7.5.13\"\r\n        },\r\n        \"time\": \"2020-07-08T17:02:28+00:00\",\r\n        \"type\": \"library\",\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Webmozart\\\\Assert\\\\\": \"src/\"\r\n            }\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Bernhard Schussek\",\r\n                \"email\": \"bschussek@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"Assertions to validate method input/output with nice error messages.\",\r\n        \"keywords\": [\r\n            \"assert\",\r\n            \"check\",\r\n            \"validate\"\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"yajra/laravel-datatables-oracle\",\r\n        \"version\": \"v9.15.2\",\r\n        \"version_normalized\": \"9.15.2.0\",\r\n        \"source\": {\r\n            \"type\": \"git\",\r\n            \"url\": \"https://github.com/yajra/laravel-datatables.git\",\r\n            \"reference\": \"e0b416d8b7d4472b16217c40e74284074cc34dde\"\r\n        },\r\n        \"dist\": {\r\n            \"type\": \"zip\",\r\n            \"url\": \"https://api.github.com/repos/yajra/laravel-datatables/zipball/e0b416d8b7d4472b16217c40e74284074cc34dde\",\r\n            \"reference\": \"e0b416d8b7d4472b16217c40e74284074cc34dde\",\r\n            \"shasum\": \"\"\r\n        },\r\n        \"require\": {\r\n            \"illuminate/database\": \"5.8.*|^6|^7|^8\",\r\n            \"illuminate/filesystem\": \"5.8.*|^6|^7|^8\",\r\n            \"illuminate/http\": \"5.8.*|^6|^7|^8\",\r\n            \"illuminate/support\": \"5.8.*|^6|^7|^8\",\r\n            \"illuminate/view\": \"5.8.*|^6|^7|^8\",\r\n            \"php\": \"^7.1.3|^8\"\r\n        },\r\n        \"require-dev\": {\r\n            \"orchestra/testbench\": \"^3.8\"\r\n        },\r\n        \"suggest\": {\r\n            \"yajra/laravel-datatables-buttons\": \"Plugin for server-side exporting of dataTables.\",\r\n            \"yajra/laravel-datatables-editor\": \"Plugin to use DataTables Editor (requires a license).\",\r\n            \"yajra/laravel-datatables-fractal\": \"Plugin for server-side response using Fractal.\",\r\n            \"yajra/laravel-datatables-html\": \"Plugin for server-side HTML builder of dataTables.\"\r\n        },\r\n        \"time\": \"2020-12-09T15:42:04+00:00\",\r\n        \"type\": \"library\",\r\n        \"extra\": {\r\n            \"branch-alias\": {\r\n                \"dev-master\": \"9.0-dev\"\r\n            },\r\n            \"laravel\": {\r\n                \"providers\": [\r\n                    \"Yajra\\\\DataTables\\\\DataTablesServiceProvider\"\r\n                ],\r\n                \"aliases\": {\r\n                    \"DataTables\": \"Yajra\\\\DataTables\\\\Facades\\\\DataTables\"\r\n                }\r\n            }\r\n        },\r\n        \"installation-source\": \"dist\",\r\n        \"autoload\": {\r\n            \"psr-4\": {\r\n                \"Yajra\\\\DataTables\\\\\": \"src/\"\r\n            },\r\n            \"files\": [\r\n                \"src/helper.php\"\r\n            ]\r\n        },\r\n        \"notification-url\": \"https://packagist.org/downloads/\",\r\n        \"license\": [\r\n            \"MIT\"\r\n        ],\r\n        \"authors\": [\r\n            {\r\n                \"name\": \"Arjay Angeles\",\r\n                \"email\": \"aqangeles@gmail.com\"\r\n            }\r\n        ],\r\n        \"description\": \"jQuery DataTables API for Laravel 4|5|6|7\",\r\n        \"keywords\": [\r\n            \"datatables\",\r\n            \"jquery\",\r\n            \"laravel\"\r\n        ]\r\n    }\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/composer/installed.json b/vendor/composer/installed.json
--- a/vendor/composer/installed.json	
+++ b/vendor/composer/installed.json	
@@ -1127,17 +1127,17 @@
     },
     {
         "name": "laravel/framework",
-        "version": "v7.30.0",
-        "version_normalized": "7.30.0.0",
+        "version": "v7.30.1",
+        "version_normalized": "7.30.1.0",
         "source": {
             "type": "git",
             "url": "https://github.com/laravel/framework.git",
-            "reference": "629c36a0fe87b66d8dccd3c82927950d0f59d3f9"
+            "reference": "e73855b18dcfc645c36d2474f437e4e73dd3c11d"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/laravel/framework/zipball/629c36a0fe87b66d8dccd3c82927950d0f59d3f9",
-            "reference": "629c36a0fe87b66d8dccd3c82927950d0f59d3f9",
+            "url": "https://api.github.com/repos/laravel/framework/zipball/e73855b18dcfc645c36d2474f437e4e73dd3c11d",
+            "reference": "e73855b18dcfc645c36d2474f437e4e73dd3c11d",
             "shasum": ""
         },
         "require": {
@@ -1251,7 +1251,7 @@
             "symfony/psr-http-message-bridge": "Required to use PSR-7 bridging features (^2.0).",
             "wildbit/swiftmailer-postmark": "Required to use Postmark mail driver (^3.0)."
         },
-        "time": "2020-12-01T15:01:25+00:00",
+        "time": "2020-12-22T17:00:45+00:00",
         "type": "library",
         "extra": {
             "branch-alias": {
@@ -1963,17 +1963,17 @@
     },
     {
         "name": "nikic/php-parser",
-        "version": "v4.10.3",
-        "version_normalized": "4.10.3.0",
+        "version": "v4.10.4",
+        "version_normalized": "4.10.4.0",
         "source": {
             "type": "git",
             "url": "https://github.com/nikic/PHP-Parser.git",
-            "reference": "dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984"
+            "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984",
-            "reference": "dbe56d23de8fcb157bbc0cfb3ad7c7de0cfb0984",
+            "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/c6d052fc58cb876152f89f532b95a8d7907e7f0e",
+            "reference": "c6d052fc58cb876152f89f532b95a8d7907e7f0e",
             "shasum": ""
         },
         "require": {
@@ -1984,7 +1984,7 @@
             "ircmaxell/php-yacc": "^0.0.7",
             "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
         },
-        "time": "2020-12-03T17:45:45+00:00",
+        "time": "2020-12-20T10:01:03+00:00",
         "bin": [
             "bin/php-parse"
         ],
@@ -3446,17 +3446,17 @@
     },
     {
         "name": "scrivo/highlight.php",
-        "version": "v9.18.1.5",
-        "version_normalized": "9.18.1.5",
+        "version": "v9.18.1.6",
+        "version_normalized": "9.18.1.6",
         "source": {
             "type": "git",
             "url": "https://github.com/scrivo/highlight.php.git",
-            "reference": "fa75a865928a4a5d49e5e77faca6bd2f2410baaf"
+            "reference": "44a3d4136edb5ad8551590bf90f437db80b2d466"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/scrivo/highlight.php/zipball/fa75a865928a4a5d49e5e77faca6bd2f2410baaf",
-            "reference": "fa75a865928a4a5d49e5e77faca6bd2f2410baaf",
+            "url": "https://api.github.com/repos/scrivo/highlight.php/zipball/44a3d4136edb5ad8551590bf90f437db80b2d466",
+            "reference": "44a3d4136edb5ad8551590bf90f437db80b2d466",
             "shasum": ""
         },
         "require": {
@@ -3470,10 +3470,7 @@
             "symfony/finder": "^2.8|^3.4",
             "symfony/var-dumper": "^2.8|^3.4"
         },
-        "suggest": {
-            "ext-dom": "Needed to make use of the features in the utilities namespace"
-        },
-        "time": "2020-11-22T06:07:40+00:00",
+        "time": "2020-12-22T19:20:29+00:00",
         "type": "library",
         "installation-source": "dist",
         "autoload": {
Index: app/Http/Controllers/Admin/ServiceController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Http\\Controllers\\Admin;\r\n\r\nuse App\\Http\\Controllers\\Controller;\r\nuse App\\Http\\Requests\\Service\\ServiceRequest;\r\nuse App\\Repositories\\Eloquents\\ServiceEloquent;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass ServiceController extends Controller\r\n{\r\n    private $service;\r\n\r\n    public function __construct(ServiceEloquent $service)\r\n    {\r\n        $this->service = $service;\r\n    }\r\n\r\n    public function index()\r\n    {\r\n        return view(admin_services_vw() . '.index');\r\n    }\r\n\r\n    public function create()\r\n    {\r\n        return view(admin_services_vw() . '.create');\r\n    }\r\n\r\n    public function edit($id)\r\n    {\r\n        $service = $this->service->getById($id);\r\n        $data = [\r\n            'service' => $service\r\n        ];\r\n        return view(admin_services_vw() . '.edit', $data);\r\n    }\r\n\r\n    public function anyData()\r\n    {\r\n        return $this->service->anyData();\r\n    }\r\n\r\n\r\n    public function store(ServiceRequest $request)\r\n    {\r\n        return $this->service->create($request->all());\r\n    }\r\n\r\n    public function update(ServiceRequest $request, $id)\r\n    {\r\n        return $this->service->update($request->all(), $id);\r\n    }\r\n\r\n    public function delete($id)\r\n    {\r\n        return $this->service->delete($id);\r\n    }\r\n\r\n    public function serviceActivate(Request $request)\r\n    {\r\n        return $this->service->serviceActivate($request->only('service_id'));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Http/Controllers/Admin/ServiceController.php b/app/Http/Controllers/Admin/ServiceController.php
--- a/app/Http/Controllers/Admin/ServiceController.php	
+++ b/app/Http/Controllers/Admin/ServiceController.php	
@@ -4,6 +4,7 @@
 
 use App\Http\Controllers\Controller;
 use App\Http\Requests\Service\ServiceRequest;
+use App\Models\Service;
 use App\Repositories\Eloquents\ServiceEloquent;
 use Illuminate\Http\Request;
 
Index: resources/lang/en/validation.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nreturn [\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    | Validation Language Lines\r\n    |--------------------------------------------------------------------------\r\n    |\r\n    | The following language lines contain the default error messages used by\r\n    | the validator class. Some of these rules have multiple versions such\r\n    | as the size rules. Feel free to tweak each of these messages here.\r\n    |\r\n    */\r\n\r\n    'accepted' => 'The :attribute must be accepted.',\r\n    'active_url' => 'The :attribute is not a valid URL.',\r\n    'after' => 'The :attribute must be a date after :date.',\r\n    'after_or_equal' => 'The :attribute must be a date after or equal to :date.',\r\n    'alpha' => 'The :attribute may only contain letters.',\r\n    'alpha_dash' => 'The :attribute may only contain letters, numbers, dashes and underscores.',\r\n    'alpha_num' => 'The :attribute may only contain letters and numbers.',\r\n    'array' => 'The :attribute must be an array.',\r\n    'before' => 'The :attribute must be a date before :date.',\r\n    'before_or_equal' => 'The :attribute must be a date before or equal to :date.',\r\n    'between' => [\r\n        'numeric' => 'The :attribute must be between :min and :max.',\r\n        'file' => 'The :attribute must be between :min and :max kilobytes.',\r\n        'string' => 'The :attribute must be between :min and :max characters.',\r\n        'array' => 'The :attribute must have between :min and :max items.',\r\n    ],\r\n    'boolean' => 'The :attribute field must be true or false.',\r\n    'confirmed' => 'The :attribute confirmation does not match.',\r\n    'date' => 'The :attribute is not a valid date.',\r\n    'date_equals' => 'The :attribute must be a date equal to :date.',\r\n    'date_format' => 'The :attribute does not match the format :format.',\r\n    'different' => 'The :attribute and :other must be different.',\r\n    'digits' => 'The :attribute must be :digits digits.',\r\n    'digits_between' => 'The :attribute must be between :min and :max digits.',\r\n    'dimensions' => 'The :attribute has invalid image dimensions.',\r\n    'distinct' => 'The :attribute field has a duplicate value.',\r\n    'email' => 'The :attribute must be a valid email address.',\r\n    'ends_with' => 'The :attribute must end with one of the following: :values.',\r\n    'exists' => 'The selected :attribute is invalid.',\r\n    'file' => 'The :attribute must be a file.',\r\n    'filled' => 'The :attribute field must have a value.',\r\n    'gt' => [\r\n        'numeric' => 'The :attribute must be greater than :value.',\r\n        'file' => 'The :attribute must be greater than :value kilobytes.',\r\n        'string' => 'The :attribute must be greater than :value characters.',\r\n        'array' => 'The :attribute must have more than :value items.',\r\n    ],\r\n    'gte' => [\r\n        'numeric' => 'The :attribute must be greater than or equal :value.',\r\n        'file' => 'The :attribute must be greater than or equal :value kilobytes.',\r\n        'string' => 'The :attribute must be greater than or equal :value characters.',\r\n        'array' => 'The :attribute must have :value items or more.',\r\n    ],\r\n    'image' => 'The :attribute must be an image.',\r\n    'in' => 'The selected :attribute is invalid.',\r\n    'in_array' => 'The :attribute field does not exist in :other.',\r\n    'integer' => 'The :attribute must be an integer.',\r\n    'ip' => 'The :attribute must be a valid IP address.',\r\n    'ipv4' => 'The :attribute must be a valid IPv4 address.',\r\n    'ipv6' => 'The :attribute must be a valid IPv6 address.',\r\n    'json' => 'The :attribute must be a valid JSON string.',\r\n    'lt' => [\r\n        'numeric' => 'The :attribute must be less than :value.',\r\n        'file' => 'The :attribute must be less than :value kilobytes.',\r\n        'string' => 'The :attribute must be less than :value characters.',\r\n        'array' => 'The :attribute must have less than :value items.',\r\n    ],\r\n    'lte' => [\r\n        'numeric' => 'The :attribute must be less than or equal :value.',\r\n        'file' => 'The :attribute must be less than or equal :value kilobytes.',\r\n        'string' => 'The :attribute must be less than or equal :value characters.',\r\n        'array' => 'The :attribute must not have more than :value items.',\r\n    ],\r\n    'max' => [\r\n        'numeric' => 'The :attribute may not be greater than :max.',\r\n        'file' => 'The :attribute may not be greater than :max kilobytes.',\r\n        'string' => 'The :attribute may not be greater than :max characters.',\r\n        'array' => 'The :attribute may not have more than :max items.',\r\n    ],\r\n    'mimes' => 'The :attribute must be a file of type: :values.',\r\n    'mimetypes' => 'The :attribute must be a file of type: :values.',\r\n    'min' => [\r\n        'numeric' => 'The :attribute must be at least :min.',\r\n        'file' => 'The :attribute must be at least :min kilobytes.',\r\n        'string' => 'The :attribute must be at least :min characters.',\r\n        'array' => 'The :attribute must have at least :min items.',\r\n    ],\r\n    'not_in' => 'The selected :attribute is invalid.',\r\n    'not_regex' => 'The :attribute format is invalid.',\r\n    'numeric' => 'The :attribute must be a number.',\r\n    'password' => 'The password is incorrect.',\r\n    'present' => 'The :attribute field must be present.',\r\n    'regex' => 'The :attribute format is invalid.',\r\n    'required' => 'The :attribute field is required.',\r\n    'required_if' => 'The :attribute field is required when :other is :value.',\r\n    'required_unless' => 'The :attribute field is required unless :other is in :values.',\r\n    'required_with' => 'The :attribute field is required when :values is present.',\r\n    'required_with_all' => 'The :attribute field is required when :values are present.',\r\n    'required_without' => 'The :attribute field is required when :values is not present.',\r\n    'required_without_all' => 'The :attribute field is required when none of :values are present.',\r\n    'same' => 'The :attribute and :other must match.',\r\n    'size' => [\r\n        'numeric' => 'The :attribute must be :size.',\r\n        'file' => 'The :attribute must be :size kilobytes.',\r\n        'string' => 'The :attribute must be :size characters.',\r\n        'array' => 'The :attribute must contain :size items.',\r\n    ],\r\n    'starts_with' => 'The :attribute must start with one of the following: :values.',\r\n    'string' => 'The :attribute must be a string.',\r\n    'timezone' => 'The :attribute must be a valid zone.',\r\n    'unique' => 'The :attribute has already been taken.',\r\n    'uploaded' => 'The :attribute failed to upload.',\r\n    'url' => 'The :attribute format is invalid.',\r\n    'uuid' => 'The :attribute must be a valid UUID.',\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    | Custom Validation Language Lines\r\n    |--------------------------------------------------------------------------\r\n    |\r\n    | Here you may specify custom validation messages for attributes using the\r\n    | convention \"attribute.rule\" to name the lines. This makes it quick to\r\n    | specify a specific custom language line for a given attribute rule.\r\n    |\r\n    */\r\n\r\n    'custom' => [\r\n        'attribute-name' => [\r\n            'rule-name' => 'custom-message',\r\n        ],\r\n    ],\r\n\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    | Custom Validation Attributes\r\n    |--------------------------------------------------------------------------\r\n    |\r\n    | The following language lines are used to swap our attribute placeholder\r\n    | with something more reader friendly such as \"E-Mail Address\" instead\r\n    | of \"email\". This simply helps us make our message more expressive.\r\n    |\r\n    */\r\n\r\n    'attributes' => [],\r\n\r\n];\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/lang/en/validation.php b/resources/lang/en/validation.php
--- a/resources/lang/en/validation.php	
+++ b/resources/lang/en/validation.php	
@@ -146,6 +146,25 @@
     |
     */
 
-    'attributes' => [],
+    'attributes' => [
+        'title' => [
+//            'ar' => 'title Arabic',
+            'en' => 'title English',
+//            'es' => 'title Spanish',
+        ],
+        'description' => [
+//            'ar' => 'description Arabic',
+            'en' => 'description English',
+//            'es' => 'description Spanish',
+        ],
+
+        'dob'                   => 'birth date',
+        'religion'              => 'religion',
+        'education'             => 'education',
+        'interest_id.*'         => 'interests',
+        'hobby_id.*'            => 'hobbies',
+        'photo'                 => 'photo',
+        'cover'                 => 'cover',
+    ],
 
 ];
Index: vendor/laravel/framework/src/Illuminate/Validation/Concerns/ValidatesAttributes.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Validation\\Concerns;\r\n\r\nuse Countable;\r\nuse DateTime;\r\nuse DateTimeInterface;\r\nuse Egulias\\EmailValidator\\EmailValidator;\r\nuse Egulias\\EmailValidator\\Validation\\DNSCheckValidation;\r\nuse Egulias\\EmailValidator\\Validation\\MultipleValidationWithAnd;\r\nuse Egulias\\EmailValidator\\Validation\\NoRFCWarningsValidation;\r\nuse Egulias\\EmailValidator\\Validation\\RFCValidation;\r\nuse Egulias\\EmailValidator\\Validation\\SpoofCheckValidation;\r\nuse Exception;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Support\\Arr;\r\nuse Illuminate\\Support\\Carbon;\r\nuse Illuminate\\Support\\Facades\\Date;\r\nuse Illuminate\\Support\\Str;\r\nuse Illuminate\\Validation\\Rules\\Exists;\r\nuse Illuminate\\Validation\\Rules\\Unique;\r\nuse Illuminate\\Validation\\ValidationData;\r\nuse InvalidArgumentException;\r\nuse Symfony\\Component\\HttpFoundation\\File\\File;\r\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\r\n\r\ntrait ValidatesAttributes\r\n{\r\n    /**\r\n     * Validate that an attribute was \"accepted\".\r\n     *\r\n     * This validation rule implies the attribute is \"required\".\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateAccepted($attribute, $value)\r\n    {\r\n        $acceptable = ['yes', 'on', '1', 1, true, 'true'];\r\n\r\n        return $this->validateRequired($attribute, $value) && in_array($value, $acceptable, true);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is an active URL.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateActiveUrl($attribute, $value)\r\n    {\r\n        if (! is_string($value)) {\r\n            return false;\r\n        }\r\n\r\n        if ($url = parse_url($value, PHP_URL_HOST)) {\r\n            try {\r\n                return count(dns_get_record($url, DNS_A | DNS_AAAA)) > 0;\r\n            } catch (Exception $e) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * \"Break\" on first validation fail.\r\n     *\r\n     * Always returns true, just lets us put \"bail\" in rules.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function validateBail()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate the date is before a given date.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateBefore($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'before');\r\n\r\n        return $this->compareDates($attribute, $value, $parameters, '<');\r\n    }\r\n\r\n    /**\r\n     * Validate the date is before or equal a given date.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateBeforeOrEqual($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'before_or_equal');\r\n\r\n        return $this->compareDates($attribute, $value, $parameters, '<=');\r\n    }\r\n\r\n    /**\r\n     * Validate the date is after a given date.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateAfter($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'after');\r\n\r\n        return $this->compareDates($attribute, $value, $parameters, '>');\r\n    }\r\n\r\n    /**\r\n     * Validate the date is equal or after a given date.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateAfterOrEqual($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'after_or_equal');\r\n\r\n        return $this->compareDates($attribute, $value, $parameters, '>=');\r\n    }\r\n\r\n    /**\r\n     * Compare a given date against another using an operator.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @param  string  $operator\r\n     * @return bool\r\n     */\r\n    protected function compareDates($attribute, $value, $parameters, $operator)\r\n    {\r\n        if (! is_string($value) && ! is_numeric($value) && ! $value instanceof DateTimeInterface) {\r\n            return false;\r\n        }\r\n\r\n        if ($format = $this->getDateFormat($attribute)) {\r\n            return $this->checkDateTimeOrder($format, $value, $parameters[0], $operator);\r\n        }\r\n\r\n        if (! $date = $this->getDateTimestamp($parameters[0])) {\r\n            $date = $this->getDateTimestamp($this->getValue($parameters[0]));\r\n        }\r\n\r\n        return $this->compare($this->getDateTimestamp($value), $date, $operator);\r\n    }\r\n\r\n    /**\r\n     * Get the date format for an attribute if it has one.\r\n     *\r\n     * @param  string  $attribute\r\n     * @return string|null\r\n     */\r\n    protected function getDateFormat($attribute)\r\n    {\r\n        if ($result = $this->getRule($attribute, 'DateFormat')) {\r\n            return $result[1][0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the date timestamp.\r\n     *\r\n     * @param  mixed  $value\r\n     * @return int\r\n     */\r\n    protected function getDateTimestamp($value)\r\n    {\r\n        if ($value instanceof DateTimeInterface) {\r\n            return $value->getTimestamp();\r\n        }\r\n\r\n        if ($this->isTestingRelativeDateTime($value)) {\r\n            $date = $this->getDateTime($value);\r\n\r\n            if (! is_null($date)) {\r\n                return $date->getTimestamp();\r\n            }\r\n        }\r\n\r\n        return strtotime($value);\r\n    }\r\n\r\n    /**\r\n     * Given two date/time strings, check that one is after the other.\r\n     *\r\n     * @param  string  $format\r\n     * @param  string  $first\r\n     * @param  string  $second\r\n     * @param  string  $operator\r\n     * @return bool\r\n     */\r\n    protected function checkDateTimeOrder($format, $first, $second, $operator)\r\n    {\r\n        $firstDate = $this->getDateTimeWithOptionalFormat($format, $first);\r\n\r\n        if (! $secondDate = $this->getDateTimeWithOptionalFormat($format, $second)) {\r\n            $secondDate = $this->getDateTimeWithOptionalFormat($format, $this->getValue($second));\r\n        }\r\n\r\n        return ($firstDate && $secondDate) && ($this->compare($firstDate, $secondDate, $operator));\r\n    }\r\n\r\n    /**\r\n     * Get a DateTime instance from a string.\r\n     *\r\n     * @param  string  $format\r\n     * @param  string  $value\r\n     * @return \\DateTime|null\r\n     */\r\n    protected function getDateTimeWithOptionalFormat($format, $value)\r\n    {\r\n        if ($date = DateTime::createFromFormat('!'.$format, $value)) {\r\n            return $date;\r\n        }\r\n\r\n        return $this->getDateTime($value);\r\n    }\r\n\r\n    /**\r\n     * Get a DateTime instance from a string with no format.\r\n     *\r\n     * @param  string  $value\r\n     * @return \\DateTime|null\r\n     */\r\n    protected function getDateTime($value)\r\n    {\r\n        try {\r\n            if ($this->isTestingRelativeDateTime($value)) {\r\n                return Date::parse($value);\r\n            }\r\n\r\n            return date_create($value) ?: null;\r\n        } catch (Exception $e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the given value should be adjusted to Carbon::getTestNow().\r\n     *\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    protected function isTestingRelativeDateTime($value)\r\n    {\r\n        return Carbon::hasTestNow() && is_string($value) && (\r\n            $value === 'now' || Carbon::hasRelativeKeywords($value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute contains only alphabetic characters.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateAlpha($attribute, $value)\r\n    {\r\n        return is_string($value) && preg_match('/^[\\pL\\pM]+$/u', $value);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute contains only alpha-numeric characters, dashes, and underscores.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateAlphaDash($attribute, $value)\r\n    {\r\n        if (! is_string($value) && ! is_numeric($value)) {\r\n            return false;\r\n        }\r\n\r\n        return preg_match('/^[\\pL\\pM\\pN_-]+$/u', $value) > 0;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute contains only alpha-numeric characters.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateAlphaNum($attribute, $value)\r\n    {\r\n        if (! is_string($value) && ! is_numeric($value)) {\r\n            return false;\r\n        }\r\n\r\n        return preg_match('/^[\\pL\\pM\\pN]+$/u', $value) > 0;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is an array.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateArray($attribute, $value, $parameters = [])\r\n    {\r\n        if (! is_array($value)) {\r\n            return false;\r\n        }\r\n\r\n        if (empty($parameters)) {\r\n            return true;\r\n        }\r\n\r\n        return empty(array_diff_key($value, array_fill_keys($parameters, '')));\r\n    }\r\n\r\n    /**\r\n     * Validate the size of an attribute is between a set of values.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateBetween($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(2, $parameters, 'between');\r\n\r\n        $size = $this->getSize($attribute, $value);\r\n\r\n        return $size >= $parameters[0] && $size <= $parameters[1];\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a boolean.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateBoolean($attribute, $value)\r\n    {\r\n        $acceptable = [true, false, 0, 1, '0', '1'];\r\n\r\n        return in_array($value, $acceptable, true);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute has a matching confirmation.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateConfirmed($attribute, $value)\r\n    {\r\n        return $this->validateSame($attribute, $value, [$attribute.'_confirmation']);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid date.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateDate($attribute, $value)\r\n    {\r\n        if ($value instanceof DateTimeInterface) {\r\n            return true;\r\n        }\r\n\r\n        if ((! is_string($value) && ! is_numeric($value)) || strtotime($value) === false) {\r\n            return false;\r\n        }\r\n\r\n        $date = date_parse($value);\r\n\r\n        return checkdate($date['month'], $date['day'], $date['year']);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute matches a date format.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDateFormat($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'date_format');\r\n\r\n        if (! is_string($value) && ! is_numeric($value)) {\r\n            return false;\r\n        }\r\n\r\n        $format = $parameters[0];\r\n\r\n        $date = DateTime::createFromFormat('!'.$format, $value);\r\n\r\n        return $date && $date->format($format) == $value;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is equal to another date.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDateEquals($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'date_equals');\r\n\r\n        return $this->compareDates($attribute, $value, $parameters, '=');\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is different from another attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDifferent($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'different');\r\n\r\n        foreach ($parameters as $parameter) {\r\n            if (Arr::has($this->data, $parameter)) {\r\n                $other = Arr::get($this->data, $parameter);\r\n\r\n                if ($value === $other) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute has a given number of digits.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDigits($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'digits');\r\n\r\n        return ! preg_match('/[^0-9]/', $value)\r\n                    && strlen((string) $value) == $parameters[0];\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is between a given number of digits.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDigitsBetween($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(2, $parameters, 'digits_between');\r\n\r\n        $length = strlen((string) $value);\r\n\r\n        return ! preg_match('/[^0-9]/', $value)\r\n                    && $length >= $parameters[0] && $length <= $parameters[1];\r\n    }\r\n\r\n    /**\r\n     * Validate the dimensions of an image matches the given values.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDimensions($attribute, $value, $parameters)\r\n    {\r\n        if ($this->isValidFileInstance($value) && in_array($value->getMimeType(), ['image/svg+xml', 'image/svg'])) {\r\n            return true;\r\n        }\r\n\r\n        if (! $this->isValidFileInstance($value) || ! $sizeDetails = @getimagesize($value->getRealPath())) {\r\n            return false;\r\n        }\r\n\r\n        $this->requireParameterCount(1, $parameters, 'dimensions');\r\n\r\n        [$width, $height] = $sizeDetails;\r\n\r\n        $parameters = $this->parseNamedParameters($parameters);\r\n\r\n        if ($this->failsBasicDimensionChecks($parameters, $width, $height) ||\r\n            $this->failsRatioCheck($parameters, $width, $height)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Test if the given width and height fail any conditions.\r\n     *\r\n     * @param  array  $parameters\r\n     * @param  int  $width\r\n     * @param  int  $height\r\n     * @return bool\r\n     */\r\n    protected function failsBasicDimensionChecks($parameters, $width, $height)\r\n    {\r\n        return (isset($parameters['width']) && $parameters['width'] != $width) ||\r\n               (isset($parameters['min_width']) && $parameters['min_width'] > $width) ||\r\n               (isset($parameters['max_width']) && $parameters['max_width'] < $width) ||\r\n               (isset($parameters['height']) && $parameters['height'] != $height) ||\r\n               (isset($parameters['min_height']) && $parameters['min_height'] > $height) ||\r\n               (isset($parameters['max_height']) && $parameters['max_height'] < $height);\r\n    }\r\n\r\n    /**\r\n     * Determine if the given parameters fail a dimension ratio check.\r\n     *\r\n     * @param  array  $parameters\r\n     * @param  int  $width\r\n     * @param  int  $height\r\n     * @return bool\r\n     */\r\n    protected function failsRatioCheck($parameters, $width, $height)\r\n    {\r\n        if (! isset($parameters['ratio'])) {\r\n            return false;\r\n        }\r\n\r\n        [$numerator, $denominator] = array_replace(\r\n            [1, 1], array_filter(sscanf($parameters['ratio'], '%f/%d'))\r\n        );\r\n\r\n        $precision = 1 / (max($width, $height) + 1);\r\n\r\n        return abs($numerator / $denominator - $width / $height) > $precision;\r\n    }\r\n\r\n    /**\r\n     * Validate an attribute is unique among other values.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateDistinct($attribute, $value, $parameters)\r\n    {\r\n        $data = Arr::except($this->getDistinctValues($attribute), $attribute);\r\n\r\n        if (in_array('ignore_case', $parameters)) {\r\n            return empty(preg_grep('/^'.preg_quote($value, '/').'$/iu', $data));\r\n        }\r\n\r\n        return ! in_array($value, array_values($data));\r\n    }\r\n\r\n    /**\r\n     * Get the values to distinct between.\r\n     *\r\n     * @param  string  $attribute\r\n     * @return array\r\n     */\r\n    protected function getDistinctValues($attribute)\r\n    {\r\n        $attributeName = $this->getPrimaryAttribute($attribute);\r\n\r\n        if (! property_exists($this, 'distinctValues')) {\r\n            return $this->extractDistinctValues($attributeName);\r\n        }\r\n\r\n        if (! array_key_exists($attributeName, $this->distinctValues)) {\r\n            $this->distinctValues[$attributeName] = $this->extractDistinctValues($attributeName);\r\n        }\r\n\r\n        return $this->distinctValues[$attributeName];\r\n    }\r\n\r\n    /**\r\n     * Extract the distinct values from the data.\r\n     *\r\n     * @param  string  $attribute\r\n     * @return array\r\n     */\r\n    protected function extractDistinctValues($attribute)\r\n    {\r\n        $attributeData = ValidationData::extractDataFromPath(\r\n            ValidationData::getLeadingExplicitAttributePath($attribute), $this->data\r\n        );\r\n\r\n        $pattern = str_replace('\\*', '[^.]+', preg_quote($attribute, '#'));\r\n\r\n        return Arr::where(Arr::dot($attributeData), function ($value, $key) use ($pattern) {\r\n            return (bool) preg_match('#^'.$pattern.'\\z#u', $key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid e-mail address.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateEmail($attribute, $value, $parameters)\r\n    {\r\n        if (! is_string($value) && ! (is_object($value) && method_exists($value, '__toString'))) {\r\n            return false;\r\n        }\r\n\r\n        $validations = collect($parameters)\r\n            ->unique()\r\n            ->map(function ($validation) {\r\n                if ($validation === 'rfc') {\r\n                    return new RFCValidation();\r\n                } elseif ($validation === 'strict') {\r\n                    return new NoRFCWarningsValidation();\r\n                } elseif ($validation === 'dns') {\r\n                    return new DNSCheckValidation();\r\n                } elseif ($validation === 'spoof') {\r\n                    return new SpoofCheckValidation();\r\n                } elseif ($validation === 'filter') {\r\n                    return new FilterEmailValidation();\r\n                } elseif ($validation === 'filter_unicode') {\r\n                    return FilterEmailValidation::unicode();\r\n                } elseif (is_string($validation) && class_exists($validation)) {\r\n                    return $this->container->make($validation);\r\n                }\r\n            })\r\n            ->values()\r\n            ->all() ?: [new RFCValidation()];\r\n\r\n        return (new EmailValidator)->isValid($value, new MultipleValidationWithAnd($validations));\r\n    }\r\n\r\n    /**\r\n     * Validate the existence of an attribute value in a database table.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateExists($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'exists');\r\n\r\n        [$connection, $table] = $this->parseTable($parameters[0]);\r\n\r\n        // The second parameter position holds the name of the column that should be\r\n        // verified as existing. If this parameter is not specified we will guess\r\n        // that the columns being \"verified\" shares the given attribute's name.\r\n        $column = $this->getQueryColumn($parameters, $attribute);\r\n\r\n        $expected = is_array($value) ? count(array_unique($value)) : 1;\r\n\r\n        return $this->getExistCount(\r\n            $connection, $table, $column, $value, $parameters\r\n        ) >= $expected;\r\n    }\r\n\r\n    /**\r\n     * Get the number of records that exist in storage.\r\n     *\r\n     * @param  mixed  $connection\r\n     * @param  string  $table\r\n     * @param  string  $column\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return int\r\n     */\r\n    protected function getExistCount($connection, $table, $column, $value, $parameters)\r\n    {\r\n        $verifier = $this->getPresenceVerifier($connection);\r\n\r\n        $extra = $this->getExtraConditions(\r\n            array_values(array_slice($parameters, 2))\r\n        );\r\n\r\n        if ($this->currentRule instanceof Exists) {\r\n            $extra = array_merge($extra, $this->currentRule->queryCallbacks());\r\n        }\r\n\r\n        return is_array($value)\r\n                ? $verifier->getMultiCount($table, $column, $value, $extra)\r\n                : $verifier->getCount($table, $column, $value, null, null, $extra);\r\n    }\r\n\r\n    /**\r\n     * Validate the uniqueness of an attribute value on a given database table.\r\n     *\r\n     * If a database column is not specified, the attribute will be used.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateUnique($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'unique');\r\n\r\n        [$connection, $table, $idColumn] = $this->parseTable($parameters[0]);\r\n\r\n        // The second parameter position holds the name of the column that needs to\r\n        // be verified as unique. If this parameter isn't specified we will just\r\n        // assume that this column to be verified shares the attribute's name.\r\n        $column = $this->getQueryColumn($parameters, $attribute);\r\n\r\n        $id = null;\r\n\r\n        if (isset($parameters[2])) {\r\n            [$idColumn, $id] = $this->getUniqueIds($idColumn, $parameters);\r\n\r\n            if (! is_null($id)) {\r\n                $id = stripslashes($id);\r\n            }\r\n        }\r\n\r\n        // The presence verifier is responsible for counting rows within this store\r\n        // mechanism which might be a relational database or any other permanent\r\n        // data store like Redis, etc. We will use it to determine uniqueness.\r\n        $verifier = $this->getPresenceVerifier($connection);\r\n\r\n        $extra = $this->getUniqueExtra($parameters);\r\n\r\n        if ($this->currentRule instanceof Unique) {\r\n            $extra = array_merge($extra, $this->currentRule->queryCallbacks());\r\n        }\r\n\r\n        return $verifier->getCount(\r\n            $table, $column, $value, $id, $idColumn, $extra\r\n        ) == 0;\r\n    }\r\n\r\n    /**\r\n     * Get the excluded ID column and value for the unique rule.\r\n     *\r\n     * @param  string|null  $idColumn\r\n     * @param  array  $parameters\r\n     * @return array\r\n     */\r\n    protected function getUniqueIds($idColumn, $parameters)\r\n    {\r\n        $idColumn = $idColumn ?? $parameters[3] ?? 'id';\r\n\r\n        return [$idColumn, $this->prepareUniqueId($parameters[2])];\r\n    }\r\n\r\n    /**\r\n     * Prepare the given ID for querying.\r\n     *\r\n     * @param  mixed  $id\r\n     * @return int\r\n     */\r\n    protected function prepareUniqueId($id)\r\n    {\r\n        if (preg_match('/\\[(.*)\\]/', $id, $matches)) {\r\n            $id = $this->getValue($matches[1]);\r\n        }\r\n\r\n        if (strtolower($id) === 'null') {\r\n            $id = null;\r\n        }\r\n\r\n        if (filter_var($id, FILTER_VALIDATE_INT) !== false) {\r\n            $id = (int) $id;\r\n        }\r\n\r\n        return $id;\r\n    }\r\n\r\n    /**\r\n     * Get the extra conditions for a unique rule.\r\n     *\r\n     * @param  array  $parameters\r\n     * @return array\r\n     */\r\n    protected function getUniqueExtra($parameters)\r\n    {\r\n        if (isset($parameters[4])) {\r\n            return $this->getExtraConditions(array_slice($parameters, 4));\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Parse the connection / table for the unique / exists rules.\r\n     *\r\n     * @param  string  $table\r\n     * @return array\r\n     */\r\n    public function parseTable($table)\r\n    {\r\n        [$connection, $table] = Str::contains($table, '.') ? explode('.', $table, 2) : [null, $table];\r\n\r\n        if (Str::contains($table, '\\\\') && class_exists($table) && is_a($table, Model::class, true)) {\r\n            $model = new $table;\r\n\r\n            $table = $model->getTable();\r\n            $connection = $connection ?? $model->getConnectionName();\r\n            $idColumn = $model->getKeyName();\r\n        }\r\n\r\n        return [$connection, $table, $idColumn ?? null];\r\n    }\r\n\r\n    /**\r\n     * Get the column name for an exists / unique query.\r\n     *\r\n     * @param  array  $parameters\r\n     * @param  string  $attribute\r\n     * @return bool\r\n     */\r\n    public function getQueryColumn($parameters, $attribute)\r\n    {\r\n        return isset($parameters[1]) && $parameters[1] !== 'NULL'\r\n                    ? $parameters[1] : $this->guessColumnForQuery($attribute);\r\n    }\r\n\r\n    /**\r\n     * Guess the database column from the given attribute name.\r\n     *\r\n     * @param  string  $attribute\r\n     * @return string\r\n     */\r\n    public function guessColumnForQuery($attribute)\r\n    {\r\n        if (in_array($attribute, Arr::collapse($this->implicitAttributes))\r\n                && ! is_numeric($last = last(explode('.', $attribute)))) {\r\n            return $last;\r\n        }\r\n\r\n        return $attribute;\r\n    }\r\n\r\n    /**\r\n     * Get the extra conditions for a unique / exists rule.\r\n     *\r\n     * @param  array  $segments\r\n     * @return array\r\n     */\r\n    protected function getExtraConditions(array $segments)\r\n    {\r\n        $extra = [];\r\n\r\n        $count = count($segments);\r\n\r\n        for ($i = 0; $i < $count; $i += 2) {\r\n            $extra[$segments[$i]] = $segments[$i + 1];\r\n        }\r\n\r\n        return $extra;\r\n    }\r\n\r\n    /**\r\n     * Validate the given value is a valid file.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateFile($attribute, $value)\r\n    {\r\n        return $this->isValidFileInstance($value);\r\n    }\r\n\r\n    /**\r\n     * Validate the given attribute is filled if it is present.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateFilled($attribute, $value)\r\n    {\r\n        if (Arr::has($this->data, $attribute)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is greater than another attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateGt($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'gt');\r\n\r\n        $comparedToValue = $this->getValue($parameters[0]);\r\n\r\n        $this->shouldBeNumeric($attribute, 'Gt');\r\n\r\n        if (is_null($comparedToValue) && (is_numeric($value) && is_numeric($parameters[0]))) {\r\n            return $this->getSize($attribute, $value) > $parameters[0];\r\n        }\r\n\r\n        if (is_numeric($parameters[0])) {\r\n            return false;\r\n        }\r\n\r\n        if ($this->hasRule($attribute, $this->numericRules) && is_numeric($value) && is_numeric($comparedToValue)) {\r\n            return $value > $comparedToValue;\r\n        }\r\n\r\n        if (! $this->isSameType($value, $comparedToValue)) {\r\n            return false;\r\n        }\r\n\r\n        return $this->getSize($attribute, $value) > $this->getSize($attribute, $comparedToValue);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is less than another attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateLt($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'lt');\r\n\r\n        $comparedToValue = $this->getValue($parameters[0]);\r\n\r\n        $this->shouldBeNumeric($attribute, 'Lt');\r\n\r\n        if (is_null($comparedToValue) && (is_numeric($value) && is_numeric($parameters[0]))) {\r\n            return $this->getSize($attribute, $value) < $parameters[0];\r\n        }\r\n\r\n        if (is_numeric($parameters[0])) {\r\n            return false;\r\n        }\r\n\r\n        if ($this->hasRule($attribute, $this->numericRules) && is_numeric($value) && is_numeric($comparedToValue)) {\r\n            return $value < $comparedToValue;\r\n        }\r\n\r\n        if (! $this->isSameType($value, $comparedToValue)) {\r\n            return false;\r\n        }\r\n\r\n        return $this->getSize($attribute, $value) < $this->getSize($attribute, $comparedToValue);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is greater than or equal another attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateGte($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'gte');\r\n\r\n        $comparedToValue = $this->getValue($parameters[0]);\r\n\r\n        $this->shouldBeNumeric($attribute, 'Gte');\r\n\r\n        if (is_null($comparedToValue) && (is_numeric($value) && is_numeric($parameters[0]))) {\r\n            return $this->getSize($attribute, $value) >= $parameters[0];\r\n        }\r\n\r\n        if (is_numeric($parameters[0])) {\r\n            return false;\r\n        }\r\n\r\n        if ($this->hasRule($attribute, $this->numericRules) && is_numeric($value) && is_numeric($comparedToValue)) {\r\n            return $value >= $comparedToValue;\r\n        }\r\n\r\n        if (! $this->isSameType($value, $comparedToValue)) {\r\n            return false;\r\n        }\r\n\r\n        return $this->getSize($attribute, $value) >= $this->getSize($attribute, $comparedToValue);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is less than or equal another attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateLte($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'lte');\r\n\r\n        $comparedToValue = $this->getValue($parameters[0]);\r\n\r\n        $this->shouldBeNumeric($attribute, 'Lte');\r\n\r\n        if (is_null($comparedToValue) && (is_numeric($value) && is_numeric($parameters[0]))) {\r\n            return $this->getSize($attribute, $value) <= $parameters[0];\r\n        }\r\n\r\n        if (is_numeric($parameters[0])) {\r\n            return false;\r\n        }\r\n\r\n        if ($this->hasRule($attribute, $this->numericRules) && is_numeric($value) && is_numeric($comparedToValue)) {\r\n            return $value <= $comparedToValue;\r\n        }\r\n\r\n        if (! $this->isSameType($value, $comparedToValue)) {\r\n            return false;\r\n        }\r\n\r\n        return $this->getSize($attribute, $value) <= $this->getSize($attribute, $comparedToValue);\r\n    }\r\n\r\n    /**\r\n     * Validate the MIME type of a file is an image MIME type.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateImage($attribute, $value)\r\n    {\r\n        return $this->validateMimes($attribute, $value, ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp']);\r\n    }\r\n\r\n    /**\r\n     * Validate an attribute is contained within a list of values.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateIn($attribute, $value, $parameters)\r\n    {\r\n        if (is_array($value) && $this->hasRule($attribute, 'Array')) {\r\n            foreach ($value as $element) {\r\n                if (is_array($element)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return count(array_diff($value, $parameters)) === 0;\r\n        }\r\n\r\n        return ! is_array($value) && in_array((string) $value, $parameters);\r\n    }\r\n\r\n    /**\r\n     * Validate that the values of an attribute is in another attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateInArray($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'in_array');\r\n\r\n        $explicitPath = ValidationData::getLeadingExplicitAttributePath($parameters[0]);\r\n\r\n        $attributeData = ValidationData::extractDataFromPath($explicitPath, $this->data);\r\n\r\n        $otherValues = Arr::where(Arr::dot($attributeData), function ($value, $key) use ($parameters) {\r\n            return Str::is($parameters[0], $key);\r\n        });\r\n\r\n        return in_array($value, $otherValues);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is an integer.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateInteger($attribute, $value)\r\n    {\r\n        return filter_var($value, FILTER_VALIDATE_INT) !== false;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid IP.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateIp($attribute, $value)\r\n    {\r\n        return filter_var($value, FILTER_VALIDATE_IP) !== false;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid IPv4.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateIpv4($attribute, $value)\r\n    {\r\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) !== false;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid IPv6.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateIpv6($attribute, $value)\r\n    {\r\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== false;\r\n    }\r\n\r\n    /**\r\n     * Validate the attribute is a valid JSON string.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateJson($attribute, $value)\r\n    {\r\n        if (! is_scalar($value) && ! method_exists($value, '__toString')) {\r\n            return false;\r\n        }\r\n\r\n        json_decode($value);\r\n\r\n        return json_last_error() === JSON_ERROR_NONE;\r\n    }\r\n\r\n    /**\r\n     * Validate the size of an attribute is less than a maximum value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateMax($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'max');\r\n\r\n        if ($value instanceof UploadedFile && ! $value->isValid()) {\r\n            return false;\r\n        }\r\n\r\n        return $this->getSize($attribute, $value) <= $parameters[0];\r\n    }\r\n\r\n    /**\r\n     * Validate the guessed extension of a file upload is in a set of file extensions.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateMimes($attribute, $value, $parameters)\r\n    {\r\n        if (! $this->isValidFileInstance($value)) {\r\n            return false;\r\n        }\r\n\r\n        if ($this->shouldBlockPhpUpload($value, $parameters)) {\r\n            return false;\r\n        }\r\n\r\n        return $value->getPath() !== '' && in_array($value->guessExtension(), $parameters);\r\n    }\r\n\r\n    /**\r\n     * Validate the MIME type of a file upload attribute is in a set of MIME types.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateMimetypes($attribute, $value, $parameters)\r\n    {\r\n        if (! $this->isValidFileInstance($value)) {\r\n            return false;\r\n        }\r\n\r\n        if ($this->shouldBlockPhpUpload($value, $parameters)) {\r\n            return false;\r\n        }\r\n\r\n        return $value->getPath() !== '' &&\r\n                (in_array($value->getMimeType(), $parameters) ||\r\n                 in_array(explode('/', $value->getMimeType())[0].'/*', $parameters));\r\n    }\r\n\r\n    /**\r\n     * Check if PHP uploads are explicitly allowed.\r\n     *\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    protected function shouldBlockPhpUpload($value, $parameters)\r\n    {\r\n        if (in_array('php', $parameters)) {\r\n            return false;\r\n        }\r\n\r\n        $phpExtensions = [\r\n            'php', 'php3', 'php4', 'php5', 'phtml',\r\n        ];\r\n\r\n        return ($value instanceof UploadedFile)\r\n           ? in_array(trim(strtolower($value->getClientOriginalExtension())), $phpExtensions)\r\n           : in_array(trim(strtolower($value->getExtension())), $phpExtensions);\r\n    }\r\n\r\n    /**\r\n     * Validate the size of an attribute is greater than a minimum value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateMin($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'min');\r\n\r\n        return $this->getSize($attribute, $value) >= $parameters[0];\r\n    }\r\n\r\n    /**\r\n     * \"Indicate\" validation should pass if value is null.\r\n     *\r\n     * Always returns true, just lets us put \"nullable\" in rules.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function validateNullable()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate an attribute is not contained within a list of values.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateNotIn($attribute, $value, $parameters)\r\n    {\r\n        return ! $this->validateIn($attribute, $value, $parameters);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is numeric.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateNumeric($attribute, $value)\r\n    {\r\n        return is_numeric($value);\r\n    }\r\n\r\n    /**\r\n     * Validate that the current logged in user's password matches the given value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    protected function validatePassword($attribute, $value, $parameters)\r\n    {\r\n        $auth = $this->container->make('auth');\r\n        $hasher = $this->container->make('hash');\r\n\r\n        $guard = $auth->guard(Arr::first($parameters));\r\n\r\n        if ($guard->guest()) {\r\n            return false;\r\n        }\r\n\r\n        return $hasher->check($value, $guard->user()->getAuthPassword());\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists even if not filled.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validatePresent($attribute, $value)\r\n    {\r\n        return Arr::has($this->data, $attribute);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute passes a regular expression check.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRegex($attribute, $value, $parameters)\r\n    {\r\n        if (! is_string($value) && ! is_numeric($value)) {\r\n            return false;\r\n        }\r\n\r\n        $this->requireParameterCount(1, $parameters, 'regex');\r\n\r\n        return preg_match($parameters[0], $value) > 0;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute does not pass a regular expression check.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateNotRegex($attribute, $value, $parameters)\r\n    {\r\n        if (! is_string($value) && ! is_numeric($value)) {\r\n            return false;\r\n        }\r\n\r\n        $this->requireParameterCount(1, $parameters, 'not_regex');\r\n\r\n        return preg_match($parameters[0], $value) < 1;\r\n    }\r\n\r\n    /**\r\n     * Validate that a required attribute exists.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateRequired($attribute, $value)\r\n    {\r\n        if (is_null($value)) {\r\n            return false;\r\n        } elseif (is_string($value) && trim($value) === '') {\r\n            return false;\r\n        } elseif ((is_array($value) || $value instanceof Countable) && count($value) < 1) {\r\n            return false;\r\n        } elseif ($value instanceof File) {\r\n            return (string) $value->getPath() !== '';\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists when another attribute has a given value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRequiredIf($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(2, $parameters, 'required_if');\r\n\r\n        [$values, $other] = $this->prepareValuesAndOther($parameters);\r\n\r\n        if (in_array($other, $values)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Indicate that an attribute should be excluded when another attribute has a given value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateExcludeIf($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(2, $parameters, 'exclude_if');\r\n\r\n        [$values, $other] = $this->prepareValuesAndOther($parameters);\r\n\r\n        return ! in_array($other, $values);\r\n    }\r\n\r\n    /**\r\n     * Indicate that an attribute should be excluded when another attribute does not have a given value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateExcludeUnless($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(2, $parameters, 'exclude_unless');\r\n\r\n        [$values, $other] = $this->prepareValuesAndOther($parameters);\r\n\r\n        return in_array($other, $values);\r\n    }\r\n\r\n    /**\r\n     * Indicate that an attribute should be excluded when another attribute is missing.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateExcludeWithout($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'exclude_without');\r\n\r\n        if ($this->anyFailingRequired($parameters)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare the values and the other value for validation.\r\n     *\r\n     * @param  array  $parameters\r\n     * @return array\r\n     */\r\n    protected function prepareValuesAndOther($parameters)\r\n    {\r\n        $other = Arr::get($this->data, $parameters[0]);\r\n\r\n        $values = array_slice($parameters, 1);\r\n\r\n        if (is_bool($other)) {\r\n            $values = $this->convertValuesToBoolean($values);\r\n        }\r\n\r\n        return [$values, $other];\r\n    }\r\n\r\n    /**\r\n     * Convert the given values to boolean if they are string \"true\" / \"false\".\r\n     *\r\n     * @param  array  $values\r\n     * @return array\r\n     */\r\n    protected function convertValuesToBoolean($values)\r\n    {\r\n        return array_map(function ($value) {\r\n            if ($value === 'true') {\r\n                return true;\r\n            } elseif ($value === 'false') {\r\n                return false;\r\n            }\r\n\r\n            return $value;\r\n        }, $values);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists when another attribute does not have a given value.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRequiredUnless($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(2, $parameters, 'required_unless');\r\n\r\n        [$values, $other] = $this->prepareValuesAndOther($parameters);\r\n\r\n        if (! in_array($other, $values)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists when any other attribute exists.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRequiredWith($attribute, $value, $parameters)\r\n    {\r\n        if (! $this->allFailingRequired($parameters)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists when all other attributes exists.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRequiredWithAll($attribute, $value, $parameters)\r\n    {\r\n        if (! $this->anyFailingRequired($parameters)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists when another attribute does not.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRequiredWithout($attribute, $value, $parameters)\r\n    {\r\n        if ($this->anyFailingRequired($parameters)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute exists when all other attributes do not.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  mixed  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateRequiredWithoutAll($attribute, $value, $parameters)\r\n    {\r\n        if ($this->allFailingRequired($parameters)) {\r\n            return $this->validateRequired($attribute, $value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determine if any of the given attributes fail the required test.\r\n     *\r\n     * @param  array  $attributes\r\n     * @return bool\r\n     */\r\n    protected function anyFailingRequired(array $attributes)\r\n    {\r\n        foreach ($attributes as $key) {\r\n            if (! $this->validateRequired($key, $this->getValue($key))) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Determine if all of the given attributes fail the required test.\r\n     *\r\n     * @param  array  $attributes\r\n     * @return bool\r\n     */\r\n    protected function allFailingRequired(array $attributes)\r\n    {\r\n        foreach ($attributes as $key) {\r\n            if ($this->validateRequired($key, $this->getValue($key))) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate that two attributes match.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateSame($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'same');\r\n\r\n        $other = Arr::get($this->data, $parameters[0]);\r\n\r\n        return $value === $other;\r\n    }\r\n\r\n    /**\r\n     * Validate the size of an attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateSize($attribute, $value, $parameters)\r\n    {\r\n        $this->requireParameterCount(1, $parameters, 'size');\r\n\r\n        return $this->getSize($attribute, $value) == $parameters[0];\r\n    }\r\n\r\n    /**\r\n     * \"Validate\" optional attributes.\r\n     *\r\n     * Always returns true, just lets us put sometimes in rules.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function validateSometimes()\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validate the attribute starts with a given substring.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateStartsWith($attribute, $value, $parameters)\r\n    {\r\n        return Str::startsWith($value, $parameters);\r\n    }\r\n\r\n    /**\r\n     * Validate the attribute ends with a given substring.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @param  array  $parameters\r\n     * @return bool\r\n     */\r\n    public function validateEndsWith($attribute, $value, $parameters)\r\n    {\r\n        return Str::endsWith($value, $parameters);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a string.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateString($attribute, $value)\r\n    {\r\n        return is_string($value);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid timezone.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateTimezone($attribute, $value)\r\n    {\r\n        return in_array($value, timezone_identifiers_list(), true);\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid URL.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateUrl($attribute, $value)\r\n    {\r\n        if (! is_string($value)) {\r\n            return false;\r\n        }\r\n\r\n        /*\r\n         * This pattern is derived from Symfony\\Component\\Validator\\Constraints\\UrlValidator (5.0.7).\r\n         *\r\n         * (c) Fabien Potencier <fabien@symfony.com> http://symfony.com\r\n         */\r\n        $pattern = '~^\r\n            (aaa|aaas|about|acap|acct|acd|acr|adiumxtra|adt|afp|afs|aim|amss|android|appdata|apt|ark|attachment|aw|barion|beshare|bitcoin|bitcoincash|blob|bolo|browserext|calculator|callto|cap|cast|casts|chrome|chrome-extension|cid|coap|coap\\+tcp|coap\\+ws|coaps|coaps\\+tcp|coaps\\+ws|com-eventbrite-attendee|content|conti|crid|cvs|dab|data|dav|diaspora|dict|did|dis|dlna-playcontainer|dlna-playsingle|dns|dntp|dpp|drm|drop|dtn|dvb|ed2k|elsi|example|facetime|fax|feed|feedready|file|filesystem|finger|first-run-pen-experience|fish|fm|ftp|fuchsia-pkg|geo|gg|git|gizmoproject|go|gopher|graph|gtalk|h323|ham|hcap|hcp|http|https|hxxp|hxxps|hydrazone|iax|icap|icon|im|imap|info|iotdisco|ipn|ipp|ipps|irc|irc6|ircs|iris|iris\\.beep|iris\\.lwz|iris\\.xpc|iris\\.xpcs|isostore|itms|jabber|jar|jms|keyparc|lastfm|ldap|ldaps|leaptofrogans|lorawan|lvlt|magnet|mailserver|mailto|maps|market|message|mid|mms|modem|mongodb|moz|ms-access|ms-browser-extension|ms-calculator|ms-drive-to|ms-enrollment|ms-excel|ms-eyecontrolspeech|ms-gamebarservices|ms-gamingoverlay|ms-getoffice|ms-help|ms-infopath|ms-inputapp|ms-lockscreencomponent-config|ms-media-stream-id|ms-mixedrealitycapture|ms-mobileplans|ms-officeapp|ms-people|ms-project|ms-powerpoint|ms-publisher|ms-restoretabcompanion|ms-screenclip|ms-screensketch|ms-search|ms-search-repair|ms-secondary-screen-controller|ms-secondary-screen-setup|ms-settings|ms-settings-airplanemode|ms-settings-bluetooth|ms-settings-camera|ms-settings-cellular|ms-settings-cloudstorage|ms-settings-connectabledevices|ms-settings-displays-topology|ms-settings-emailandaccounts|ms-settings-language|ms-settings-location|ms-settings-lock|ms-settings-nfctransactions|ms-settings-notifications|ms-settings-power|ms-settings-privacy|ms-settings-proximity|ms-settings-screenrotation|ms-settings-wifi|ms-settings-workplace|ms-spd|ms-sttoverlay|ms-transit-to|ms-useractivityset|ms-virtualtouchpad|ms-visio|ms-walk-to|ms-whiteboard|ms-whiteboard-cmd|ms-word|msnim|msrp|msrps|mss|mtqp|mumble|mupdate|mvn|news|nfs|ni|nih|nntp|notes|ocf|oid|onenote|onenote-cmd|opaquelocktoken|openpgp4fpr|pack|palm|paparazzi|payto|pkcs11|platform|pop|pres|prospero|proxy|pwid|psyc|pttp|qb|query|redis|rediss|reload|res|resource|rmi|rsync|rtmfp|rtmp|rtsp|rtsps|rtspu|s3|secondlife|service|session|sftp|sgn|shttp|sieve|simpleledger|sip|sips|skype|smb|sms|smtp|snews|snmp|soap\\.beep|soap\\.beeps|soldat|spiffe|spotify|ssh|steam|stun|stuns|submit|svn|tag|teamspeak|tel|teliaeid|telnet|tftp|things|thismessage|tip|tn3270|tool|turn|turns|tv|udp|unreal|urn|ut2004|v-event|vemmi|ventrilo|videotex|vnc|view-source|wais|webcal|wpid|ws|wss|wtai|wyciwyg|xcon|xcon-userid|xfire|xmlrpc\\.beep|xmlrpc\\.beeps|xmpp|xri|ymsgr|z39\\.50|z39\\.50r|z39\\.50s)://                                 # protocol\r\n            (((?:[\\_\\.\\pL\\pN-]|%[0-9A-Fa-f]{2})+:)?((?:[\\_\\.\\pL\\pN-]|%[0-9A-Fa-f]{2})+)@)?  # basic auth\r\n            (\r\n                ([\\pL\\pN\\pS\\-\\_\\.])+(\\.?([\\pL\\pN]|xn\\-\\-[\\pL\\pN-]+)+\\.?) # a domain name\r\n                    |                                                 # or\r\n                \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}                    # an IP address\r\n                    |                                                 # or\r\n                \\[\r\n                    (?:(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-f]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-f]{1,4})))?::(?:(?:(?:[0-9a-f]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,1}(?:(?:[0-9a-f]{1,4})))?::(?:(?:(?:[0-9a-f]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,2}(?:(?:[0-9a-f]{1,4})))?::(?:(?:(?:[0-9a-f]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,3}(?:(?:[0-9a-f]{1,4})))?::(?:(?:[0-9a-f]{1,4})):)(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,4}(?:(?:[0-9a-f]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-f]{1,4})):(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,5}(?:(?:[0-9a-f]{1,4})))?::)(?:(?:[0-9a-f]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-f]{1,4})):){0,6}(?:(?:[0-9a-f]{1,4})))?::))))\r\n                \\]  # an IPv6 address\r\n            )\r\n            (:[0-9]+)?                              # a port (optional)\r\n            (?:/ (?:[\\pL\\pN\\-._\\~!$&\\'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*          # a path\r\n            (?:\\? (?:[\\pL\\pN\\-._\\~!$&\\'\\[\\]()*+,;=:@/?]|%[0-9A-Fa-f]{2})* )?   # a query (optional)\r\n            (?:\\# (?:[\\pL\\pN\\-._\\~!$&\\'()*+,;=:@/?]|%[0-9A-Fa-f]{2})* )?       # a fragment (optional)\r\n        $~ixu';\r\n\r\n        return preg_match($pattern, $value) > 0;\r\n    }\r\n\r\n    /**\r\n     * Validate that an attribute is a valid UUID.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function validateUuid($attribute, $value)\r\n    {\r\n        return Str::isUuid($value);\r\n    }\r\n\r\n    /**\r\n     * Get the size of an attribute.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  mixed  $value\r\n     * @return mixed\r\n     */\r\n    protected function getSize($attribute, $value)\r\n    {\r\n        $hasNumeric = $this->hasRule($attribute, $this->numericRules);\r\n\r\n        // This method will determine if the attribute is a number, string, or file and\r\n        // return the proper size accordingly. If it is a number, then number itself\r\n        // is the size. If it is a file, we take kilobytes, and for a string the\r\n        // entire length of the string will be considered the attribute size.\r\n        if (is_numeric($value) && $hasNumeric) {\r\n            return $value;\r\n        } elseif (is_array($value)) {\r\n            return count($value);\r\n        } elseif ($value instanceof File) {\r\n            return $value->getSize() / 1024;\r\n        }\r\n\r\n        return mb_strlen($value);\r\n    }\r\n\r\n    /**\r\n     * Check that the given value is a valid file instance.\r\n     *\r\n     * @param  mixed  $value\r\n     * @return bool\r\n     */\r\n    public function isValidFileInstance($value)\r\n    {\r\n        if ($value instanceof UploadedFile && ! $value->isValid()) {\r\n            return false;\r\n        }\r\n\r\n        return $value instanceof File;\r\n    }\r\n\r\n    /**\r\n     * Determine if a comparison passes between the given values.\r\n     *\r\n     * @param  mixed  $first\r\n     * @param  mixed  $second\r\n     * @param  string  $operator\r\n     * @return bool\r\n     *\r\n     * @throws \\InvalidArgumentException\r\n     */\r\n    protected function compare($first, $second, $operator)\r\n    {\r\n        switch ($operator) {\r\n            case '<':\r\n                return $first < $second;\r\n            case '>':\r\n                return $first > $second;\r\n            case '<=':\r\n                return $first <= $second;\r\n            case '>=':\r\n                return $first >= $second;\r\n            case '=':\r\n                return $first == $second;\r\n            default:\r\n                throw new InvalidArgumentException;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse named parameters to $key => $value items.\r\n     *\r\n     * @param  array  $parameters\r\n     * @return array\r\n     */\r\n    protected function parseNamedParameters($parameters)\r\n    {\r\n        return array_reduce($parameters, function ($result, $item) {\r\n            [$key, $value] = array_pad(explode('=', $item, 2), 2, null);\r\n\r\n            $result[$key] = $value;\r\n\r\n            return $result;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Require a certain number of parameters to be present.\r\n     *\r\n     * @param  int  $count\r\n     * @param  array  $parameters\r\n     * @param  string  $rule\r\n     * @return void\r\n     *\r\n     * @throws \\InvalidArgumentException\r\n     */\r\n    public function requireParameterCount($count, $parameters, $rule)\r\n    {\r\n        if (count($parameters) < $count) {\r\n            throw new InvalidArgumentException(\"Validation rule $rule requires at least $count parameters.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the parameters are of the same type.\r\n     *\r\n     * @param  mixed  $first\r\n     * @param  mixed  $second\r\n     * @return bool\r\n     */\r\n    protected function isSameType($first, $second)\r\n    {\r\n        return gettype($first) == gettype($second);\r\n    }\r\n\r\n    /**\r\n     * Adds the existing rule to the numericRules array if the attribute's value is numeric.\r\n     *\r\n     * @param  string  $attribute\r\n     * @param  string  $rule\r\n     *\r\n     * @return void\r\n     */\r\n    protected function shouldBeNumeric($attribute, $rule)\r\n    {\r\n        if (is_numeric($this->getValue($attribute))) {\r\n            $this->numericRules[] = $rule;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Validation/Concerns/ValidatesAttributes.php b/vendor/laravel/framework/src/Illuminate/Validation/Concerns/ValidatesAttributes.php
--- a/vendor/laravel/framework/src/Illuminate/Validation/Concerns/ValidatesAttributes.php	
+++ b/vendor/laravel/framework/src/Illuminate/Validation/Concerns/ValidatesAttributes.php	
@@ -1170,6 +1170,10 @@
      */
     public function validateJson($attribute, $value)
     {
+        if (is_array($value)) {
+            return false;
+        }
+
         if (! is_scalar($value) && ! method_exists($value, '__toString')) {
             return false;
         }
@@ -1216,6 +1220,10 @@
             return false;
         }
 
+        if (in_array('jpg', $parameters) || in_array('jpeg', $parameters)) {
+            $parameters = array_unique(array_merge($parameters, ['jpg', 'jpeg']));
+        }
+
         return $value->getPath() !== '' && in_array($value->guessExtension(), $parameters);
     }
 
Index: vendor/laravel/framework/src/Illuminate/Foundation/Application.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Foundation;\r\n\r\nuse Closure;\r\nuse Illuminate\\Container\\Container;\r\nuse Illuminate\\Contracts\\Foundation\\Application as ApplicationContract;\r\nuse Illuminate\\Contracts\\Foundation\\CachesConfiguration;\r\nuse Illuminate\\Contracts\\Foundation\\CachesRoutes;\r\nuse Illuminate\\Contracts\\Http\\Kernel as HttpKernelContract;\r\nuse Illuminate\\Events\\EventServiceProvider;\r\nuse Illuminate\\Filesystem\\Filesystem;\r\nuse Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables;\r\nuse Illuminate\\Foundation\\Events\\LocaleUpdated;\r\nuse Illuminate\\Http\\Request;\r\nuse Illuminate\\Log\\LogServiceProvider;\r\nuse Illuminate\\Routing\\RoutingServiceProvider;\r\nuse Illuminate\\Support\\Arr;\r\nuse Illuminate\\Support\\Collection;\r\nuse Illuminate\\Support\\Env;\r\nuse Illuminate\\Support\\ServiceProvider;\r\nuse Illuminate\\Support\\Str;\r\nuse RuntimeException;\r\nuse Symfony\\Component\\HttpFoundation\\Request as SymfonyRequest;\r\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\r\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\r\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\r\n\r\nclass Application extends Container implements ApplicationContract, CachesConfiguration, CachesRoutes, HttpKernelInterface\r\n{\r\n    /**\r\n     * The Laravel framework version.\r\n     *\r\n     * @var string\r\n     */\r\n    const VERSION = '7.30.0';\r\n\r\n    /**\r\n     * The base path for the Laravel installation.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $basePath;\r\n\r\n    /**\r\n     * Indicates if the application has been bootstrapped before.\r\n     *\r\n     * @var bool\r\n     */\r\n    protected $hasBeenBootstrapped = false;\r\n\r\n    /**\r\n     * Indicates if the application has \"booted\".\r\n     *\r\n     * @var bool\r\n     */\r\n    protected $booted = false;\r\n\r\n    /**\r\n     * The array of booting callbacks.\r\n     *\r\n     * @var callable[]\r\n     */\r\n    protected $bootingCallbacks = [];\r\n\r\n    /**\r\n     * The array of booted callbacks.\r\n     *\r\n     * @var callable[]\r\n     */\r\n    protected $bootedCallbacks = [];\r\n\r\n    /**\r\n     * The array of terminating callbacks.\r\n     *\r\n     * @var callable[]\r\n     */\r\n    protected $terminatingCallbacks = [];\r\n\r\n    /**\r\n     * All of the registered service providers.\r\n     *\r\n     * @var \\Illuminate\\Support\\ServiceProvider[]\r\n     */\r\n    protected $serviceProviders = [];\r\n\r\n    /**\r\n     * The names of the loaded service providers.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $loadedProviders = [];\r\n\r\n    /**\r\n     * The deferred services and their providers.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $deferredServices = [];\r\n\r\n    /**\r\n     * The custom application path defined by the developer.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $appPath;\r\n\r\n    /**\r\n     * The custom database path defined by the developer.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $databasePath;\r\n\r\n    /**\r\n     * The custom storage path defined by the developer.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $storagePath;\r\n\r\n    /**\r\n     * The custom environment path defined by the developer.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $environmentPath;\r\n\r\n    /**\r\n     * The environment file to load during bootstrapping.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $environmentFile = '.env';\r\n\r\n    /**\r\n     * Indicates if the application is running in the console.\r\n     *\r\n     * @var bool|null\r\n     */\r\n    protected $isRunningInConsole;\r\n\r\n    /**\r\n     * The application namespace.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $namespace;\r\n\r\n    /**\r\n     * The prefixes of absolute cache paths for use during normalization.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $absoluteCachePathPrefixes = ['/', '\\\\'];\r\n\r\n    /**\r\n     * Create a new Illuminate application instance.\r\n     *\r\n     * @param  string|null  $basePath\r\n     * @return void\r\n     */\r\n    public function __construct($basePath = null)\r\n    {\r\n        if ($basePath) {\r\n            $this->setBasePath($basePath);\r\n        }\r\n\r\n        $this->registerBaseBindings();\r\n        $this->registerBaseServiceProviders();\r\n        $this->registerCoreContainerAliases();\r\n    }\r\n\r\n    /**\r\n     * Get the version number of the application.\r\n     *\r\n     * @return string\r\n     */\r\n    public function version()\r\n    {\r\n        return static::VERSION;\r\n    }\r\n\r\n    /**\r\n     * Register the basic bindings into the container.\r\n     *\r\n     * @return void\r\n     */\r\n    protected function registerBaseBindings()\r\n    {\r\n        static::setInstance($this);\r\n\r\n        $this->instance('app', $this);\r\n\r\n        $this->instance(Container::class, $this);\r\n        $this->singleton(Mix::class);\r\n\r\n        $this->singleton(PackageManifest::class, function () {\r\n            return new PackageManifest(\r\n                new Filesystem, $this->basePath(), $this->getCachedPackagesPath()\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register all of the base service providers.\r\n     *\r\n     * @return void\r\n     */\r\n    protected function registerBaseServiceProviders()\r\n    {\r\n        $this->register(new EventServiceProvider($this));\r\n        $this->register(new LogServiceProvider($this));\r\n        $this->register(new RoutingServiceProvider($this));\r\n    }\r\n\r\n    /**\r\n     * Run the given array of bootstrap classes.\r\n     *\r\n     * @param  string[]  $bootstrappers\r\n     * @return void\r\n     */\r\n    public function bootstrapWith(array $bootstrappers)\r\n    {\r\n        $this->hasBeenBootstrapped = true;\r\n\r\n        foreach ($bootstrappers as $bootstrapper) {\r\n            $this['events']->dispatch('bootstrapping: '.$bootstrapper, [$this]);\r\n\r\n            $this->make($bootstrapper)->bootstrap($this);\r\n\r\n            $this['events']->dispatch('bootstrapped: '.$bootstrapper, [$this]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a callback to run after loading the environment.\r\n     *\r\n     * @param  \\Closure  $callback\r\n     * @return void\r\n     */\r\n    public function afterLoadingEnvironment(Closure $callback)\r\n    {\r\n        return $this->afterBootstrapping(\r\n            LoadEnvironmentVariables::class, $callback\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Register a callback to run before a bootstrapper.\r\n     *\r\n     * @param  string  $bootstrapper\r\n     * @param  \\Closure  $callback\r\n     * @return void\r\n     */\r\n    public function beforeBootstrapping($bootstrapper, Closure $callback)\r\n    {\r\n        $this['events']->listen('bootstrapping: '.$bootstrapper, $callback);\r\n    }\r\n\r\n    /**\r\n     * Register a callback to run after a bootstrapper.\r\n     *\r\n     * @param  string  $bootstrapper\r\n     * @param  \\Closure  $callback\r\n     * @return void\r\n     */\r\n    public function afterBootstrapping($bootstrapper, Closure $callback)\r\n    {\r\n        $this['events']->listen('bootstrapped: '.$bootstrapper, $callback);\r\n    }\r\n\r\n    /**\r\n     * Determine if the application has been bootstrapped before.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function hasBeenBootstrapped()\r\n    {\r\n        return $this->hasBeenBootstrapped;\r\n    }\r\n\r\n    /**\r\n     * Set the base path for the application.\r\n     *\r\n     * @param  string  $basePath\r\n     * @return $this\r\n     */\r\n    public function setBasePath($basePath)\r\n    {\r\n        $this->basePath = rtrim($basePath, '\\/');\r\n\r\n        $this->bindPathsInContainer();\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Bind all of the application paths in the container.\r\n     *\r\n     * @return void\r\n     */\r\n    protected function bindPathsInContainer()\r\n    {\r\n        $this->instance('path', $this->path());\r\n        $this->instance('path.base', $this->basePath());\r\n        $this->instance('path.lang', $this->langPath());\r\n        $this->instance('path.config', $this->configPath());\r\n        $this->instance('path.public', $this->publicPath());\r\n        $this->instance('path.storage', $this->storagePath());\r\n        $this->instance('path.database', $this->databasePath());\r\n        $this->instance('path.resources', $this->resourcePath());\r\n        $this->instance('path.bootstrap', $this->bootstrapPath());\r\n    }\r\n\r\n    /**\r\n     * Get the path to the application \"app\" directory.\r\n     *\r\n     * @param  string  $path\r\n     * @return string\r\n     */\r\n    public function path($path = '')\r\n    {\r\n        $appPath = $this->appPath ?: $this->basePath.DIRECTORY_SEPARATOR.'app';\r\n\r\n        return $appPath.($path ? DIRECTORY_SEPARATOR.$path : $path);\r\n    }\r\n\r\n    /**\r\n     * Set the application directory.\r\n     *\r\n     * @param  string  $path\r\n     * @return $this\r\n     */\r\n    public function useAppPath($path)\r\n    {\r\n        $this->appPath = $path;\r\n\r\n        $this->instance('path', $path);\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get the base path of the Laravel installation.\r\n     *\r\n     * @param  string  $path Optionally, a path to append to the base path\r\n     * @return string\r\n     */\r\n    public function basePath($path = '')\r\n    {\r\n        return $this->basePath.($path ? DIRECTORY_SEPARATOR.$path : $path);\r\n    }\r\n\r\n    /**\r\n     * Get the path to the bootstrap directory.\r\n     *\r\n     * @param  string  $path Optionally, a path to append to the bootstrap path\r\n     * @return string\r\n     */\r\n    public function bootstrapPath($path = '')\r\n    {\r\n        return $this->basePath.DIRECTORY_SEPARATOR.'bootstrap'.($path ? DIRECTORY_SEPARATOR.$path : $path);\r\n    }\r\n\r\n    /**\r\n     * Get the path to the application configuration files.\r\n     *\r\n     * @param  string  $path Optionally, a path to append to the config path\r\n     * @return string\r\n     */\r\n    public function configPath($path = '')\r\n    {\r\n        return $this->basePath.DIRECTORY_SEPARATOR.'config'.($path ? DIRECTORY_SEPARATOR.$path : $path);\r\n    }\r\n\r\n    /**\r\n     * Get the path to the database directory.\r\n     *\r\n     * @param  string  $path Optionally, a path to append to the database path\r\n     * @return string\r\n     */\r\n    public function databasePath($path = '')\r\n    {\r\n        return ($this->databasePath ?: $this->basePath.DIRECTORY_SEPARATOR.'database').($path ? DIRECTORY_SEPARATOR.$path : $path);\r\n    }\r\n\r\n    /**\r\n     * Set the database directory.\r\n     *\r\n     * @param  string  $path\r\n     * @return $this\r\n     */\r\n    public function useDatabasePath($path)\r\n    {\r\n        $this->databasePath = $path;\r\n\r\n        $this->instance('path.database', $path);\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get the path to the language files.\r\n     *\r\n     * @return string\r\n     */\r\n    public function langPath()\r\n    {\r\n        return $this->resourcePath().DIRECTORY_SEPARATOR.'lang';\r\n    }\r\n\r\n    /**\r\n     * Get the path to the public / web directory.\r\n     *\r\n     * @return string\r\n     */\r\n    public function publicPath()\r\n    {\r\n        return $this->basePath.DIRECTORY_SEPARATOR.'public';\r\n    }\r\n\r\n    /**\r\n     * Get the path to the storage directory.\r\n     *\r\n     * @return string\r\n     */\r\n    public function storagePath()\r\n    {\r\n        return $this->storagePath ?: $this->basePath.DIRECTORY_SEPARATOR.'storage';\r\n    }\r\n\r\n    /**\r\n     * Set the storage directory.\r\n     *\r\n     * @param  string  $path\r\n     * @return $this\r\n     */\r\n    public function useStoragePath($path)\r\n    {\r\n        $this->storagePath = $path;\r\n\r\n        $this->instance('path.storage', $path);\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get the path to the resources directory.\r\n     *\r\n     * @param  string  $path\r\n     * @return string\r\n     */\r\n    public function resourcePath($path = '')\r\n    {\r\n        return $this->basePath.DIRECTORY_SEPARATOR.'resources'.($path ? DIRECTORY_SEPARATOR.$path : $path);\r\n    }\r\n\r\n    /**\r\n     * Get the path to the environment file directory.\r\n     *\r\n     * @return string\r\n     */\r\n    public function environmentPath()\r\n    {\r\n        return $this->environmentPath ?: $this->basePath;\r\n    }\r\n\r\n    /**\r\n     * Set the directory for the environment file.\r\n     *\r\n     * @param  string  $path\r\n     * @return $this\r\n     */\r\n    public function useEnvironmentPath($path)\r\n    {\r\n        $this->environmentPath = $path;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the environment file to be loaded during bootstrapping.\r\n     *\r\n     * @param  string  $file\r\n     * @return $this\r\n     */\r\n    public function loadEnvironmentFrom($file)\r\n    {\r\n        $this->environmentFile = $file;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get the environment file the application is using.\r\n     *\r\n     * @return string\r\n     */\r\n    public function environmentFile()\r\n    {\r\n        return $this->environmentFile ?: '.env';\r\n    }\r\n\r\n    /**\r\n     * Get the fully qualified path to the environment file.\r\n     *\r\n     * @return string\r\n     */\r\n    public function environmentFilePath()\r\n    {\r\n        return $this->environmentPath().DIRECTORY_SEPARATOR.$this->environmentFile();\r\n    }\r\n\r\n    /**\r\n     * Get or check the current application environment.\r\n     *\r\n     * @param  string|array  $environments\r\n     * @return string|bool\r\n     */\r\n    public function environment(...$environments)\r\n    {\r\n        if (count($environments) > 0) {\r\n            $patterns = is_array($environments[0]) ? $environments[0] : $environments;\r\n\r\n            return Str::is($patterns, $this['env']);\r\n        }\r\n\r\n        return $this['env'];\r\n    }\r\n\r\n    /**\r\n     * Determine if application is in local environment.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isLocal()\r\n    {\r\n        return $this['env'] === 'local';\r\n    }\r\n\r\n    /**\r\n     * Determine if application is in production environment.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isProduction()\r\n    {\r\n        return $this['env'] === 'production';\r\n    }\r\n\r\n    /**\r\n     * Detect the application's current environment.\r\n     *\r\n     * @param  \\Closure  $callback\r\n     * @return string\r\n     */\r\n    public function detectEnvironment(Closure $callback)\r\n    {\r\n        $args = $_SERVER['argv'] ?? null;\r\n\r\n        return $this['env'] = (new EnvironmentDetector)->detect($callback, $args);\r\n    }\r\n\r\n    /**\r\n     * Determine if the application is running in the console.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function runningInConsole()\r\n    {\r\n        if ($this->isRunningInConsole === null) {\r\n            $this->isRunningInConsole = Env::get('APP_RUNNING_IN_CONSOLE') ?? (\\PHP_SAPI === 'cli' || \\PHP_SAPI === 'phpdbg');\r\n        }\r\n\r\n        return $this->isRunningInConsole;\r\n    }\r\n\r\n    /**\r\n     * Determine if the application is running unit tests.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function runningUnitTests()\r\n    {\r\n        return $this['env'] === 'testing';\r\n    }\r\n\r\n    /**\r\n     * Register all of the configured providers.\r\n     *\r\n     * @return void\r\n     */\r\n    public function registerConfiguredProviders()\r\n    {\r\n        $providers = Collection::make($this->config['app.providers'])\r\n                        ->partition(function ($provider) {\r\n                            return strpos($provider, 'Illuminate\\\\') === 0;\r\n                        });\r\n\r\n        $providers->splice(1, 0, [$this->make(PackageManifest::class)->providers()]);\r\n\r\n        (new ProviderRepository($this, new Filesystem, $this->getCachedServicesPath()))\r\n                    ->load($providers->collapse()->toArray());\r\n    }\r\n\r\n    /**\r\n     * Register a service provider with the application.\r\n     *\r\n     * @param  \\Illuminate\\Support\\ServiceProvider|string  $provider\r\n     * @param  bool  $force\r\n     * @return \\Illuminate\\Support\\ServiceProvider\r\n     */\r\n    public function register($provider, $force = false)\r\n    {\r\n        if (($registered = $this->getProvider($provider)) && ! $force) {\r\n            return $registered;\r\n        }\r\n\r\n        // If the given \"provider\" is a string, we will resolve it, passing in the\r\n        // application instance automatically for the developer. This is simply\r\n        // a more convenient way of specifying your service provider classes.\r\n        if (is_string($provider)) {\r\n            $provider = $this->resolveProvider($provider);\r\n        }\r\n\r\n        $provider->register();\r\n\r\n        // If there are bindings / singletons set as properties on the provider we\r\n        // will spin through them and register them with the application, which\r\n        // serves as a convenience layer while registering a lot of bindings.\r\n        if (property_exists($provider, 'bindings')) {\r\n            foreach ($provider->bindings as $key => $value) {\r\n                $this->bind($key, $value);\r\n            }\r\n        }\r\n\r\n        if (property_exists($provider, 'singletons')) {\r\n            foreach ($provider->singletons as $key => $value) {\r\n                $this->singleton($key, $value);\r\n            }\r\n        }\r\n\r\n        $this->markAsRegistered($provider);\r\n\r\n        // If the application has already booted, we will call this boot method on\r\n        // the provider class so it has an opportunity to do its boot logic and\r\n        // will be ready for any usage by this developer's application logic.\r\n        if ($this->isBooted()) {\r\n            $this->bootProvider($provider);\r\n        }\r\n\r\n        return $provider;\r\n    }\r\n\r\n    /**\r\n     * Get the registered service provider instance if it exists.\r\n     *\r\n     * @param  \\Illuminate\\Support\\ServiceProvider|string  $provider\r\n     * @return \\Illuminate\\Support\\ServiceProvider|null\r\n     */\r\n    public function getProvider($provider)\r\n    {\r\n        return array_values($this->getProviders($provider))[0] ?? null;\r\n    }\r\n\r\n    /**\r\n     * Get the registered service provider instances if any exist.\r\n     *\r\n     * @param  \\Illuminate\\Support\\ServiceProvider|string  $provider\r\n     * @return array\r\n     */\r\n    public function getProviders($provider)\r\n    {\r\n        $name = is_string($provider) ? $provider : get_class($provider);\r\n\r\n        return Arr::where($this->serviceProviders, function ($value) use ($name) {\r\n            return $value instanceof $name;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resolve a service provider instance from the class name.\r\n     *\r\n     * @param  string  $provider\r\n     * @return \\Illuminate\\Support\\ServiceProvider\r\n     */\r\n    public function resolveProvider($provider)\r\n    {\r\n        return new $provider($this);\r\n    }\r\n\r\n    /**\r\n     * Mark the given provider as registered.\r\n     *\r\n     * @param  \\Illuminate\\Support\\ServiceProvider  $provider\r\n     * @return void\r\n     */\r\n    protected function markAsRegistered($provider)\r\n    {\r\n        $this->serviceProviders[] = $provider;\r\n\r\n        $this->loadedProviders[get_class($provider)] = true;\r\n    }\r\n\r\n    /**\r\n     * Load and boot all of the remaining deferred providers.\r\n     *\r\n     * @return void\r\n     */\r\n    public function loadDeferredProviders()\r\n    {\r\n        // We will simply spin through each of the deferred providers and register each\r\n        // one and boot them if the application has booted. This should make each of\r\n        // the remaining services available to this application for immediate use.\r\n        foreach ($this->deferredServices as $service => $provider) {\r\n            $this->loadDeferredProvider($service);\r\n        }\r\n\r\n        $this->deferredServices = [];\r\n    }\r\n\r\n    /**\r\n     * Load the provider for a deferred service.\r\n     *\r\n     * @param  string  $service\r\n     * @return void\r\n     */\r\n    public function loadDeferredProvider($service)\r\n    {\r\n        if (! $this->isDeferredService($service)) {\r\n            return;\r\n        }\r\n\r\n        $provider = $this->deferredServices[$service];\r\n\r\n        // If the service provider has not already been loaded and registered we can\r\n        // register it with the application and remove the service from this list\r\n        // of deferred services, since it will already be loaded on subsequent.\r\n        if (! isset($this->loadedProviders[$provider])) {\r\n            $this->registerDeferredProvider($provider, $service);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a deferred provider and service.\r\n     *\r\n     * @param  string  $provider\r\n     * @param  string|null  $service\r\n     * @return void\r\n     */\r\n    public function registerDeferredProvider($provider, $service = null)\r\n    {\r\n        // Once the provider that provides the deferred service has been registered we\r\n        // will remove it from our local list of the deferred services with related\r\n        // providers so that this container does not try to resolve it out again.\r\n        if ($service) {\r\n            unset($this->deferredServices[$service]);\r\n        }\r\n\r\n        $this->register($instance = new $provider($this));\r\n\r\n        if (! $this->isBooted()) {\r\n            $this->booting(function () use ($instance) {\r\n                $this->bootProvider($instance);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resolve the given type from the container.\r\n     *\r\n     * @param  string  $abstract\r\n     * @param  array  $parameters\r\n     * @return mixed\r\n     */\r\n    public function make($abstract, array $parameters = [])\r\n    {\r\n        $this->loadDeferredProviderIfNeeded($abstract = $this->getAlias($abstract));\r\n\r\n        return parent::make($abstract, $parameters);\r\n    }\r\n\r\n    /**\r\n     * Resolve the given type from the container.\r\n     *\r\n     * @param  string  $abstract\r\n     * @param  array  $parameters\r\n     * @param  bool  $raiseEvents\r\n     * @return mixed\r\n     */\r\n    protected function resolve($abstract, $parameters = [], $raiseEvents = true)\r\n    {\r\n        $this->loadDeferredProviderIfNeeded($abstract = $this->getAlias($abstract));\r\n\r\n        return parent::resolve($abstract, $parameters, $raiseEvents);\r\n    }\r\n\r\n    /**\r\n     * Load the deferred provider if the given type is a deferred service and the instance has not been loaded.\r\n     *\r\n     * @param  string  $abstract\r\n     * @return void\r\n     */\r\n    protected function loadDeferredProviderIfNeeded($abstract)\r\n    {\r\n        if ($this->isDeferredService($abstract) && ! isset($this->instances[$abstract])) {\r\n            $this->loadDeferredProvider($abstract);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the given abstract type has been bound.\r\n     *\r\n     * @param  string  $abstract\r\n     * @return bool\r\n     */\r\n    public function bound($abstract)\r\n    {\r\n        return $this->isDeferredService($abstract) || parent::bound($abstract);\r\n    }\r\n\r\n    /**\r\n     * Determine if the application has booted.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isBooted()\r\n    {\r\n        return $this->booted;\r\n    }\r\n\r\n    /**\r\n     * Boot the application's service providers.\r\n     *\r\n     * @return void\r\n     */\r\n    public function boot()\r\n    {\r\n        if ($this->isBooted()) {\r\n            return;\r\n        }\r\n\r\n        // Once the application has booted we will also fire some \"booted\" callbacks\r\n        // for any listeners that need to do work after this initial booting gets\r\n        // finished. This is useful when ordering the boot-up processes we run.\r\n        $this->fireAppCallbacks($this->bootingCallbacks);\r\n\r\n        array_walk($this->serviceProviders, function ($p) {\r\n            $this->bootProvider($p);\r\n        });\r\n\r\n        $this->booted = true;\r\n\r\n        $this->fireAppCallbacks($this->bootedCallbacks);\r\n    }\r\n\r\n    /**\r\n     * Boot the given service provider.\r\n     *\r\n     * @param  \\Illuminate\\Support\\ServiceProvider  $provider\r\n     * @return mixed\r\n     */\r\n    protected function bootProvider(ServiceProvider $provider)\r\n    {\r\n        if (method_exists($provider, 'boot')) {\r\n            return $this->call([$provider, 'boot']);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a new boot listener.\r\n     *\r\n     * @param  callable  $callback\r\n     * @return void\r\n     */\r\n    public function booting($callback)\r\n    {\r\n        $this->bootingCallbacks[] = $callback;\r\n    }\r\n\r\n    /**\r\n     * Register a new \"booted\" listener.\r\n     *\r\n     * @param  callable  $callback\r\n     * @return void\r\n     */\r\n    public function booted($callback)\r\n    {\r\n        $this->bootedCallbacks[] = $callback;\r\n\r\n        if ($this->isBooted()) {\r\n            $this->fireAppCallbacks([$callback]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call the booting callbacks for the application.\r\n     *\r\n     * @param  callable[]  $callbacks\r\n     * @return void\r\n     */\r\n    protected function fireAppCallbacks(array $callbacks)\r\n    {\r\n        foreach ($callbacks as $callback) {\r\n            $callback($this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * {@inheritdoc}\r\n     */\r\n    public function handle(SymfonyRequest $request, int $type = self::MASTER_REQUEST, bool $catch = true)\r\n    {\r\n        return $this[HttpKernelContract::class]->handle(Request::createFromBase($request));\r\n    }\r\n\r\n    /**\r\n     * Determine if middleware has been disabled for the application.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function shouldSkipMiddleware()\r\n    {\r\n        return $this->bound('middleware.disable') &&\r\n               $this->make('middleware.disable') === true;\r\n    }\r\n\r\n    /**\r\n     * Get the path to the cached services.php file.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCachedServicesPath()\r\n    {\r\n        return $this->normalizeCachePath('APP_SERVICES_CACHE', 'cache/services.php');\r\n    }\r\n\r\n    /**\r\n     * Get the path to the cached packages.php file.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCachedPackagesPath()\r\n    {\r\n        return $this->normalizeCachePath('APP_PACKAGES_CACHE', 'cache/packages.php');\r\n    }\r\n\r\n    /**\r\n     * Determine if the application configuration is cached.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function configurationIsCached()\r\n    {\r\n        return file_exists($this->getCachedConfigPath());\r\n    }\r\n\r\n    /**\r\n     * Get the path to the configuration cache file.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCachedConfigPath()\r\n    {\r\n        return $this->normalizeCachePath('APP_CONFIG_CACHE', 'cache/config.php');\r\n    }\r\n\r\n    /**\r\n     * Determine if the application routes are cached.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function routesAreCached()\r\n    {\r\n        return $this['files']->exists($this->getCachedRoutesPath());\r\n    }\r\n\r\n    /**\r\n     * Get the path to the routes cache file.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCachedRoutesPath()\r\n    {\r\n        return $this->normalizeCachePath('APP_ROUTES_CACHE', 'cache/routes-v7.php');\r\n    }\r\n\r\n    /**\r\n     * Determine if the application events are cached.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function eventsAreCached()\r\n    {\r\n        return $this['files']->exists($this->getCachedEventsPath());\r\n    }\r\n\r\n    /**\r\n     * Get the path to the events cache file.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getCachedEventsPath()\r\n    {\r\n        return $this->normalizeCachePath('APP_EVENTS_CACHE', 'cache/events.php');\r\n    }\r\n\r\n    /**\r\n     * Normalize a relative or absolute path to a cache file.\r\n     *\r\n     * @param  string  $key\r\n     * @param  string  $default\r\n     * @return string\r\n     */\r\n    protected function normalizeCachePath($key, $default)\r\n    {\r\n        if (is_null($env = Env::get($key))) {\r\n            return $this->bootstrapPath($default);\r\n        }\r\n\r\n        return Str::startsWith($env, $this->absoluteCachePathPrefixes)\r\n                ? $env\r\n                : $this->basePath($env);\r\n    }\r\n\r\n    /**\r\n     * Add new prefix to list of absolute path prefixes.\r\n     *\r\n     * @param  string  $prefix\r\n     * @return $this\r\n     */\r\n    public function addAbsoluteCachePathPrefix($prefix)\r\n    {\r\n        $this->absoluteCachePathPrefixes[] = $prefix;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Determine if the application is currently down for maintenance.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function isDownForMaintenance()\r\n    {\r\n        return file_exists($this->storagePath().'/framework/down');\r\n    }\r\n\r\n    /**\r\n     * Throw an HttpException with the given data.\r\n     *\r\n     * @param  int  $code\r\n     * @param  string  $message\r\n     * @param  array  $headers\r\n     * @return void\r\n     *\r\n     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\r\n     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException\r\n     */\r\n    public function abort($code, $message = '', array $headers = [])\r\n    {\r\n        if ($code == 404) {\r\n            throw new NotFoundHttpException($message);\r\n        }\r\n\r\n        throw new HttpException($code, $message, null, $headers);\r\n    }\r\n\r\n    /**\r\n     * Register a terminating callback with the application.\r\n     *\r\n     * @param  callable|string  $callback\r\n     * @return $this\r\n     */\r\n    public function terminating($callback)\r\n    {\r\n        $this->terminatingCallbacks[] = $callback;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Terminate the application.\r\n     *\r\n     * @return void\r\n     */\r\n    public function terminate()\r\n    {\r\n        foreach ($this->terminatingCallbacks as $terminating) {\r\n            $this->call($terminating);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the service providers that have been loaded.\r\n     *\r\n     * @return array\r\n     */\r\n    public function getLoadedProviders()\r\n    {\r\n        return $this->loadedProviders;\r\n    }\r\n\r\n    /**\r\n     * Determine if the given service provider is loaded.\r\n     *\r\n     * @param  string  $provider\r\n     * @return bool\r\n     */\r\n    public function providerIsLoaded(string $provider)\r\n    {\r\n        return isset($this->loadedProviders[$provider]);\r\n    }\r\n\r\n    /**\r\n     * Get the application's deferred services.\r\n     *\r\n     * @return array\r\n     */\r\n    public function getDeferredServices()\r\n    {\r\n        return $this->deferredServices;\r\n    }\r\n\r\n    /**\r\n     * Set the application's deferred services.\r\n     *\r\n     * @param  array  $services\r\n     * @return void\r\n     */\r\n    public function setDeferredServices(array $services)\r\n    {\r\n        $this->deferredServices = $services;\r\n    }\r\n\r\n    /**\r\n     * Add an array of services to the application's deferred services.\r\n     *\r\n     * @param  array  $services\r\n     * @return void\r\n     */\r\n    public function addDeferredServices(array $services)\r\n    {\r\n        $this->deferredServices = array_merge($this->deferredServices, $services);\r\n    }\r\n\r\n    /**\r\n     * Determine if the given service is a deferred service.\r\n     *\r\n     * @param  string  $service\r\n     * @return bool\r\n     */\r\n    public function isDeferredService($service)\r\n    {\r\n        return isset($this->deferredServices[$service]);\r\n    }\r\n\r\n    /**\r\n     * Configure the real-time facade namespace.\r\n     *\r\n     * @param  string  $namespace\r\n     * @return void\r\n     */\r\n    public function provideFacades($namespace)\r\n    {\r\n        AliasLoader::setFacadeNamespace($namespace);\r\n    }\r\n\r\n    /**\r\n     * Get the current application locale.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getLocale()\r\n    {\r\n        return $this['config']->get('app.locale');\r\n    }\r\n\r\n    /**\r\n     * Get the current application fallback locale.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getFallbackLocale()\r\n    {\r\n        return $this['config']->get('app.fallback_locale');\r\n    }\r\n\r\n    /**\r\n     * Set the current application locale.\r\n     *\r\n     * @param  string  $locale\r\n     * @return void\r\n     */\r\n    public function setLocale($locale)\r\n    {\r\n        $this['config']->set('app.locale', $locale);\r\n\r\n        $this['translator']->setLocale($locale);\r\n\r\n        $this['events']->dispatch(new LocaleUpdated($locale));\r\n    }\r\n\r\n    /**\r\n     * Set the current application fallback locale.\r\n     *\r\n     * @param  string  $fallbackLocale\r\n     * @return void\r\n     */\r\n    public function setFallbackLocale($fallbackLocale)\r\n    {\r\n        $this['config']->set('app.fallback_locale', $fallbackLocale);\r\n\r\n        $this['translator']->setFallback($fallbackLocale);\r\n    }\r\n\r\n    /**\r\n     * Determine if application locale is the given locale.\r\n     *\r\n     * @param  string  $locale\r\n     * @return bool\r\n     */\r\n    public function isLocale($locale)\r\n    {\r\n        return $this->getLocale() == $locale;\r\n    }\r\n\r\n    /**\r\n     * Register the core class aliases in the container.\r\n     *\r\n     * @return void\r\n     */\r\n    public function registerCoreContainerAliases()\r\n    {\r\n        foreach ([\r\n            'app'                  => [self::class, \\Illuminate\\Contracts\\Container\\Container::class, \\Illuminate\\Contracts\\Foundation\\Application::class, \\Psr\\Container\\ContainerInterface::class],\r\n            'auth'                 => [\\Illuminate\\Auth\\AuthManager::class, \\Illuminate\\Contracts\\Auth\\Factory::class],\r\n            'auth.driver'          => [\\Illuminate\\Contracts\\Auth\\Guard::class],\r\n            'blade.compiler'       => [\\Illuminate\\View\\Compilers\\BladeCompiler::class],\r\n            'cache'                => [\\Illuminate\\Cache\\CacheManager::class, \\Illuminate\\Contracts\\Cache\\Factory::class],\r\n            'cache.store'          => [\\Illuminate\\Cache\\Repository::class, \\Illuminate\\Contracts\\Cache\\Repository::class, \\Psr\\SimpleCache\\CacheInterface::class],\r\n            'cache.psr6'           => [\\Symfony\\Component\\Cache\\Adapter\\Psr16Adapter::class, \\Symfony\\Component\\Cache\\Adapter\\AdapterInterface::class, \\Psr\\Cache\\CacheItemPoolInterface::class],\r\n            'config'               => [\\Illuminate\\Config\\Repository::class, \\Illuminate\\Contracts\\Config\\Repository::class],\r\n            'cookie'               => [\\Illuminate\\Cookie\\CookieJar::class, \\Illuminate\\Contracts\\Cookie\\Factory::class, \\Illuminate\\Contracts\\Cookie\\QueueingFactory::class],\r\n            'encrypter'            => [\\Illuminate\\Encryption\\Encrypter::class, \\Illuminate\\Contracts\\Encryption\\Encrypter::class],\r\n            'db'                   => [\\Illuminate\\Database\\DatabaseManager::class, \\Illuminate\\Database\\ConnectionResolverInterface::class],\r\n            'db.connection'        => [\\Illuminate\\Database\\Connection::class, \\Illuminate\\Database\\ConnectionInterface::class],\r\n            'events'               => [\\Illuminate\\Events\\Dispatcher::class, \\Illuminate\\Contracts\\Events\\Dispatcher::class],\r\n            'files'                => [\\Illuminate\\Filesystem\\Filesystem::class],\r\n            'filesystem'           => [\\Illuminate\\Filesystem\\FilesystemManager::class, \\Illuminate\\Contracts\\Filesystem\\Factory::class],\r\n            'filesystem.disk'      => [\\Illuminate\\Contracts\\Filesystem\\Filesystem::class],\r\n            'filesystem.cloud'     => [\\Illuminate\\Contracts\\Filesystem\\Cloud::class],\r\n            'hash'                 => [\\Illuminate\\Hashing\\HashManager::class],\r\n            'hash.driver'          => [\\Illuminate\\Contracts\\Hashing\\Hasher::class],\r\n            'translator'           => [\\Illuminate\\Translation\\Translator::class, \\Illuminate\\Contracts\\Translation\\Translator::class],\r\n            'log'                  => [\\Illuminate\\Log\\LogManager::class, \\Psr\\Log\\LoggerInterface::class],\r\n            'mail.manager'         => [\\Illuminate\\Mail\\MailManager::class, \\Illuminate\\Contracts\\Mail\\Factory::class],\r\n            'mailer'               => [\\Illuminate\\Mail\\Mailer::class, \\Illuminate\\Contracts\\Mail\\Mailer::class, \\Illuminate\\Contracts\\Mail\\MailQueue::class],\r\n            'auth.password'        => [\\Illuminate\\Auth\\Passwords\\PasswordBrokerManager::class, \\Illuminate\\Contracts\\Auth\\PasswordBrokerFactory::class],\r\n            'auth.password.broker' => [\\Illuminate\\Auth\\Passwords\\PasswordBroker::class, \\Illuminate\\Contracts\\Auth\\PasswordBroker::class],\r\n            'queue'                => [\\Illuminate\\Queue\\QueueManager::class, \\Illuminate\\Contracts\\Queue\\Factory::class, \\Illuminate\\Contracts\\Queue\\Monitor::class],\r\n            'queue.connection'     => [\\Illuminate\\Contracts\\Queue\\Queue::class],\r\n            'queue.failer'         => [\\Illuminate\\Queue\\Failed\\FailedJobProviderInterface::class],\r\n            'redirect'             => [\\Illuminate\\Routing\\Redirector::class],\r\n            'redis'                => [\\Illuminate\\Redis\\RedisManager::class, \\Illuminate\\Contracts\\Redis\\Factory::class],\r\n            'redis.connection'     => [\\Illuminate\\Redis\\Connections\\Connection::class, \\Illuminate\\Contracts\\Redis\\Connection::class],\r\n            'request'              => [\\Illuminate\\Http\\Request::class, \\Symfony\\Component\\HttpFoundation\\Request::class],\r\n            'router'               => [\\Illuminate\\Routing\\Router::class, \\Illuminate\\Contracts\\Routing\\Registrar::class, \\Illuminate\\Contracts\\Routing\\BindingRegistrar::class],\r\n            'session'              => [\\Illuminate\\Session\\SessionManager::class],\r\n            'session.store'        => [\\Illuminate\\Session\\Store::class, \\Illuminate\\Contracts\\Session\\Session::class],\r\n            'url'                  => [\\Illuminate\\Routing\\UrlGenerator::class, \\Illuminate\\Contracts\\Routing\\UrlGenerator::class],\r\n            'validator'            => [\\Illuminate\\Validation\\Factory::class, \\Illuminate\\Contracts\\Validation\\Factory::class],\r\n            'view'                 => [\\Illuminate\\View\\Factory::class, \\Illuminate\\Contracts\\View\\Factory::class],\r\n        ] as $key => $aliases) {\r\n            foreach ($aliases as $alias) {\r\n                $this->alias($key, $alias);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Flush the container of all bindings and resolved instances.\r\n     *\r\n     * @return void\r\n     */\r\n    public function flush()\r\n    {\r\n        parent::flush();\r\n\r\n        $this->buildStack = [];\r\n        $this->loadedProviders = [];\r\n        $this->bootedCallbacks = [];\r\n        $this->bootingCallbacks = [];\r\n        $this->deferredServices = [];\r\n        $this->reboundCallbacks = [];\r\n        $this->serviceProviders = [];\r\n        $this->resolvingCallbacks = [];\r\n        $this->terminatingCallbacks = [];\r\n        $this->afterResolvingCallbacks = [];\r\n        $this->globalResolvingCallbacks = [];\r\n    }\r\n\r\n    /**\r\n     * Get the application namespace.\r\n     *\r\n     * @return string\r\n     *\r\n     * @throws \\RuntimeException\r\n     */\r\n    public function getNamespace()\r\n    {\r\n        if (! is_null($this->namespace)) {\r\n            return $this->namespace;\r\n        }\r\n\r\n        $composer = json_decode(file_get_contents($this->basePath('composer.json')), true);\r\n\r\n        foreach ((array) data_get($composer, 'autoload.psr-4') as $namespace => $path) {\r\n            foreach ((array) $path as $pathChoice) {\r\n                if (realpath($this->path()) === realpath($this->basePath($pathChoice))) {\r\n                    return $this->namespace = $namespace;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new RuntimeException('Unable to detect application namespace.');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Foundation/Application.php b/vendor/laravel/framework/src/Illuminate/Foundation/Application.php
--- a/vendor/laravel/framework/src/Illuminate/Foundation/Application.php	
+++ b/vendor/laravel/framework/src/Illuminate/Foundation/Application.php	
@@ -33,7 +33,7 @@
      *
      * @var string
      */
-    const VERSION = '7.30.0';
+    const VERSION = '7.30.1';
 
     /**
      * The base path for the Laravel installation.
Index: vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/MailFake.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Support\\Testing\\Fakes;\r\n\r\nuse Closure;\r\nuse Illuminate\\Contracts\\Mail\\Factory;\r\nuse Illuminate\\Contracts\\Mail\\Mailable;\r\nuse Illuminate\\Contracts\\Mail\\Mailer;\r\nuse Illuminate\\Contracts\\Mail\\MailQueue;\r\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\r\nuse Illuminate\\Support\\Traits\\ReflectsClosures;\r\nuse PHPUnit\\Framework\\Assert as PHPUnit;\r\n\r\nclass MailFake implements Factory, Mailer, MailQueue\r\n{\r\n    use ReflectsClosures;\r\n\r\n    /**\r\n     * The mailer currently being used to send a message.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $currentMailer;\r\n\r\n    /**\r\n     * All of the mailables that have been sent.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $mailables = [];\r\n\r\n    /**\r\n     * All of the mailables that have been queued.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $queuedMailables = [];\r\n\r\n    /**\r\n     * Assert if a mailable was sent based on a truth-test callback.\r\n     *\r\n     * @param  string|\\Closure  $mailable\r\n     * @param  callable|int|null  $callback\r\n     * @return void\r\n     */\r\n    public function assertSent($mailable, $callback = null)\r\n    {\r\n        if ($mailable instanceof Closure) {\r\n            [$mailable, $callback] = [$this->firstClosureParameterType($mailable), $mailable];\r\n        }\r\n\r\n        if (is_numeric($callback)) {\r\n            return $this->assertSentTimes($mailable, $callback);\r\n        }\r\n\r\n        $message = \"The expected [{$mailable}] mailable was not sent.\";\r\n\r\n        if (count($this->queuedMailables) > 0) {\r\n            $message .= ' Did you mean to use assertQueued() instead?';\r\n        }\r\n\r\n        PHPUnit::assertTrue(\r\n            $this->sent($mailable, $callback)->count() > 0,\r\n            $message\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Assert if a mailable was sent a number of times.\r\n     *\r\n     * @param  string  $mailable\r\n     * @param  int  $times\r\n     * @return void\r\n     */\r\n    protected function assertSentTimes($mailable, $times = 1)\r\n    {\r\n        $count = $this->sent($mailable)->count();\r\n\r\n        PHPUnit::assertSame(\r\n            $times, $count,\r\n            \"The expected [{$mailable}] mailable was sent {$count} times instead of {$times} times.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Determine if a mailable was not sent based on a truth-test callback.\r\n     *\r\n     * @param  string  $mailable\r\n     * @param  callable|null  $callback\r\n     * @return void\r\n     */\r\n    public function assertNotSent($mailable, $callback = null)\r\n    {\r\n        PHPUnit::assertCount(\r\n            0, $this->sent($mailable, $callback),\r\n            \"The unexpected [{$mailable}] mailable was sent.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Assert that no mailables were sent.\r\n     *\r\n     * @return void\r\n     */\r\n    public function assertNothingSent()\r\n    {\r\n        $mailableNames = collect($this->mailables)->map(function ($mailable) {\r\n            return get_class($mailable);\r\n        })->join(', ');\r\n\r\n        PHPUnit::assertEmpty($this->mailables, 'The following mailables were sent unexpectedly: '.$mailableNames);\r\n    }\r\n\r\n    /**\r\n     * Assert if a mailable was queued based on a truth-test callback.\r\n     *\r\n     * @param  string|\\Closure  $mailable\r\n     * @param  callable|int|null  $callback\r\n     * @return void\r\n     */\r\n    public function assertQueued($mailable, $callback = null)\r\n    {\r\n        if ($mailable instanceof Closure) {\r\n            [$mailable, $callback] = [$this->firstClosureParameterType($mailable), $mailable];\r\n        }\r\n\r\n        if (is_numeric($callback)) {\r\n            return $this->assertQueuedTimes($mailable, $callback);\r\n        }\r\n\r\n        PHPUnit::assertTrue(\r\n            $this->queued($mailable, $callback)->count() > 0,\r\n            \"The expected [{$mailable}] mailable was not queued.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Assert if a mailable was queued a number of times.\r\n     *\r\n     * @param  string  $mailable\r\n     * @param  int  $times\r\n     * @return void\r\n     */\r\n    protected function assertQueuedTimes($mailable, $times = 1)\r\n    {\r\n        $count = $this->queued($mailable)->count();\r\n\r\n        PHPUnit::assertSame(\r\n            $times, $count,\r\n            \"The expected [{$mailable}] mailable was queued {$count} times instead of {$times} times.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Determine if a mailable was not queued based on a truth-test callback.\r\n     *\r\n     * @param  string  $mailable\r\n     * @param  callable|null  $callback\r\n     * @return void\r\n     */\r\n    public function assertNotQueued($mailable, $callback = null)\r\n    {\r\n        PHPUnit::assertCount(\r\n            0, $this->queued($mailable, $callback),\r\n            \"The unexpected [{$mailable}] mailable was queued.\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Assert that no mailables were queued.\r\n     *\r\n     * @return void\r\n     */\r\n    public function assertNothingQueued()\r\n    {\r\n        $mailableNames = collect($this->queuedMailables)->map(function ($mailable) {\r\n            return get_class($mailable);\r\n        })->join(', ');\r\n\r\n        PHPUnit::assertEmpty($this->queuedMailables, 'The following mailables were queued unexpectedly: '.$mailableNames);\r\n    }\r\n\r\n    /**\r\n     * Get all of the mailables matching a truth-test callback.\r\n     *\r\n     * @param  string  $mailable\r\n     * @param  callable|null  $callback\r\n     * @return \\Illuminate\\Support\\Collection\r\n     */\r\n    public function sent($mailable, $callback = null)\r\n    {\r\n        if (! $this->hasSent($mailable)) {\r\n            return collect();\r\n        }\r\n\r\n        $callback = $callback ?: function () {\r\n            return true;\r\n        };\r\n\r\n        return $this->mailablesOf($mailable)->filter(function ($mailable) use ($callback) {\r\n            return $callback($mailable);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine if the given mailable has been sent.\r\n     *\r\n     * @param  string  $mailable\r\n     * @return bool\r\n     */\r\n    public function hasSent($mailable)\r\n    {\r\n        return $this->mailablesOf($mailable)->count() > 0;\r\n    }\r\n\r\n    /**\r\n     * Get all of the queued mailables matching a truth-test callback.\r\n     *\r\n     * @param  string  $mailable\r\n     * @param  callable|null  $callback\r\n     * @return \\Illuminate\\Support\\Collection\r\n     */\r\n    public function queued($mailable, $callback = null)\r\n    {\r\n        if (! $this->hasQueued($mailable)) {\r\n            return collect();\r\n        }\r\n\r\n        $callback = $callback ?: function () {\r\n            return true;\r\n        };\r\n\r\n        return $this->queuedMailablesOf($mailable)->filter(function ($mailable) use ($callback) {\r\n            return $callback($mailable);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine if the given mailable has been queued.\r\n     *\r\n     * @param  string  $mailable\r\n     * @return bool\r\n     */\r\n    public function hasQueued($mailable)\r\n    {\r\n        return $this->queuedMailablesOf($mailable)->count() > 0;\r\n    }\r\n\r\n    /**\r\n     * Get all of the mailed mailables for a given type.\r\n     *\r\n     * @param  string  $type\r\n     * @return \\Illuminate\\Support\\Collection\r\n     */\r\n    protected function mailablesOf($type)\r\n    {\r\n        return collect($this->mailables)->filter(function ($mailable) use ($type) {\r\n            return $mailable instanceof $type;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all of the mailed mailables for a given type.\r\n     *\r\n     * @param  string  $type\r\n     * @return \\Illuminate\\Support\\Collection\r\n     */\r\n    protected function queuedMailablesOf($type)\r\n    {\r\n        return collect($this->queuedMailables)->filter(function ($mailable) use ($type) {\r\n            return $mailable instanceof $type;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a mailer instance by name.\r\n     *\r\n     * @param  string|null  $name\r\n     * @return \\Illuminate\\Mail\\Mailer\r\n     */\r\n    public function mailer($name = null)\r\n    {\r\n        $this->currentMailer = $name;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Begin the process of mailing a mailable class instance.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return \\Illuminate\\Mail\\PendingMail\r\n     */\r\n    public function to($users)\r\n    {\r\n        return (new PendingMailFake($this))->to($users);\r\n    }\r\n\r\n    /**\r\n     * Begin the process of mailing a mailable class instance.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return \\Illuminate\\Mail\\PendingMail\r\n     */\r\n    public function bcc($users)\r\n    {\r\n        return (new PendingMailFake($this))->bcc($users);\r\n    }\r\n\r\n    /**\r\n     * Send a new message with only a raw text part.\r\n     *\r\n     * @param  string  $text\r\n     * @param  \\Closure|string  $callback\r\n     * @return void\r\n     */\r\n    public function raw($text, $callback)\r\n    {\r\n        //\r\n    }\r\n\r\n    /**\r\n     * Send a new message using a view.\r\n     *\r\n     * @param  string|array  $view\r\n     * @param  array  $data\r\n     * @param  \\Closure|string|null  $callback\r\n     * @return void\r\n     */\r\n    public function send($view, array $data = [], $callback = null)\r\n    {\r\n        if (! $view instanceof Mailable) {\r\n            return;\r\n        }\r\n\r\n        $view->mailer($this->currentMailer);\r\n\r\n        $this->currentMailer = null;\r\n\r\n        if ($view instanceof ShouldQueue) {\r\n            return $this->queue($view, $data);\r\n        }\r\n\r\n        $this->mailables[] = $view;\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending.\r\n     *\r\n     * @param  string|array  $view\r\n     * @param  string|null  $queue\r\n     * @return mixed\r\n     */\r\n    public function queue($view, $queue = null)\r\n    {\r\n        if (! $view instanceof Mailable) {\r\n            return;\r\n        }\r\n\r\n        $view->mailer($this->currentMailer);\r\n\r\n        $this->currentMailer = null;\r\n\r\n        $this->queuedMailables[] = $view;\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending after (n) seconds.\r\n     *\r\n     * @param  \\DateTimeInterface|\\DateInterval|int  $delay\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable|string|array  $view\r\n     * @param  string|null  $queue\r\n     * @return mixed\r\n     */\r\n    public function later($delay, $view, $queue = null)\r\n    {\r\n        $this->queue($view, $queue);\r\n    }\r\n\r\n    /**\r\n     * Get the array of failed recipients.\r\n     *\r\n     * @return array\r\n     */\r\n    public function failures()\r\n    {\r\n        return [];\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/MailFake.php b/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/MailFake.php
--- a/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/MailFake.php	
+++ b/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/MailFake.php	
@@ -347,7 +347,7 @@
     /**
      * Queue a new e-mail message for sending.
      *
-     * @param  string|array  $view
+     * @param  \Illuminate\Contracts\Mail\Mailable|string|array  $view
      * @param  string|null  $queue
      * @return mixed
      */
Index: vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/PendingMailFake.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Support\\Testing\\Fakes;\r\n\r\nuse Illuminate\\Contracts\\Mail\\Mailable;\r\nuse Illuminate\\Mail\\PendingMail;\r\n\r\nclass PendingMailFake extends PendingMail\r\n{\r\n    /**\r\n     * Create a new instance.\r\n     *\r\n     * @param  \\Illuminate\\Support\\Testing\\Fakes\\MailFake  $mailer\r\n     * @return void\r\n     */\r\n    public function __construct($mailer)\r\n    {\r\n        $this->mailer = $mailer;\r\n    }\r\n\r\n    /**\r\n     * Send a new mailable message instance.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable;\r\n     * @return mixed\r\n     */\r\n    public function send(Mailable $mailable)\r\n    {\r\n        return $this->mailer->send($this->fill($mailable));\r\n    }\r\n\r\n    /**\r\n     * Send a mailable message immediately.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable;\r\n     * @return mixed\r\n     * @deprecated Use send() instead.\r\n     */\r\n    public function sendNow(Mailable $mailable)\r\n    {\r\n        return $this->send($mailable);\r\n    }\r\n\r\n    /**\r\n     * Push the given mailable onto the queue.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable;\r\n     * @return mixed\r\n     */\r\n    public function queue(Mailable $mailable)\r\n    {\r\n        return $this->mailer->queue($this->fill($mailable));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/PendingMailFake.php b/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/PendingMailFake.php
--- a/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/PendingMailFake.php	
+++ b/vendor/laravel/framework/src/Illuminate/Support/Testing/Fakes/PendingMailFake.php	
@@ -21,7 +21,7 @@
     /**
      * Send a new mailable message instance.
      *
-     * @param  \Illuminate\Contracts\Mail\Mailable  $mailable;
+     * @param  \Illuminate\Contracts\Mail\Mailable  $mailable
      * @return mixed
      */
     public function send(Mailable $mailable)
@@ -32,7 +32,7 @@
     /**
      * Send a mailable message immediately.
      *
-     * @param  \Illuminate\Contracts\Mail\Mailable  $mailable;
+     * @param  \Illuminate\Contracts\Mail\Mailable  $mailable
      * @return mixed
      * @deprecated Use send() instead.
      */
@@ -44,7 +44,7 @@
     /**
      * Push the given mailable onto the queue.
      *
-     * @param  \Illuminate\Contracts\Mail\Mailable  $mailable;
+     * @param  \Illuminate\Contracts\Mail\Mailable  $mailable
      * @return mixed
      */
     public function queue(Mailable $mailable)
Index: vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasRelationships.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Database\\Eloquent\\Concerns;\r\n\r\nuse Closure;\r\nuse Illuminate\\Database\\Eloquent\\Builder;\r\nuse Illuminate\\Database\\Eloquent\\Collection;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\r\nuse Illuminate\\Database\\Eloquent\\Relations\\Relation;\r\nuse Illuminate\\Support\\Arr;\r\nuse Illuminate\\Support\\Str;\r\n\r\ntrait HasRelationships\r\n{\r\n    /**\r\n     * The loaded relationships for the model.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $relations = [];\r\n\r\n    /**\r\n     * The relationships that should be touched on save.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $touches = [];\r\n\r\n    /**\r\n     * The many to many relationship methods.\r\n     *\r\n     * @var array\r\n     */\r\n    public static $manyMethods = [\r\n        'belongsToMany', 'morphToMany', 'morphedByMany',\r\n    ];\r\n\r\n    /**\r\n     * The relation resolver callbacks.\r\n     *\r\n     * @var array\r\n     */\r\n    protected static $relationResolvers = [];\r\n\r\n    /**\r\n     * Define a dynamic relation resolver.\r\n     *\r\n     * @param  string  $name\r\n     * @param  \\Closure  $callback\r\n     * @return void\r\n     */\r\n    public static function resolveRelationUsing($name, Closure $callback)\r\n    {\r\n        static::$relationResolvers = array_replace_recursive(\r\n            static::$relationResolvers,\r\n            [static::class => [$name => $callback]]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Define a one-to-one relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string|null  $foreignKey\r\n     * @param  string|null  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOne\r\n     */\r\n    public function hasOne($related, $foreignKey = null, $localKey = null)\r\n    {\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        $foreignKey = $foreignKey ?: $this->getForeignKey();\r\n\r\n        $localKey = $localKey ?: $this->getKeyName();\r\n\r\n        return $this->newHasOne($instance->newQuery(), $this, $instance->getTable().'.'.$foreignKey, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new HasOne relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $foreignKey\r\n     * @param  string  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOne\r\n     */\r\n    protected function newHasOne(Builder $query, Model $parent, $foreignKey, $localKey)\r\n    {\r\n        return new HasOne($query, $parent, $foreignKey, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Define a has-one-through relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string  $through\r\n     * @param  string|null  $firstKey\r\n     * @param  string|null  $secondKey\r\n     * @param  string|null  $localKey\r\n     * @param  string|null  $secondLocalKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough\r\n     */\r\n    public function hasOneThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null)\r\n    {\r\n        $through = new $through;\r\n\r\n        $firstKey = $firstKey ?: $this->getForeignKey();\r\n\r\n        $secondKey = $secondKey ?: $through->getForeignKey();\r\n\r\n        return $this->newHasOneThrough(\r\n            $this->newRelatedInstance($related)->newQuery(), $this, $through,\r\n            $firstKey, $secondKey, $localKey ?: $this->getKeyName(),\r\n            $secondLocalKey ?: $through->getKeyName()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new HasOneThrough relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $farParent\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $throughParent\r\n     * @param  string  $firstKey\r\n     * @param  string  $secondKey\r\n     * @param  string  $localKey\r\n     * @param  string  $secondLocalKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough\r\n     */\r\n    protected function newHasOneThrough(Builder $query, Model $farParent, Model $throughParent, $firstKey, $secondKey, $localKey, $secondLocalKey)\r\n    {\r\n        return new HasOneThrough($query, $farParent, $throughParent, $firstKey, $secondKey, $localKey, $secondLocalKey);\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic one-to-one relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string  $name\r\n     * @param  string|null  $type\r\n     * @param  string|null  $id\r\n     * @param  string|null  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphOne\r\n     */\r\n    public function morphOne($related, $name, $type = null, $id = null, $localKey = null)\r\n    {\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        [$type, $id] = $this->getMorphs($name, $type, $id);\r\n\r\n        $table = $instance->getTable();\r\n\r\n        $localKey = $localKey ?: $this->getKeyName();\r\n\r\n        return $this->newMorphOne($instance->newQuery(), $this, $table.'.'.$type, $table.'.'.$id, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new MorphOne relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $type\r\n     * @param  string  $id\r\n     * @param  string  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphOne\r\n     */\r\n    protected function newMorphOne(Builder $query, Model $parent, $type, $id, $localKey)\r\n    {\r\n        return new MorphOne($query, $parent, $type, $id, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Define an inverse one-to-one or many relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string|null  $foreignKey\r\n     * @param  string|null  $ownerKey\r\n     * @param  string|null  $relation\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\r\n     */\r\n    public function belongsTo($related, $foreignKey = null, $ownerKey = null, $relation = null)\r\n    {\r\n        // If no relation name was given, we will use this debug backtrace to extract\r\n        // the calling method's name and use that as the relationship name as most\r\n        // of the time this will be what we desire to use for the relationships.\r\n        if (is_null($relation)) {\r\n            $relation = $this->guessBelongsToRelation();\r\n        }\r\n\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        // If no foreign key was supplied, we can use a backtrace to guess the proper\r\n        // foreign key name by using the name of the relationship function, which\r\n        // when combined with an \"_id\" should conventionally match the columns.\r\n        if (is_null($foreignKey)) {\r\n            $foreignKey = Str::snake($relation).'_'.$instance->getKeyName();\r\n        }\r\n\r\n        // Once we have the foreign key names, we'll just create a new Eloquent query\r\n        // for the related models and returns the relationship instance which will\r\n        // actually be responsible for retrieving and hydrating every relations.\r\n        $ownerKey = $ownerKey ?: $instance->getKeyName();\r\n\r\n        return $this->newBelongsTo(\r\n            $instance->newQuery(), $this, $foreignKey, $ownerKey, $relation\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new BelongsTo relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $child\r\n     * @param  string  $foreignKey\r\n     * @param  string  $ownerKey\r\n     * @param  string  $relation\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\r\n     */\r\n    protected function newBelongsTo(Builder $query, Model $child, $foreignKey, $ownerKey, $relation)\r\n    {\r\n        return new BelongsTo($query, $child, $foreignKey, $ownerKey, $relation);\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic, inverse one-to-one or many relationship.\r\n     *\r\n     * @param  string|null  $name\r\n     * @param  string|null  $type\r\n     * @param  string|null  $id\r\n     * @param  string|null  $ownerKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphTo\r\n     */\r\n    public function morphTo($name = null, $type = null, $id = null, $ownerKey = null)\r\n    {\r\n        // If no name is provided, we will use the backtrace to get the function name\r\n        // since that is most likely the name of the polymorphic interface. We can\r\n        // use that to get both the class and foreign key that will be utilized.\r\n        $name = $name ?: $this->guessBelongsToRelation();\r\n\r\n        [$type, $id] = $this->getMorphs(\r\n            Str::snake($name), $type, $id\r\n        );\r\n\r\n        // If the type value is null it is probably safe to assume we're eager loading\r\n        // the relationship. In this case we'll just pass in a dummy query where we\r\n        // need to remove any eager loads that may already be defined on a model.\r\n        return empty($class = $this->{$type})\r\n                    ? $this->morphEagerTo($name, $type, $id, $ownerKey)\r\n                    : $this->morphInstanceTo($class, $name, $type, $id, $ownerKey);\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic, inverse one-to-one or many relationship.\r\n     *\r\n     * @param  string  $name\r\n     * @param  string  $type\r\n     * @param  string  $id\r\n     * @param  string  $ownerKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphTo\r\n     */\r\n    protected function morphEagerTo($name, $type, $id, $ownerKey)\r\n    {\r\n        return $this->newMorphTo(\r\n            $this->newQuery()->setEagerLoads([]), $this, $id, $ownerKey, $type, $name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic, inverse one-to-one or many relationship.\r\n     *\r\n     * @param  string  $target\r\n     * @param  string  $name\r\n     * @param  string  $type\r\n     * @param  string  $id\r\n     * @param  string  $ownerKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphTo\r\n     */\r\n    protected function morphInstanceTo($target, $name, $type, $id, $ownerKey)\r\n    {\r\n        $instance = $this->newRelatedInstance(\r\n            static::getActualClassNameForMorph($target)\r\n        );\r\n\r\n        return $this->newMorphTo(\r\n            $instance->newQuery(), $this, $id, $ownerKey ?? $instance->getKeyName(), $type, $name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new MorphTo relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $foreignKey\r\n     * @param  string  $ownerKey\r\n     * @param  string  $type\r\n     * @param  string  $relation\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphTo\r\n     */\r\n    protected function newMorphTo(Builder $query, Model $parent, $foreignKey, $ownerKey, $type, $relation)\r\n    {\r\n        return new MorphTo($query, $parent, $foreignKey, $ownerKey, $type, $relation);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the actual class name for a given morph class.\r\n     *\r\n     * @param  string  $class\r\n     * @return string\r\n     */\r\n    public static function getActualClassNameForMorph($class)\r\n    {\r\n        return Arr::get(Relation::morphMap() ?: [], $class, $class);\r\n    }\r\n\r\n    /**\r\n     * Guess the \"belongs to\" relationship name.\r\n     *\r\n     * @return string\r\n     */\r\n    protected function guessBelongsToRelation()\r\n    {\r\n        [$one, $two, $caller] = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 3);\r\n\r\n        return $caller['function'];\r\n    }\r\n\r\n    /**\r\n     * Define a one-to-many relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string|null  $foreignKey\r\n     * @param  string|null  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\r\n     */\r\n    public function hasMany($related, $foreignKey = null, $localKey = null)\r\n    {\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        $foreignKey = $foreignKey ?: $this->getForeignKey();\r\n\r\n        $localKey = $localKey ?: $this->getKeyName();\r\n\r\n        return $this->newHasMany(\r\n            $instance->newQuery(), $this, $instance->getTable().'.'.$foreignKey, $localKey\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new HasMany relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $foreignKey\r\n     * @param  string  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\r\n     */\r\n    protected function newHasMany(Builder $query, Model $parent, $foreignKey, $localKey)\r\n    {\r\n        return new HasMany($query, $parent, $foreignKey, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Define a has-many-through relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string  $through\r\n     * @param  string|null  $firstKey\r\n     * @param  string|null  $secondKey\r\n     * @param  string|null  $localKey\r\n     * @param  string|null  $secondLocalKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough\r\n     */\r\n    public function hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null)\r\n    {\r\n        $through = new $through;\r\n\r\n        $firstKey = $firstKey ?: $this->getForeignKey();\r\n\r\n        $secondKey = $secondKey ?: $through->getForeignKey();\r\n\r\n        return $this->newHasManyThrough(\r\n            $this->newRelatedInstance($related)->newQuery(),\r\n            $this,\r\n            $through,\r\n            $firstKey,\r\n            $secondKey,\r\n            $localKey ?: $this->getKeyName(),\r\n            $secondLocalKey ?: $through->getKeyName()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new HasManyThrough relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $farParent\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $throughParent\r\n     * @param  string  $firstKey\r\n     * @param  string  $secondKey\r\n     * @param  string  $localKey\r\n     * @param  string  $secondLocalKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough\r\n     */\r\n    protected function newHasManyThrough(Builder $query, Model $farParent, Model $throughParent, $firstKey, $secondKey, $localKey, $secondLocalKey)\r\n    {\r\n        return new HasManyThrough($query, $farParent, $throughParent, $firstKey, $secondKey, $localKey, $secondLocalKey);\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic one-to-many relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string  $name\r\n     * @param  string|null  $type\r\n     * @param  string|null  $id\r\n     * @param  string|null  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphMany\r\n     */\r\n    public function morphMany($related, $name, $type = null, $id = null, $localKey = null)\r\n    {\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        // Here we will gather up the morph type and ID for the relationship so that we\r\n        // can properly query the intermediate table of a relation. Finally, we will\r\n        // get the table and create the relationship instances for the developers.\r\n        [$type, $id] = $this->getMorphs($name, $type, $id);\r\n\r\n        $table = $instance->getTable();\r\n\r\n        $localKey = $localKey ?: $this->getKeyName();\r\n\r\n        return $this->newMorphMany($instance->newQuery(), $this, $table.'.'.$type, $table.'.'.$id, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new MorphMany relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $type\r\n     * @param  string  $id\r\n     * @param  string  $localKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphMany\r\n     */\r\n    protected function newMorphMany(Builder $query, Model $parent, $type, $id, $localKey)\r\n    {\r\n        return new MorphMany($query, $parent, $type, $id, $localKey);\r\n    }\r\n\r\n    /**\r\n     * Define a many-to-many relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string|null  $table\r\n     * @param  string|null  $foreignPivotKey\r\n     * @param  string|null  $relatedPivotKey\r\n     * @param  string|null  $parentKey\r\n     * @param  string|null  $relatedKey\r\n     * @param  string|null  $relation\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany\r\n     */\r\n    public function belongsToMany($related, $table = null, $foreignPivotKey = null, $relatedPivotKey = null,\r\n                                  $parentKey = null, $relatedKey = null, $relation = null)\r\n    {\r\n        // If no relationship name was passed, we will pull backtraces to get the\r\n        // name of the calling function. We will use that function name as the\r\n        // title of this relation since that is a great convention to apply.\r\n        if (is_null($relation)) {\r\n            $relation = $this->guessBelongsToManyRelation();\r\n        }\r\n\r\n        // First, we'll need to determine the foreign key and \"other key\" for the\r\n        // relationship. Once we have determined the keys we'll make the query\r\n        // instances as well as the relationship instances we need for this.\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        $foreignPivotKey = $foreignPivotKey ?: $this->getForeignKey();\r\n\r\n        $relatedPivotKey = $relatedPivotKey ?: $instance->getForeignKey();\r\n\r\n        // If no table name was provided, we can guess it by concatenating the two\r\n        // models using underscores in alphabetical order. The two model names\r\n        // are transformed to snake case from their default CamelCase also.\r\n        if (is_null($table)) {\r\n            $table = $this->joiningTable($related, $instance);\r\n        }\r\n\r\n        return $this->newBelongsToMany(\r\n            $instance->newQuery(), $this, $table, $foreignPivotKey,\r\n            $relatedPivotKey, $parentKey ?: $this->getKeyName(),\r\n            $relatedKey ?: $instance->getKeyName(), $relation\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new BelongsToMany relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $table\r\n     * @param  string  $foreignPivotKey\r\n     * @param  string  $relatedPivotKey\r\n     * @param  string  $parentKey\r\n     * @param  string  $relatedKey\r\n     * @param  string|null  $relationName\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany\r\n     */\r\n    protected function newBelongsToMany(Builder $query, Model $parent, $table, $foreignPivotKey, $relatedPivotKey,\r\n                                        $parentKey, $relatedKey, $relationName = null)\r\n    {\r\n        return new BelongsToMany($query, $parent, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey, $relationName);\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic many-to-many relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string  $name\r\n     * @param  string|null  $table\r\n     * @param  string|null  $foreignPivotKey\r\n     * @param  string|null  $relatedPivotKey\r\n     * @param  string|null  $parentKey\r\n     * @param  string|null  $relatedKey\r\n     * @param  bool  $inverse\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphToMany\r\n     */\r\n    public function morphToMany($related, $name, $table = null, $foreignPivotKey = null,\r\n                                $relatedPivotKey = null, $parentKey = null,\r\n                                $relatedKey = null, $inverse = false)\r\n    {\r\n        $caller = $this->guessBelongsToManyRelation();\r\n\r\n        // First, we will need to determine the foreign key and \"other key\" for the\r\n        // relationship. Once we have determined the keys we will make the query\r\n        // instances, as well as the relationship instances we need for these.\r\n        $instance = $this->newRelatedInstance($related);\r\n\r\n        $foreignPivotKey = $foreignPivotKey ?: $name.'_id';\r\n\r\n        $relatedPivotKey = $relatedPivotKey ?: $instance->getForeignKey();\r\n\r\n        // Now we're ready to create a new query builder for this related model and\r\n        // the relationship instances for this relation. This relations will set\r\n        // appropriate query constraints then entirely manages the hydrations.\r\n        if (! $table) {\r\n            $words = preg_split('/(_)/u', $name, -1, PREG_SPLIT_DELIM_CAPTURE);\r\n\r\n            $lastWord = array_pop($words);\r\n\r\n            $table = implode('', $words).Str::plural($lastWord);\r\n        }\r\n\r\n        return $this->newMorphToMany(\r\n            $instance->newQuery(), $this, $name, $table,\r\n            $foreignPivotKey, $relatedPivotKey, $parentKey ?: $this->getKeyName(),\r\n            $relatedKey ?: $instance->getKeyName(), $caller, $inverse\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new MorphToMany relationship.\r\n     *\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $parent\r\n     * @param  string  $name\r\n     * @param  string  $table\r\n     * @param  string  $foreignPivotKey\r\n     * @param  string  $relatedPivotKey\r\n     * @param  string  $parentKey\r\n     * @param  string  $relatedKey\r\n     * @param  string|null  $relationName\r\n     * @param  bool  $inverse\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphToMany\r\n     */\r\n    protected function newMorphToMany(Builder $query, Model $parent, $name, $table, $foreignPivotKey,\r\n                                      $relatedPivotKey, $parentKey, $relatedKey,\r\n                                      $relationName = null, $inverse = false)\r\n    {\r\n        return new MorphToMany($query, $parent, $name, $table, $foreignPivotKey, $relatedPivotKey, $parentKey, $relatedKey,\r\n            $relationName, $inverse);\r\n    }\r\n\r\n    /**\r\n     * Define a polymorphic, inverse many-to-many relationship.\r\n     *\r\n     * @param  string  $related\r\n     * @param  string  $name\r\n     * @param  string|null  $table\r\n     * @param  string|null  $foreignPivotKey\r\n     * @param  string|null  $relatedPivotKey\r\n     * @param  string|null  $parentKey\r\n     * @param  string|null  $relatedKey\r\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphToMany\r\n     */\r\n    public function morphedByMany($related, $name, $table = null, $foreignPivotKey = null,\r\n                                  $relatedPivotKey = null, $parentKey = null, $relatedKey = null)\r\n    {\r\n        $foreignPivotKey = $foreignPivotKey ?: $this->getForeignKey();\r\n\r\n        // For the inverse of the polymorphic many-to-many relations, we will change\r\n        // the way we determine the foreign and other keys, as it is the opposite\r\n        // of the morph-to-many method since we're figuring out these inverses.\r\n        $relatedPivotKey = $relatedPivotKey ?: $name.'_id';\r\n\r\n        return $this->morphToMany(\r\n            $related, $name, $table, $foreignPivotKey,\r\n            $relatedPivotKey, $parentKey, $relatedKey, true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the relationship name of the belongsToMany relationship.\r\n     *\r\n     * @return string|null\r\n     */\r\n    protected function guessBelongsToManyRelation()\r\n    {\r\n        $caller = Arr::first(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS), function ($trace) {\r\n            return ! in_array(\r\n                $trace['function'],\r\n                array_merge(static::$manyMethods, ['guessBelongsToManyRelation'])\r\n            );\r\n        });\r\n\r\n        return ! is_null($caller) ? $caller['function'] : null;\r\n    }\r\n\r\n    /**\r\n     * Get the joining table name for a many-to-many relation.\r\n     *\r\n     * @param  string  $related\r\n     * @param  \\Illuminate\\Database\\Eloquent\\Model|null  $instance\r\n     * @return string\r\n     */\r\n    public function joiningTable($related, $instance = null)\r\n    {\r\n        // The joining table name, by convention, is simply the snake cased models\r\n        // sorted alphabetically and concatenated with an underscore, so we can\r\n        // just sort the models and join them together to get the table name.\r\n        $segments = [\r\n            $instance ? $instance->joiningTableSegment()\r\n                      : Str::snake(class_basename($related)),\r\n            $this->joiningTableSegment(),\r\n        ];\r\n\r\n        // Now that we have the model names in an array we can just sort them and\r\n        // use the implode function to join them together with an underscores,\r\n        // which is typically used by convention within the database system.\r\n        sort($segments);\r\n\r\n        return strtolower(implode('_', $segments));\r\n    }\r\n\r\n    /**\r\n     * Get this model's half of the intermediate table name for belongsToMany relationships.\r\n     *\r\n     * @return string\r\n     */\r\n    public function joiningTableSegment()\r\n    {\r\n        return Str::snake(class_basename($this));\r\n    }\r\n\r\n    /**\r\n     * Determine if the model touches a given relation.\r\n     *\r\n     * @param  string  $relation\r\n     * @return bool\r\n     */\r\n    public function touches($relation)\r\n    {\r\n        return in_array($relation, $this->getTouchedRelations());\r\n    }\r\n\r\n    /**\r\n     * Touch the owning relations of the model.\r\n     *\r\n     * @return void\r\n     */\r\n    public function touchOwners()\r\n    {\r\n        foreach ($this->getTouchedRelations() as $relation) {\r\n            $this->$relation()->touch();\r\n\r\n            if ($this->$relation instanceof self) {\r\n                $this->$relation->fireModelEvent('saved', false);\r\n\r\n                $this->$relation->touchOwners();\r\n            } elseif ($this->$relation instanceof Collection) {\r\n                $this->$relation->each->touchOwners();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the polymorphic relationship columns.\r\n     *\r\n     * @param  string  $name\r\n     * @param  string  $type\r\n     * @param  string  $id\r\n     * @return array\r\n     */\r\n    protected function getMorphs($name, $type, $id)\r\n    {\r\n        return [$type ?: $name.'_type', $id ?: $name.'_id'];\r\n    }\r\n\r\n    /**\r\n     * Get the class name for polymorphic relations.\r\n     *\r\n     * @return string\r\n     */\r\n    public function getMorphClass()\r\n    {\r\n        $morphMap = Relation::morphMap();\r\n\r\n        if (! empty($morphMap) && in_array(static::class, $morphMap)) {\r\n            return array_search(static::class, $morphMap, true);\r\n        }\r\n\r\n        return static::class;\r\n    }\r\n\r\n    /**\r\n     * Create a new model instance for a related model.\r\n     *\r\n     * @param  string  $class\r\n     * @return mixed\r\n     */\r\n    protected function newRelatedInstance($class)\r\n    {\r\n        return tap(new $class, function ($instance) {\r\n            if (! $instance->getConnectionName()) {\r\n                $instance->setConnection($this->connection);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all the loaded relations for the instance.\r\n     *\r\n     * @return array\r\n     */\r\n    public function getRelations()\r\n    {\r\n        return $this->relations;\r\n    }\r\n\r\n    /**\r\n     * Get a specified relationship.\r\n     *\r\n     * @param  string  $relation\r\n     * @return mixed\r\n     */\r\n    public function getRelation($relation)\r\n    {\r\n        return $this->relations[$relation];\r\n    }\r\n\r\n    /**\r\n     * Determine if the given relation is loaded.\r\n     *\r\n     * @param  string  $key\r\n     * @return bool\r\n     */\r\n    public function relationLoaded($key)\r\n    {\r\n        return array_key_exists($key, $this->relations);\r\n    }\r\n\r\n    /**\r\n     * Set the given relationship on the model.\r\n     *\r\n     * @param  string  $relation\r\n     * @param  mixed  $value\r\n     * @return $this\r\n     */\r\n    public function setRelation($relation, $value)\r\n    {\r\n        $this->relations[$relation] = $value;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Unset a loaded relationship.\r\n     *\r\n     * @param  string  $relation\r\n     * @return $this\r\n     */\r\n    public function unsetRelation($relation)\r\n    {\r\n        unset($this->relations[$relation]);\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the entire relations array on the model.\r\n     *\r\n     * @param  array  $relations\r\n     * @return $this\r\n     */\r\n    public function setRelations(array $relations)\r\n    {\r\n        $this->relations = $relations;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Duplicate the instance and unset all the loaded relations.\r\n     *\r\n     * @return $this\r\n     */\r\n    public function withoutRelations()\r\n    {\r\n        $model = clone $this;\r\n\r\n        return $model->unsetRelations();\r\n    }\r\n\r\n    /**\r\n     * Unset all the loaded relations for the instance.\r\n     *\r\n     * @return $this\r\n     */\r\n    public function unsetRelations()\r\n    {\r\n        $this->relations = [];\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Get the relationships that are touched on save.\r\n     *\r\n     * @return array\r\n     */\r\n    public function getTouchedRelations()\r\n    {\r\n        return $this->touches;\r\n    }\r\n\r\n    /**\r\n     * Set the relationships that are touched on save.\r\n     *\r\n     * @param  array  $touches\r\n     * @return $this\r\n     */\r\n    public function setTouchedRelations(array $touches)\r\n    {\r\n        $this->touches = $touches;\r\n\r\n        return $this;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasRelationships.php b/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasRelationships.php
--- a/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasRelationships.php	
+++ b/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Concerns/HasRelationships.php	
@@ -256,7 +256,7 @@
         // If the type value is null it is probably safe to assume we're eager loading
         // the relationship. In this case we'll just pass in a dummy query where we
         // need to remove any eager loads that may already be defined on a model.
-        return empty($class = $this->{$type})
+        return is_null($class = $this->{$type}) || $class === ''
                     ? $this->morphEagerTo($name, $type, $id, $ownerKey)
                     : $this->morphInstanceTo($class, $name, $type, $id, $ownerKey);
     }
Index: vendor/nikic/php-parser/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>PHP Parser\r\n==========\r\n\r\n[![Build Status](https://travis-ci.org/nikic/PHP-Parser.svg?branch=master)](https://travis-ci.org/nikic/PHP-Parser) [![Coverage Status](https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master)](https://coveralls.io/github/nikic/PHP-Parser?branch=master)\r\n\r\nThis is a PHP 5.2 to PHP 8.0 parser written in PHP. Its purpose is to simplify static code analysis and\r\nmanipulation.\r\n\r\n[**Documentation for version 4.x**][doc_master] (stable; for running on PHP >= 7.0; for parsing PHP 5.2 to PHP 8.0).\r\n\r\n[Documentation for version 3.x][doc_3_x] (unsupported; for running on PHP >= 5.5; for parsing PHP 5.2 to PHP 7.2).\r\n\r\nFeatures\r\n--------\r\n\r\nThe main features provided by this library are:\r\n\r\n * Parsing PHP 5, PHP 7, and PHP 8 code into an abstract syntax tree (AST).\r\n   * Invalid code can be parsed into a partial AST.\r\n   * The AST contains accurate location information.\r\n * Dumping the AST in human-readable form.\r\n * Converting an AST back to PHP code.\r\n   * Experimental: Formatting can be preserved for partially changed ASTs.\r\n * Infrastructure to traverse and modify ASTs.\r\n * Resolution of namespaced names.\r\n * Evaluation of constant expressions.\r\n * Builders to simplify AST construction for code generation.\r\n * Converting an AST into JSON and back.\r\n\r\nQuick Start\r\n-----------\r\n\r\nInstall the library using [composer](https://getcomposer.org):\r\n\r\n    php composer.phar require nikic/php-parser\r\n\r\nParse some PHP code into an AST and dump the result in human-readable form:\r\n\r\n```php\r\n<?php\r\nuse PhpParser\\Error;\r\nuse PhpParser\\NodeDumper;\r\nuse PhpParser\\ParserFactory;\r\n\r\n$code = <<<'CODE'\r\n<?php\r\n\r\nfunction test($foo)\r\n{\r\n    var_dump($foo);\r\n}\r\nCODE;\r\n\r\n$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);\r\ntry {\r\n    $ast = $parser->parse($code);\r\n} catch (Error $error) {\r\n    echo \"Parse error: {$error->getMessage()}\\n\";\r\n    return;\r\n}\r\n\r\n$dumper = new NodeDumper;\r\necho $dumper->dump($ast) . \"\\n\";\r\n```\r\n\r\nThis dumps an AST looking something like this:\r\n\r\n```\r\narray(\r\n    0: Stmt_Function(\r\n        byRef: false\r\n        name: Identifier(\r\n            name: test\r\n        )\r\n        params: array(\r\n            0: Param(\r\n                type: null\r\n                byRef: false\r\n                variadic: false\r\n                var: Expr_Variable(\r\n                    name: foo\r\n                )\r\n                default: null\r\n            )\r\n        )\r\n        returnType: null\r\n        stmts: array(\r\n            0: Stmt_Expression(\r\n                expr: Expr_FuncCall(\r\n                    name: Name(\r\n                        parts: array(\r\n                            0: var_dump\r\n                        )\r\n                    )\r\n                    args: array(\r\n                        0: Arg(\r\n                            value: Expr_Variable(\r\n                                name: foo\r\n                            )\r\n                            byRef: false\r\n                            unpack: false\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )\r\n)\r\n```\r\n\r\nLet's traverse the AST and perform some kind of modification. For example, drop all function bodies:\r\n\r\n```php\r\nuse PhpParser\\Node;\r\nuse PhpParser\\Node\\Stmt\\Function_;\r\nuse PhpParser\\NodeTraverser;\r\nuse PhpParser\\NodeVisitorAbstract;\r\n\r\n$traverser = new NodeTraverser();\r\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\r\n    public function enterNode(Node $node) {\r\n        if ($node instanceof Function_) {\r\n            // Clean out the function body\r\n            $node->stmts = [];\r\n        }\r\n    }\r\n});\r\n\r\n$ast = $traverser->traverse($ast);\r\necho $dumper->dump($ast) . \"\\n\";\r\n```\r\n\r\nThis gives us an AST where the `Function_::$stmts` are empty:\r\n\r\n```\r\narray(\r\n    0: Stmt_Function(\r\n        byRef: false\r\n        name: Identifier(\r\n            name: test\r\n        )\r\n        params: array(\r\n            0: Param(\r\n                type: null\r\n                byRef: false\r\n                variadic: false\r\n                var: Expr_Variable(\r\n                    name: foo\r\n                )\r\n                default: null\r\n            )\r\n        )\r\n        returnType: null\r\n        stmts: array(\r\n        )\r\n    )\r\n)\r\n```\r\n\r\nFinally, we can convert the new AST back to PHP code:\r\n\r\n```php\r\nuse PhpParser\\PrettyPrinter;\r\n\r\n$prettyPrinter = new PrettyPrinter\\Standard;\r\necho $prettyPrinter->prettyPrintFile($ast);\r\n```\r\n\r\nThis gives us our original code, minus the `var_dump()` call inside the function:\r\n\r\n```php\r\n<?php\r\n\r\nfunction test($foo)\r\n{\r\n}\r\n```\r\n\r\nFor a more comprehensive introduction, see the documentation.\r\n\r\nDocumentation\r\n-------------\r\n\r\n 1. [Introduction](doc/0_Introduction.markdown)\r\n 2. [Usage of basic components](doc/2_Usage_of_basic_components.markdown)\r\n\r\nComponent documentation:\r\n\r\n * [Walking the AST](doc/component/Walking_the_AST.markdown)\r\n   * Node visitors\r\n   * Modifying the AST from a visitor\r\n   * Short-circuiting traversals\r\n   * Interleaved visitors\r\n   * Simple node finding API\r\n   * Parent and sibling references\r\n * [Name resolution](doc/component/Name_resolution.markdown)\r\n   * Name resolver options\r\n   * Name resolution context\r\n * [Pretty printing](doc/component/Pretty_printing.markdown)\r\n   * Converting AST back to PHP code\r\n   * Customizing formatting\r\n   * Formatting-preserving code transformations\r\n * [AST builders](doc/component/AST_builders.markdown)\r\n   * Fluent builders for AST nodes\r\n * [Lexer](doc/component/Lexer.markdown)\r\n   * Lexer options\r\n   * Token and file positions for nodes\r\n   * Custom attributes\r\n * [Error handling](doc/component/Error_handling.markdown)\r\n   * Column information for errors\r\n   * Error recovery (parsing of syntactically incorrect code)\r\n * [Constant expression evaluation](doc/component/Constant_expression_evaluation.markdown)\r\n   * Evaluating constant/property/etc initializers\r\n   * Handling errors and unsupported expressions\r\n * [JSON representation](doc/component/JSON_representation.markdown)\r\n   * JSON encoding and decoding of ASTs\r\n * [Performance](doc/component/Performance.markdown)\r\n   * Disabling XDebug\r\n   * Reusing objects\r\n   * Garbage collection impact\r\n * [Frequently asked questions](doc/component/FAQ.markdown)\r\n   * Parent and sibling references\r\n\r\n [doc_3_x]: https://github.com/nikic/PHP-Parser/tree/3.x/doc\r\n [doc_master]: https://github.com/nikic/PHP-Parser/tree/master/doc\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/nikic/php-parser/README.md b/vendor/nikic/php-parser/README.md
--- a/vendor/nikic/php-parser/README.md	
+++ b/vendor/nikic/php-parser/README.md	
@@ -1,7 +1,7 @@
 PHP Parser
 ==========
 
-[![Build Status](https://travis-ci.org/nikic/PHP-Parser.svg?branch=master)](https://travis-ci.org/nikic/PHP-Parser) [![Coverage Status](https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master)](https://coveralls.io/github/nikic/PHP-Parser?branch=master)
+[![Coverage Status](https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master)](https://coveralls.io/github/nikic/PHP-Parser?branch=master)
 
 This is a PHP 5.2 to PHP 8.0 parser written in PHP. Its purpose is to simplify static code analysis and
 manipulation.
Index: vendor/scrivo/highlight.php/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n    \"name\": \"scrivo/highlight.php\",\r\n    \"description\": \"Server side syntax highlighter that supports 185 languages. It's a PHP port of highlight.js\",\r\n    \"keywords\": [\r\n        \"code\",\r\n        \"syntax\",\r\n        \"highlight\",\r\n        \"highlight.js\",\r\n        \"highlight.php\"\r\n    ],\r\n    \"type\": \"library\",\r\n    \"license\": \"BSD-3-Clause\",\r\n    \"scripts\": {\r\n        \"test:detection\": \"phpunit test/DetectionTest.php\",\r\n        \"test:markup\": \"phpunit test/MarkupTest.php\",\r\n        \"test\": \"phpunit -v\"\r\n    },\r\n    \"support\": {\r\n        \"issues\": \"https://github.com/scrivo/highlight.php/issues\",\r\n        \"source\": \"https://github.com/scrivo/highlight.php\"\r\n    },\r\n    \"autoload\": {\r\n        \"psr-0\": {\r\n            \"Highlight\\\\\": \"\",\r\n            \"HighlightUtilities\\\\\": \"\"\r\n        },\r\n        \"files\": [\r\n            \"HighlightUtilities/functions.php\"\r\n        ]\r\n    },\r\n    \"authors\": [\r\n        {\r\n            \"name\": \"Geert Bergman\",\r\n            \"homepage\": \"http://www.scrivo.org/\",\r\n            \"role\": \"Project Author\"\r\n        },\r\n        {\r\n            \"name\": \"Vladimir Jimenez\",\r\n            \"homepage\": \"https://allejo.io\",\r\n            \"role\": \"Maintainer\"\r\n        },\r\n        {\r\n            \"name\": \"Martin Folkers\",\r\n            \"homepage\": \"https://twobrain.io\",\r\n            \"role\": \"Contributor\"\r\n        }\r\n    ],\r\n    \"require\": {\r\n        \"php\": \">=5.4\",\r\n        \"ext-json\": \"*\",\r\n        \"ext-mbstring\": \"*\"\r\n    },\r\n    \"require-dev\": {\r\n        \"phpunit/phpunit\": \"^4.8|^5.7\",\r\n        \"sabberworm/php-css-parser\": \"^8.3\",\r\n        \"symfony/finder\": \"^2.8|^3.4\",\r\n        \"symfony/var-dumper\": \"^2.8|^3.4\"\r\n    },\r\n    \"suggest\": {\r\n        \"ext-dom\": \"Needed to make use of the features in the utilities namespace\"\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/scrivo/highlight.php/composer.json b/vendor/scrivo/highlight.php/composer.json
--- a/vendor/scrivo/highlight.php/composer.json	
+++ b/vendor/scrivo/highlight.php/composer.json	
@@ -55,8 +55,5 @@
         "sabberworm/php-css-parser": "^8.3",
         "symfony/finder": "^2.8|^3.4",
         "symfony/var-dumper": "^2.8|^3.4"
-    },
-    "suggest": {
-        "ext-dom": "Needed to make use of the features in the utilities namespace"
     }
 }
Index: vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php declare(strict_types=1);\r\n\r\nnamespace PhpParser;\r\n\r\n/*\r\n * This parser is based on a skeleton written by Moriyoshi Koizumi, which in\r\n * turn is based on work by Masato Bito.\r\n */\r\nuse PhpParser\\Node\\Expr;\r\nuse PhpParser\\Node\\Expr\\Cast\\Double;\r\nuse PhpParser\\Node\\Name;\r\nuse PhpParser\\Node\\Param;\r\nuse PhpParser\\Node\\Scalar\\Encapsed;\r\nuse PhpParser\\Node\\Scalar\\LNumber;\r\nuse PhpParser\\Node\\Scalar\\String_;\r\nuse PhpParser\\Node\\Stmt\\Class_;\r\nuse PhpParser\\Node\\Stmt\\ClassConst;\r\nuse PhpParser\\Node\\Stmt\\ClassMethod;\r\nuse PhpParser\\Node\\Stmt\\Interface_;\r\nuse PhpParser\\Node\\Stmt\\Namespace_;\r\nuse PhpParser\\Node\\Stmt\\Property;\r\nuse PhpParser\\Node\\Stmt\\TryCatch;\r\nuse PhpParser\\Node\\Stmt\\UseUse;\r\nuse PhpParser\\Node\\VarLikeIdentifier;\r\n\r\nabstract class ParserAbstract implements Parser\r\n{\r\n    const SYMBOL_NONE = -1;\r\n\r\n    /*\r\n     * The following members will be filled with generated parsing data:\r\n     */\r\n\r\n    /** @var int Size of $tokenToSymbol map */\r\n    protected $tokenToSymbolMapSize;\r\n    /** @var int Size of $action table */\r\n    protected $actionTableSize;\r\n    /** @var int Size of $goto table */\r\n    protected $gotoTableSize;\r\n\r\n    /** @var int Symbol number signifying an invalid token */\r\n    protected $invalidSymbol;\r\n    /** @var int Symbol number of error recovery token */\r\n    protected $errorSymbol;\r\n    /** @var int Action number signifying default action */\r\n    protected $defaultAction;\r\n    /** @var int Rule number signifying that an unexpected token was encountered */\r\n    protected $unexpectedTokenRule;\r\n\r\n    protected $YY2TBLSTATE;\r\n    /** @var int Number of non-leaf states */\r\n    protected $numNonLeafStates;\r\n\r\n    /** @var int[] Map of lexer tokens to internal symbols */\r\n    protected $tokenToSymbol;\r\n    /** @var string[] Map of symbols to their names */\r\n    protected $symbolToName;\r\n    /** @var array Names of the production rules (only necessary for debugging) */\r\n    protected $productions;\r\n\r\n    /** @var int[] Map of states to a displacement into the $action table. The corresponding action for this\r\n     *             state/symbol pair is $action[$actionBase[$state] + $symbol]. If $actionBase[$state] is 0, the\r\n                   action is defaulted, i.e. $actionDefault[$state] should be used instead. */\r\n    protected $actionBase;\r\n    /** @var int[] Table of actions. Indexed according to $actionBase comment. */\r\n    protected $action;\r\n    /** @var int[] Table indexed analogously to $action. If $actionCheck[$actionBase[$state] + $symbol] != $symbol\r\n     *             then the action is defaulted, i.e. $actionDefault[$state] should be used instead. */\r\n    protected $actionCheck;\r\n    /** @var int[] Map of states to their default action */\r\n    protected $actionDefault;\r\n    /** @var callable[] Semantic action callbacks */\r\n    protected $reduceCallbacks;\r\n\r\n    /** @var int[] Map of non-terminals to a displacement into the $goto table. The corresponding goto state for this\r\n     *             non-terminal/state pair is $goto[$gotoBase[$nonTerminal] + $state] (unless defaulted) */\r\n    protected $gotoBase;\r\n    /** @var int[] Table of states to goto after reduction. Indexed according to $gotoBase comment. */\r\n    protected $goto;\r\n    /** @var int[] Table indexed analogously to $goto. If $gotoCheck[$gotoBase[$nonTerminal] + $state] != $nonTerminal\r\n     *             then the goto state is defaulted, i.e. $gotoDefault[$nonTerminal] should be used. */\r\n    protected $gotoCheck;\r\n    /** @var int[] Map of non-terminals to the default state to goto after their reduction */\r\n    protected $gotoDefault;\r\n\r\n    /** @var int[] Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for\r\n     *             determining the state to goto after reduction. */\r\n    protected $ruleToNonTerminal;\r\n    /** @var int[] Map of rules to the length of their right-hand side, which is the number of elements that have to\r\n     *             be popped from the stack(s) on reduction. */\r\n    protected $ruleToLength;\r\n\r\n    /*\r\n     * The following members are part of the parser state:\r\n     */\r\n\r\n    /** @var Lexer Lexer that is used when parsing */\r\n    protected $lexer;\r\n    /** @var mixed Temporary value containing the result of last semantic action (reduction) */\r\n    protected $semValue;\r\n    /** @var array Semantic value stack (contains values of tokens and semantic action results) */\r\n    protected $semStack;\r\n    /** @var array[] Start attribute stack */\r\n    protected $startAttributeStack;\r\n    /** @var array[] End attribute stack */\r\n    protected $endAttributeStack;\r\n    /** @var array End attributes of last *shifted* token */\r\n    protected $endAttributes;\r\n    /** @var array Start attributes of last *read* token */\r\n    protected $lookaheadStartAttributes;\r\n\r\n    /** @var ErrorHandler Error handler */\r\n    protected $errorHandler;\r\n    /** @var int Error state, used to avoid error floods */\r\n    protected $errorState;\r\n\r\n    /**\r\n     * Initialize $reduceCallbacks map.\r\n     */\r\n    abstract protected function initReduceCallbacks();\r\n\r\n    /**\r\n     * Creates a parser instance.\r\n     *\r\n     * Options: Currently none.\r\n     *\r\n     * @param Lexer $lexer A lexer\r\n     * @param array $options Options array.\r\n     */\r\n    public function __construct(Lexer $lexer, array $options = []) {\r\n        $this->lexer = $lexer;\r\n\r\n        if (isset($options['throwOnError'])) {\r\n            throw new \\LogicException(\r\n                '\"throwOnError\" is no longer supported, use \"errorHandler\" instead');\r\n        }\r\n\r\n        $this->initReduceCallbacks();\r\n    }\r\n\r\n    /**\r\n     * Parses PHP code into a node tree.\r\n     *\r\n     * If a non-throwing error handler is used, the parser will continue parsing after an error\r\n     * occurred and attempt to build a partial AST.\r\n     *\r\n     * @param string $code The source code to parse\r\n     * @param ErrorHandler|null $errorHandler Error handler to use for lexer/parser errors, defaults\r\n     *                                        to ErrorHandler\\Throwing.\r\n     *\r\n     * @return Node\\Stmt[]|null Array of statements (or null non-throwing error handler is used and\r\n     *                          the parser was unable to recover from an error).\r\n     */\r\n    public function parse(string $code, ErrorHandler $errorHandler = null) {\r\n        $this->errorHandler = $errorHandler ?: new ErrorHandler\\Throwing;\r\n\r\n        $this->lexer->startLexing($code, $this->errorHandler);\r\n        $result = $this->doParse();\r\n\r\n        // Clear out some of the interior state, so we don't hold onto unnecessary\r\n        // memory between uses of the parser\r\n        $this->startAttributeStack = [];\r\n        $this->endAttributeStack = [];\r\n        $this->semStack = [];\r\n        $this->semValue = null;\r\n\r\n        return $result;\r\n    }\r\n\r\n    protected function doParse() {\r\n        // We start off with no lookahead-token\r\n        $symbol = self::SYMBOL_NONE;\r\n\r\n        // The attributes for a node are taken from the first and last token of the node.\r\n        // From the first token only the startAttributes are taken and from the last only\r\n        // the endAttributes. Both are merged using the array union operator (+).\r\n        $startAttributes = [];\r\n        $endAttributes = [];\r\n        $this->endAttributes = $endAttributes;\r\n\r\n        // Keep stack of start and end attributes\r\n        $this->startAttributeStack = [];\r\n        $this->endAttributeStack = [$endAttributes];\r\n\r\n        // Start off in the initial state and keep a stack of previous states\r\n        $state = 0;\r\n        $stateStack = [$state];\r\n\r\n        // Semantic value stack (contains values of tokens and semantic action results)\r\n        $this->semStack = [];\r\n\r\n        // Current position in the stack(s)\r\n        $stackPos = 0;\r\n\r\n        $this->errorState = 0;\r\n\r\n        for (;;) {\r\n            //$this->traceNewState($state, $symbol);\r\n\r\n            if ($this->actionBase[$state] === 0) {\r\n                $rule = $this->actionDefault[$state];\r\n            } else {\r\n                if ($symbol === self::SYMBOL_NONE) {\r\n                    // Fetch the next token id from the lexer and fetch additional info by-ref.\r\n                    // The end attributes are fetched into a temporary variable and only set once the token is really\r\n                    // shifted (not during read). Otherwise you would sometimes get off-by-one errors, when a rule is\r\n                    // reduced after a token was read but not yet shifted.\r\n                    $tokenId = $this->lexer->getNextToken($tokenValue, $startAttributes, $endAttributes);\r\n\r\n                    // map the lexer token id to the internally used symbols\r\n                    $symbol = $tokenId >= 0 && $tokenId < $this->tokenToSymbolMapSize\r\n                        ? $this->tokenToSymbol[$tokenId]\r\n                        : $this->invalidSymbol;\r\n\r\n                    if ($symbol === $this->invalidSymbol) {\r\n                        throw new \\RangeException(sprintf(\r\n                            'The lexer returned an invalid token (id=%d, value=%s)',\r\n                            $tokenId, $tokenValue\r\n                        ));\r\n                    }\r\n\r\n                    // This is necessary to assign some meaningful attributes to /* empty */ productions. They'll get\r\n                    // the attributes of the next token, even though they don't contain it themselves.\r\n                    $this->startAttributeStack[$stackPos+1] = $startAttributes;\r\n                    $this->endAttributeStack[$stackPos+1] = $endAttributes;\r\n                    $this->lookaheadStartAttributes = $startAttributes;\r\n\r\n                    //$this->traceRead($symbol);\r\n                }\r\n\r\n                $idx = $this->actionBase[$state] + $symbol;\r\n                if ((($idx >= 0 && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $symbol)\r\n                     || ($state < $this->YY2TBLSTATE\r\n                         && ($idx = $this->actionBase[$state + $this->numNonLeafStates] + $symbol) >= 0\r\n                         && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $symbol))\r\n                    && ($action = $this->action[$idx]) !== $this->defaultAction) {\r\n                    /*\r\n                     * >= numNonLeafStates: shift and reduce\r\n                     * > 0: shift\r\n                     * = 0: accept\r\n                     * < 0: reduce\r\n                     * = -YYUNEXPECTED: error\r\n                     */\r\n                    if ($action > 0) {\r\n                        /* shift */\r\n                        //$this->traceShift($symbol);\r\n\r\n                        ++$stackPos;\r\n                        $stateStack[$stackPos] = $state = $action;\r\n                        $this->semStack[$stackPos] = $tokenValue;\r\n                        $this->startAttributeStack[$stackPos] = $startAttributes;\r\n                        $this->endAttributeStack[$stackPos] = $endAttributes;\r\n                        $this->endAttributes = $endAttributes;\r\n                        $symbol = self::SYMBOL_NONE;\r\n\r\n                        if ($this->errorState) {\r\n                            --$this->errorState;\r\n                        }\r\n\r\n                        if ($action < $this->numNonLeafStates) {\r\n                            continue;\r\n                        }\r\n\r\n                        /* $yyn >= numNonLeafStates means shift-and-reduce */\r\n                        $rule = $action - $this->numNonLeafStates;\r\n                    } else {\r\n                        $rule = -$action;\r\n                    }\r\n                } else {\r\n                    $rule = $this->actionDefault[$state];\r\n                }\r\n            }\r\n\r\n            for (;;) {\r\n                if ($rule === 0) {\r\n                    /* accept */\r\n                    //$this->traceAccept();\r\n                    return $this->semValue;\r\n                } elseif ($rule !== $this->unexpectedTokenRule) {\r\n                    /* reduce */\r\n                    //$this->traceReduce($rule);\r\n\r\n                    try {\r\n                        $this->reduceCallbacks[$rule]($stackPos);\r\n                    } catch (Error $e) {\r\n                        if (-1 === $e->getStartLine() && isset($startAttributes['startLine'])) {\r\n                            $e->setStartLine($startAttributes['startLine']);\r\n                        }\r\n\r\n                        $this->emitError($e);\r\n                        // Can't recover from this type of error\r\n                        return null;\r\n                    }\r\n\r\n                    /* Goto - shift nonterminal */\r\n                    $lastEndAttributes = $this->endAttributeStack[$stackPos];\r\n                    $stackPos -= $this->ruleToLength[$rule];\r\n                    $nonTerminal = $this->ruleToNonTerminal[$rule];\r\n                    $idx = $this->gotoBase[$nonTerminal] + $stateStack[$stackPos];\r\n                    if ($idx >= 0 && $idx < $this->gotoTableSize && $this->gotoCheck[$idx] === $nonTerminal) {\r\n                        $state = $this->goto[$idx];\r\n                    } else {\r\n                        $state = $this->gotoDefault[$nonTerminal];\r\n                    }\r\n\r\n                    ++$stackPos;\r\n                    $stateStack[$stackPos]     = $state;\r\n                    $this->semStack[$stackPos] = $this->semValue;\r\n                    $this->endAttributeStack[$stackPos] = $lastEndAttributes;\r\n                } else {\r\n                    /* error */\r\n                    switch ($this->errorState) {\r\n                        case 0:\r\n                            $msg = $this->getErrorMessage($symbol, $state);\r\n                            $this->emitError(new Error($msg, $startAttributes + $endAttributes));\r\n                            // Break missing intentionally\r\n                        case 1:\r\n                        case 2:\r\n                            $this->errorState = 3;\r\n\r\n                            // Pop until error-expecting state uncovered\r\n                            while (!(\r\n                                (($idx = $this->actionBase[$state] + $this->errorSymbol) >= 0\r\n                                    && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $this->errorSymbol)\r\n                                || ($state < $this->YY2TBLSTATE\r\n                                    && ($idx = $this->actionBase[$state + $this->numNonLeafStates] + $this->errorSymbol) >= 0\r\n                                    && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $this->errorSymbol)\r\n                            ) || ($action = $this->action[$idx]) === $this->defaultAction) { // Not totally sure about this\r\n                                if ($stackPos <= 0) {\r\n                                    // Could not recover from error\r\n                                    return null;\r\n                                }\r\n                                $state = $stateStack[--$stackPos];\r\n                                //$this->tracePop($state);\r\n                            }\r\n\r\n                            //$this->traceShift($this->errorSymbol);\r\n                            ++$stackPos;\r\n                            $stateStack[$stackPos] = $state = $action;\r\n\r\n                            // We treat the error symbol as being empty, so we reset the end attributes\r\n                            // to the end attributes of the last non-error symbol\r\n                            $this->endAttributeStack[$stackPos] = $this->endAttributeStack[$stackPos - 1];\r\n                            $this->endAttributes = $this->endAttributeStack[$stackPos - 1];\r\n                            break;\r\n\r\n                        case 3:\r\n                            if ($symbol === 0) {\r\n                                // Reached EOF without recovering from error\r\n                                return null;\r\n                            }\r\n\r\n                            //$this->traceDiscard($symbol);\r\n                            $symbol = self::SYMBOL_NONE;\r\n                            break 2;\r\n                    }\r\n                }\r\n\r\n                if ($state < $this->numNonLeafStates) {\r\n                    break;\r\n                }\r\n\r\n                /* >= numNonLeafStates means shift-and-reduce */\r\n                $rule = $state - $this->numNonLeafStates;\r\n            }\r\n        }\r\n\r\n        throw new \\RuntimeException('Reached end of parser loop');\r\n    }\r\n\r\n    protected function emitError(Error $error) {\r\n        $this->errorHandler->handleError($error);\r\n    }\r\n\r\n    /**\r\n     * Format error message including expected tokens.\r\n     *\r\n     * @param int $symbol Unexpected symbol\r\n     * @param int $state  State at time of error\r\n     *\r\n     * @return string Formatted error message\r\n     */\r\n    protected function getErrorMessage(int $symbol, int $state) : string {\r\n        $expectedString = '';\r\n        if ($expected = $this->getExpectedTokens($state)) {\r\n            $expectedString = ', expecting ' . implode(' or ', $expected);\r\n        }\r\n\r\n        return 'Syntax error, unexpected ' . $this->symbolToName[$symbol] . $expectedString;\r\n    }\r\n\r\n    /**\r\n     * Get limited number of expected tokens in given state.\r\n     *\r\n     * @param int $state State\r\n     *\r\n     * @return string[] Expected tokens. If too many, an empty array is returned.\r\n     */\r\n    protected function getExpectedTokens(int $state) : array {\r\n        $expected = [];\r\n\r\n        $base = $this->actionBase[$state];\r\n        foreach ($this->symbolToName as $symbol => $name) {\r\n            $idx = $base + $symbol;\r\n            if ($idx >= 0 && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $symbol\r\n                || $state < $this->YY2TBLSTATE\r\n                && ($idx = $this->actionBase[$state + $this->numNonLeafStates] + $symbol) >= 0\r\n                && $idx < $this->actionTableSize && $this->actionCheck[$idx] === $symbol\r\n            ) {\r\n                if ($this->action[$idx] !== $this->unexpectedTokenRule\r\n                    && $this->action[$idx] !== $this->defaultAction\r\n                    && $symbol !== $this->errorSymbol\r\n                ) {\r\n                    if (count($expected) === 4) {\r\n                        /* Too many expected tokens */\r\n                        return [];\r\n                    }\r\n\r\n                    $expected[] = $name;\r\n                }\r\n            }\r\n        }\r\n\r\n        return $expected;\r\n    }\r\n\r\n    /*\r\n     * Tracing functions used for debugging the parser.\r\n     */\r\n\r\n    /*\r\n    protected function traceNewState($state, $symbol) {\r\n        echo '% State ' . $state\r\n            . ', Lookahead ' . ($symbol == self::SYMBOL_NONE ? '--none--' : $this->symbolToName[$symbol]) . \"\\n\";\r\n    }\r\n\r\n    protected function traceRead($symbol) {\r\n        echo '% Reading ' . $this->symbolToName[$symbol] . \"\\n\";\r\n    }\r\n\r\n    protected function traceShift($symbol) {\r\n        echo '% Shift ' . $this->symbolToName[$symbol] . \"\\n\";\r\n    }\r\n\r\n    protected function traceAccept() {\r\n        echo \"% Accepted.\\n\";\r\n    }\r\n\r\n    protected function traceReduce($n) {\r\n        echo '% Reduce by (' . $n . ') ' . $this->productions[$n] . \"\\n\";\r\n    }\r\n\r\n    protected function tracePop($state) {\r\n        echo '% Recovering, uncovered state ' . $state . \"\\n\";\r\n    }\r\n\r\n    protected function traceDiscard($symbol) {\r\n        echo '% Discard ' . $this->symbolToName[$symbol] . \"\\n\";\r\n    }\r\n    */\r\n\r\n    /*\r\n     * Helper functions invoked by semantic actions\r\n     */\r\n\r\n    /**\r\n     * Moves statements of semicolon-style namespaces into $ns->stmts and checks various error conditions.\r\n     *\r\n     * @param Node\\Stmt[] $stmts\r\n     * @return Node\\Stmt[]\r\n     */\r\n    protected function handleNamespaces(array $stmts) : array {\r\n        $hasErrored = false;\r\n        $style = $this->getNamespacingStyle($stmts);\r\n        if (null === $style) {\r\n            // not namespaced, nothing to do\r\n            return $stmts;\r\n        } elseif ('brace' === $style) {\r\n            // For braced namespaces we only have to check that there are no invalid statements between the namespaces\r\n            $afterFirstNamespace = false;\r\n            foreach ($stmts as $stmt) {\r\n                if ($stmt instanceof Node\\Stmt\\Namespace_) {\r\n                    $afterFirstNamespace = true;\r\n                } elseif (!$stmt instanceof Node\\Stmt\\HaltCompiler\r\n                        && !$stmt instanceof Node\\Stmt\\Nop\r\n                        && $afterFirstNamespace && !$hasErrored) {\r\n                    $this->emitError(new Error(\r\n                        'No code may exist outside of namespace {}', $stmt->getAttributes()));\r\n                    $hasErrored = true; // Avoid one error for every statement\r\n                }\r\n            }\r\n            return $stmts;\r\n        } else {\r\n            // For semicolon namespaces we have to move the statements after a namespace declaration into ->stmts\r\n            $resultStmts = [];\r\n            $targetStmts =& $resultStmts;\r\n            $lastNs = null;\r\n            foreach ($stmts as $stmt) {\r\n                if ($stmt instanceof Node\\Stmt\\Namespace_) {\r\n                    if ($lastNs !== null) {\r\n                        $this->fixupNamespaceAttributes($lastNs);\r\n                    }\r\n                    if ($stmt->stmts === null) {\r\n                        $stmt->stmts = [];\r\n                        $targetStmts =& $stmt->stmts;\r\n                        $resultStmts[] = $stmt;\r\n                    } else {\r\n                        // This handles the invalid case of mixed style namespaces\r\n                        $resultStmts[] = $stmt;\r\n                        $targetStmts =& $resultStmts;\r\n                    }\r\n                    $lastNs = $stmt;\r\n                } elseif ($stmt instanceof Node\\Stmt\\HaltCompiler) {\r\n                    // __halt_compiler() is not moved into the namespace\r\n                    $resultStmts[] = $stmt;\r\n                } else {\r\n                    $targetStmts[] = $stmt;\r\n                }\r\n            }\r\n            if ($lastNs !== null) {\r\n                $this->fixupNamespaceAttributes($lastNs);\r\n            }\r\n            return $resultStmts;\r\n        }\r\n    }\r\n\r\n    private function fixupNamespaceAttributes(Node\\Stmt\\Namespace_ $stmt) {\r\n        // We moved the statements into the namespace node, as such the end of the namespace node\r\n        // needs to be extended to the end of the statements.\r\n        if (empty($stmt->stmts)) {\r\n            return;\r\n        }\r\n\r\n        // We only move the builtin end attributes here. This is the best we can do with the\r\n        // knowledge we have.\r\n        $endAttributes = ['endLine', 'endFilePos', 'endTokenPos'];\r\n        $lastStmt = $stmt->stmts[count($stmt->stmts) - 1];\r\n        foreach ($endAttributes as $endAttribute) {\r\n            if ($lastStmt->hasAttribute($endAttribute)) {\r\n                $stmt->setAttribute($endAttribute, $lastStmt->getAttribute($endAttribute));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine namespacing style (semicolon or brace)\r\n     *\r\n     * @param Node[] $stmts Top-level statements.\r\n     *\r\n     * @return null|string One of \"semicolon\", \"brace\" or null (no namespaces)\r\n     */\r\n    private function getNamespacingStyle(array $stmts) {\r\n        $style = null;\r\n        $hasNotAllowedStmts = false;\r\n        foreach ($stmts as $i => $stmt) {\r\n            if ($stmt instanceof Node\\Stmt\\Namespace_) {\r\n                $currentStyle = null === $stmt->stmts ? 'semicolon' : 'brace';\r\n                if (null === $style) {\r\n                    $style = $currentStyle;\r\n                    if ($hasNotAllowedStmts) {\r\n                        $this->emitError(new Error(\r\n                            'Namespace declaration statement has to be the very first statement in the script',\r\n                            $stmt->getLine() // Avoid marking the entire namespace as an error\r\n                        ));\r\n                    }\r\n                } elseif ($style !== $currentStyle) {\r\n                    $this->emitError(new Error(\r\n                        'Cannot mix bracketed namespace declarations with unbracketed namespace declarations',\r\n                        $stmt->getLine() // Avoid marking the entire namespace as an error\r\n                    ));\r\n                    // Treat like semicolon style for namespace normalization\r\n                    return 'semicolon';\r\n                }\r\n                continue;\r\n            }\r\n\r\n            /* declare(), __halt_compiler() and nops can be used before a namespace declaration */\r\n            if ($stmt instanceof Node\\Stmt\\Declare_\r\n                || $stmt instanceof Node\\Stmt\\HaltCompiler\r\n                || $stmt instanceof Node\\Stmt\\Nop) {\r\n                continue;\r\n            }\r\n\r\n            /* There may be a hashbang line at the very start of the file */\r\n            if ($i === 0 && $stmt instanceof Node\\Stmt\\InlineHTML && preg_match('/\\A#!.*\\r?\\n\\z/', $stmt->value)) {\r\n                continue;\r\n            }\r\n\r\n            /* Everything else if forbidden before namespace declarations */\r\n            $hasNotAllowedStmts = true;\r\n        }\r\n        return $style;\r\n    }\r\n\r\n    /**\r\n     * Fix up parsing of static property calls in PHP 5.\r\n     *\r\n     * In PHP 5 A::$b[c][d] and A::$b[c][d]() have very different interpretation. The former is\r\n     * interpreted as (A::$b)[c][d], while the latter is the same as A::{$b[c][d]}(). We parse the\r\n     * latter as the former initially and this method fixes the AST into the correct form when we\r\n     * encounter the \"()\".\r\n     *\r\n     * @param  Node\\Expr\\StaticPropertyFetch|Node\\Expr\\ArrayDimFetch $prop\r\n     * @param  Node\\Arg[] $args\r\n     * @param  array      $attributes\r\n     *\r\n     * @return Expr\\StaticCall\r\n     */\r\n    protected function fixupPhp5StaticPropCall($prop, array $args, array $attributes) : Expr\\StaticCall {\r\n        if ($prop instanceof Node\\Expr\\StaticPropertyFetch) {\r\n            $name = $prop->name instanceof VarLikeIdentifier\r\n                ? $prop->name->toString() : $prop->name;\r\n            $var = new Expr\\Variable($name, $prop->name->getAttributes());\r\n            return new Expr\\StaticCall($prop->class, $var, $args, $attributes);\r\n        } elseif ($prop instanceof Node\\Expr\\ArrayDimFetch) {\r\n            $tmp = $prop;\r\n            while ($tmp->var instanceof Node\\Expr\\ArrayDimFetch) {\r\n                $tmp = $tmp->var;\r\n            }\r\n\r\n            /** @var Expr\\StaticPropertyFetch $staticProp */\r\n            $staticProp = $tmp->var;\r\n\r\n            // Set start attributes to attributes of innermost node\r\n            $tmp = $prop;\r\n            $this->fixupStartAttributes($tmp, $staticProp->name);\r\n            while ($tmp->var instanceof Node\\Expr\\ArrayDimFetch) {\r\n                $tmp = $tmp->var;\r\n                $this->fixupStartAttributes($tmp, $staticProp->name);\r\n            }\r\n\r\n            $name = $staticProp->name instanceof VarLikeIdentifier\r\n                ? $staticProp->name->toString() : $staticProp->name;\r\n            $tmp->var = new Expr\\Variable($name, $staticProp->name->getAttributes());\r\n            return new Expr\\StaticCall($staticProp->class, $prop, $args, $attributes);\r\n        } else {\r\n            throw new \\Exception;\r\n        }\r\n    }\r\n\r\n    protected function fixupStartAttributes(Node $to, Node $from) {\r\n        $startAttributes = ['startLine', 'startFilePos', 'startTokenPos'];\r\n        foreach ($startAttributes as $startAttribute) {\r\n            if ($from->hasAttribute($startAttribute)) {\r\n                $to->setAttribute($startAttribute, $from->getAttribute($startAttribute));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function handleBuiltinTypes(Name $name) {\r\n        $builtinTypes = [\r\n            'bool'     => true,\r\n            'int'      => true,\r\n            'float'    => true,\r\n            'string'   => true,\r\n            'iterable' => true,\r\n            'void'     => true,\r\n            'object'   => true,\r\n            'null'     => true,\r\n            'false'    => true,\r\n            'mixed'    => true,\r\n        ];\r\n\r\n        if (!$name->isUnqualified()) {\r\n            return $name;\r\n        }\r\n\r\n        $lowerName = $name->toLowerString();\r\n        if (!isset($builtinTypes[$lowerName])) {\r\n            return $name;\r\n        }\r\n\r\n        return new Node\\Identifier($lowerName, $name->getAttributes());\r\n    }\r\n\r\n    /**\r\n     * Get combined start and end attributes at a stack location\r\n     *\r\n     * @param int $pos Stack location\r\n     *\r\n     * @return array Combined start and end attributes\r\n     */\r\n    protected function getAttributesAt(int $pos) : array {\r\n        return $this->startAttributeStack[$pos] + $this->endAttributeStack[$pos];\r\n    }\r\n\r\n    protected function getFloatCastKind(string $cast): int\r\n    {\r\n        $cast = strtolower($cast);\r\n        if (strpos($cast, 'float') !== false) {\r\n            return Double::KIND_FLOAT;\r\n        }\r\n\r\n        if (strpos($cast, 'real') !== false) {\r\n            return Double::KIND_REAL;\r\n        }\r\n\r\n        return Double::KIND_DOUBLE;\r\n    }\r\n\r\n    protected function parseLNumber($str, $attributes, $allowInvalidOctal = false) {\r\n        try {\r\n            return LNumber::fromString($str, $attributes, $allowInvalidOctal);\r\n        } catch (Error $error) {\r\n            $this->emitError($error);\r\n            // Use dummy value\r\n            return new LNumber(0, $attributes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse a T_NUM_STRING token into either an integer or string node.\r\n     *\r\n     * @param string $str        Number string\r\n     * @param array  $attributes Attributes\r\n     *\r\n     * @return LNumber|String_ Integer or string node.\r\n     */\r\n    protected function parseNumString(string $str, array $attributes) {\r\n        if (!preg_match('/^(?:0|-?[1-9][0-9]*)$/', $str)) {\r\n            return new String_($str, $attributes);\r\n        }\r\n\r\n        $num = +$str;\r\n        if (!is_int($num)) {\r\n            return new String_($str, $attributes);\r\n        }\r\n\r\n        return new LNumber($num, $attributes);\r\n    }\r\n\r\n    protected function stripIndentation(\r\n        string $string, int $indentLen, string $indentChar,\r\n        bool $newlineAtStart, bool $newlineAtEnd, array $attributes\r\n    ) {\r\n        if ($indentLen === 0) {\r\n            return $string;\r\n        }\r\n\r\n        $start = $newlineAtStart ? '(?:(?<=\\n)|\\A)' : '(?<=\\n)';\r\n        $end = $newlineAtEnd ? '(?:(?=[\\r\\n])|\\z)' : '(?=[\\r\\n])';\r\n        $regex = '/' . $start . '([ \\t]*)(' . $end . ')?/';\r\n        return preg_replace_callback(\r\n            $regex,\r\n            function ($matches) use ($indentLen, $indentChar, $attributes) {\r\n                $prefix = substr($matches[1], 0, $indentLen);\r\n                if (false !== strpos($prefix, $indentChar === \" \" ? \"\\t\" : \" \")) {\r\n                    $this->emitError(new Error(\r\n                        'Invalid indentation - tabs and spaces cannot be mixed', $attributes\r\n                    ));\r\n                } elseif (strlen($prefix) < $indentLen && !isset($matches[2])) {\r\n                    $this->emitError(new Error(\r\n                        'Invalid body indentation level ' .\r\n                        '(expecting an indentation level of at least ' . $indentLen . ')',\r\n                        $attributes\r\n                    ));\r\n                }\r\n                return substr($matches[0], strlen($prefix));\r\n            },\r\n            $string\r\n        );\r\n    }\r\n\r\n    protected function parseDocString(\r\n        string $startToken, $contents, string $endToken,\r\n        array $attributes, array $endTokenAttributes, bool $parseUnicodeEscape\r\n    ) {\r\n        $kind = strpos($startToken, \"'\") === false\r\n            ? String_::KIND_HEREDOC : String_::KIND_NOWDOC;\r\n\r\n        $regex = '/\\A[bB]?<<<[ \\t]*[\\'\"]?([a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)[\\'\"]?(?:\\r\\n|\\n|\\r)\\z/';\r\n        $result = preg_match($regex, $startToken, $matches);\r\n        assert($result === 1);\r\n        $label = $matches[1];\r\n\r\n        $result = preg_match('/\\A[ \\t]*/', $endToken, $matches);\r\n        assert($result === 1);\r\n        $indentation = $matches[0];\r\n\r\n        $attributes['kind'] = $kind;\r\n        $attributes['docLabel'] = $label;\r\n        $attributes['docIndentation'] = $indentation;\r\n\r\n        $indentHasSpaces = false !== strpos($indentation, \" \");\r\n        $indentHasTabs = false !== strpos($indentation, \"\\t\");\r\n        if ($indentHasSpaces && $indentHasTabs) {\r\n            $this->emitError(new Error(\r\n                'Invalid indentation - tabs and spaces cannot be mixed',\r\n                $endTokenAttributes\r\n            ));\r\n\r\n            // Proceed processing as if this doc string is not indented\r\n            $indentation = '';\r\n        }\r\n\r\n        $indentLen = \\strlen($indentation);\r\n        $indentChar = $indentHasSpaces ? \" \" : \"\\t\";\r\n\r\n        if (\\is_string($contents)) {\r\n            if ($contents === '') {\r\n                return new String_('', $attributes);\r\n            }\r\n\r\n            $contents = $this->stripIndentation(\r\n                $contents, $indentLen, $indentChar, true, true, $attributes\r\n            );\r\n            $contents = preg_replace('~(\\r\\n|\\n|\\r)\\z~', '', $contents);\r\n\r\n            if ($kind === String_::KIND_HEREDOC) {\r\n                $contents = String_::parseEscapeSequences($contents, null, $parseUnicodeEscape);\r\n            }\r\n\r\n            return new String_($contents, $attributes);\r\n        } else {\r\n            assert(count($contents) > 0);\r\n            if (!$contents[0] instanceof Node\\Scalar\\EncapsedStringPart) {\r\n                // If there is no leading encapsed string part, pretend there is an empty one\r\n                $this->stripIndentation(\r\n                    '', $indentLen, $indentChar, true, false, $contents[0]->getAttributes()\r\n                );\r\n            }\r\n\r\n            $newContents = [];\r\n            foreach ($contents as $i => $part) {\r\n                if ($part instanceof Node\\Scalar\\EncapsedStringPart) {\r\n                    $isLast = $i === \\count($contents) - 1;\r\n                    $part->value = $this->stripIndentation(\r\n                        $part->value, $indentLen, $indentChar,\r\n                        $i === 0, $isLast, $part->getAttributes()\r\n                    );\r\n                    $part->value = String_::parseEscapeSequences($part->value, null, $parseUnicodeEscape);\r\n                    if ($isLast) {\r\n                        $part->value = preg_replace('~(\\r\\n|\\n|\\r)\\z~', '', $part->value);\r\n                    }\r\n                    if ('' === $part->value) {\r\n                        continue;\r\n                    }\r\n                }\r\n                $newContents[] = $part;\r\n            }\r\n            return new Encapsed($newContents, $attributes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create attributes for a zero-length common-capturing nop.\r\n     *\r\n     * @param Comment[] $comments\r\n     * @return array\r\n     */\r\n    protected function createCommentNopAttributes(array $comments) {\r\n        $comment = $comments[count($comments) - 1];\r\n        $commentEndLine = $comment->getEndLine();\r\n        $commentEndFilePos = $comment->getEndFilePos();\r\n        $commentEndTokenPos = $comment->getEndTokenPos();\r\n\r\n        $attributes = ['comments' => $comments];\r\n        if (-1 !== $commentEndLine) {\r\n            $attributes['startLine'] = $commentEndLine;\r\n            $attributes['endLine'] = $commentEndLine;\r\n        }\r\n        if (-1 !== $commentEndFilePos) {\r\n            $attributes['startFilePos'] = $commentEndFilePos + 1;\r\n            $attributes['endFilePos'] = $commentEndFilePos;\r\n        }\r\n        if (-1 !== $commentEndTokenPos) {\r\n            $attributes['startTokenPos'] = $commentEndTokenPos + 1;\r\n            $attributes['endTokenPos'] = $commentEndTokenPos;\r\n        }\r\n        return $attributes;\r\n    }\r\n\r\n    protected function checkModifier($a, $b, $modifierPos) {\r\n        // Jumping through some hoops here because verifyModifier() is also used elsewhere\r\n        try {\r\n            Class_::verifyModifier($a, $b);\r\n        } catch (Error $error) {\r\n            $error->setAttributes($this->getAttributesAt($modifierPos));\r\n            $this->emitError($error);\r\n        }\r\n    }\r\n\r\n    protected function checkParam(Param $node) {\r\n        if ($node->variadic && null !== $node->default) {\r\n            $this->emitError(new Error(\r\n                'Variadic parameter cannot have a default value',\r\n                $node->default->getAttributes()\r\n            ));\r\n        }\r\n    }\r\n\r\n    protected function checkTryCatch(TryCatch $node) {\r\n        if (empty($node->catches) && null === $node->finally) {\r\n            $this->emitError(new Error(\r\n                'Cannot use try without catch or finally', $node->getAttributes()\r\n            ));\r\n        }\r\n    }\r\n\r\n    protected function checkNamespace(Namespace_ $node) {\r\n        if (null !== $node->stmts) {\r\n            foreach ($node->stmts as $stmt) {\r\n                if ($stmt instanceof Namespace_) {\r\n                    $this->emitError(new Error(\r\n                        'Namespace declarations cannot be nested', $stmt->getAttributes()\r\n                    ));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function checkClass(Class_ $node, $namePos) {\r\n        if (null !== $node->name && $node->name->isSpecialClassName()) {\r\n            $this->emitError(new Error(\r\n                sprintf('Cannot use \\'%s\\' as class name as it is reserved', $node->name),\r\n                $this->getAttributesAt($namePos)\r\n            ));\r\n        }\r\n\r\n        if ($node->extends && $node->extends->isSpecialClassName()) {\r\n            $this->emitError(new Error(\r\n                sprintf('Cannot use \\'%s\\' as class name as it is reserved', $node->extends),\r\n                $node->extends->getAttributes()\r\n            ));\r\n        }\r\n\r\n        foreach ($node->implements as $interface) {\r\n            if ($interface->isSpecialClassName()) {\r\n                $this->emitError(new Error(\r\n                    sprintf('Cannot use \\'%s\\' as interface name as it is reserved', $interface),\r\n                    $interface->getAttributes()\r\n                ));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function checkInterface(Interface_ $node, $namePos) {\r\n        if (null !== $node->name && $node->name->isSpecialClassName()) {\r\n            $this->emitError(new Error(\r\n                sprintf('Cannot use \\'%s\\' as class name as it is reserved', $node->name),\r\n                $this->getAttributesAt($namePos)\r\n            ));\r\n        }\r\n\r\n        foreach ($node->extends as $interface) {\r\n            if ($interface->isSpecialClassName()) {\r\n                $this->emitError(new Error(\r\n                    sprintf('Cannot use \\'%s\\' as interface name as it is reserved', $interface),\r\n                    $interface->getAttributes()\r\n                ));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function checkClassMethod(ClassMethod $node, $modifierPos) {\r\n        if ($node->flags & Class_::MODIFIER_STATIC) {\r\n            switch ($node->name->toLowerString()) {\r\n                case '__construct':\r\n                    $this->emitError(new Error(\r\n                        sprintf('Constructor %s() cannot be static', $node->name),\r\n                        $this->getAttributesAt($modifierPos)));\r\n                    break;\r\n                case '__destruct':\r\n                    $this->emitError(new Error(\r\n                        sprintf('Destructor %s() cannot be static', $node->name),\r\n                        $this->getAttributesAt($modifierPos)));\r\n                    break;\r\n                case '__clone':\r\n                    $this->emitError(new Error(\r\n                        sprintf('Clone method %s() cannot be static', $node->name),\r\n                        $this->getAttributesAt($modifierPos)));\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected function checkClassConst(ClassConst $node, $modifierPos) {\r\n        if ($node->flags & Class_::MODIFIER_STATIC) {\r\n            $this->emitError(new Error(\r\n                \"Cannot use 'static' as constant modifier\",\r\n                $this->getAttributesAt($modifierPos)));\r\n        }\r\n        if ($node->flags & Class_::MODIFIER_ABSTRACT) {\r\n            $this->emitError(new Error(\r\n                \"Cannot use 'abstract' as constant modifier\",\r\n                $this->getAttributesAt($modifierPos)));\r\n        }\r\n        if ($node->flags & Class_::MODIFIER_FINAL) {\r\n            $this->emitError(new Error(\r\n                \"Cannot use 'final' as constant modifier\",\r\n                $this->getAttributesAt($modifierPos)));\r\n        }\r\n    }\r\n\r\n    protected function checkProperty(Property $node, $modifierPos) {\r\n        if ($node->flags & Class_::MODIFIER_ABSTRACT) {\r\n            $this->emitError(new Error('Properties cannot be declared abstract',\r\n                $this->getAttributesAt($modifierPos)));\r\n        }\r\n\r\n        if ($node->flags & Class_::MODIFIER_FINAL) {\r\n            $this->emitError(new Error('Properties cannot be declared final',\r\n                $this->getAttributesAt($modifierPos)));\r\n        }\r\n    }\r\n\r\n    protected function checkUseUse(UseUse $node, $namePos) {\r\n        if ($node->alias && $node->alias->isSpecialClassName()) {\r\n            $this->emitError(new Error(\r\n                sprintf(\r\n                    'Cannot use %s as %s because \\'%2$s\\' is a special class name',\r\n                    $node->name, $node->alias\r\n                ),\r\n                $this->getAttributesAt($namePos)\r\n            ));\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php b/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php
--- a/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php	
+++ b/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php	
@@ -219,10 +219,7 @@
                         ));
                     }
 
-                    // This is necessary to assign some meaningful attributes to /* empty */ productions. They'll get
-                    // the attributes of the next token, even though they don't contain it themselves.
-                    $this->startAttributeStack[$stackPos+1] = $startAttributes;
-                    $this->endAttributeStack[$stackPos+1] = $endAttributes;
+                    // Allow productions to access the start attributes of the lookahead token.
                     $this->lookaheadStartAttributes = $startAttributes;
 
                     //$this->traceRead($symbol);
@@ -294,7 +291,8 @@
 
                     /* Goto - shift nonterminal */
                     $lastEndAttributes = $this->endAttributeStack[$stackPos];
-                    $stackPos -= $this->ruleToLength[$rule];
+                    $ruleLength = $this->ruleToLength[$rule];
+                    $stackPos -= $ruleLength;
                     $nonTerminal = $this->ruleToNonTerminal[$rule];
                     $idx = $this->gotoBase[$nonTerminal] + $stateStack[$stackPos];
                     if ($idx >= 0 && $idx < $this->gotoTableSize && $this->gotoCheck[$idx] === $nonTerminal) {
@@ -307,6 +305,10 @@
                     $stateStack[$stackPos]     = $state;
                     $this->semStack[$stackPos] = $this->semValue;
                     $this->endAttributeStack[$stackPos] = $lastEndAttributes;
+                    if ($ruleLength === 0) {
+                        // Empty productions use the start attributes of the lookahead token.
+                        $this->startAttributeStack[$stackPos] = $this->lookaheadStartAttributes;
+                    }
                 } else {
                     /* error */
                     switch ($this->errorState) {
@@ -340,6 +342,7 @@
 
                             // We treat the error symbol as being empty, so we reset the end attributes
                             // to the end attributes of the last non-error symbol
+                            $this->startAttributeStack[$stackPos] = $this->lookaheadStartAttributes;
                             $this->endAttributeStack[$stackPos] = $this->endAttributeStack[$stackPos - 1];
                             $this->endAttributes = $this->endAttributeStack[$stackPos - 1];
                             break;
Index: vendor/scrivo/highlight.php/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># highlight.php\r\n\r\n[![Unit Tests](https://github.com/scrivo/highlight.php/workflows/Unit%20Tests/badge.svg?branch=9.18)](https://github.com/scrivo/highlight.php/actions?query=workflow%3A%22Unit+Tests%22+branch%3A9.18)\r\n[![Latest Packagist release](https://img.shields.io/packagist/v/scrivo/highlight.php.svg)](https://packagist.org/packages/scrivo/highlight.php)\r\n[![Monthly downloads on Packagist](https://img.shields.io/packagist/dm/scrivo/highlight.php.svg)](https://packagist.org/packages/scrivo/highlight.php/stats)\r\n\r\n*highlight.php* is a server-side syntax highlighter written in PHP that currently supports 185 languages. It's a port of [highlight.js](http://www.highlightjs.org) by Ivan Sagalaev that makes full use of the language and style definitions of the original JavaScript project.\r\n\r\n[TOC]: # \"## Table of Contents\"\r\n\r\n## Table of Contents\r\n- [Installation + Setup](#installation--setup)\r\n  - [Composer Version Constraints](#composer-version-constraints)\r\n- [Usage](#usage)\r\n  - [Explicit Mode](#explicit-mode)\r\n  - [Automatic Language Detection Mode](#automatic-language-detection-mode)\r\n  - [Stylesheets](#stylesheets)\r\n- [Highlighter Utilities](#highlighter-utilities)\r\n- [Versioning](#versioning)\r\n  - [Backward Compatibility Promise](#backward-compatibility-promise)\r\n- [Some History](#some-history)\r\n- [License](#license)\r\n\r\n\r\n## Installation + Setup\r\n\r\nThe recommended approach is to install the project through [Composer](https://getcomposer.org/).\r\n\r\n```bash\r\ncomposer require scrivo/highlight.php\r\n```\r\n\r\nIf you're not using Composer, ensure that the classes defined in the `Highlight` namespace can be found either by inclusion or by an autoloader. A trivial autoloader for this purpose is included in this project as `Highlight\\Autoloader.php`\r\n\r\n### Composer Version Constraints\r\n\r\nWhen requiring this project in your `composer.json`, it is recommended you use the [caret version range](https://getcomposer.org/doc/articles/versions.md#caret-version-range-) and use only the major and minor values; i.e. `^9.14`.\r\n\r\nIt's come to our attention that a lot of tutorials and projects out there are locking themselves into highly specific versions of this project; e.g. `\"scrivo/highlight.php\": \"v9.12.0.1\"`. Please do **not** do this or encourage it. We promise a [reliable backward compatibility policy](#backward-compatibility-promise) so there's no reason to lock yourself to such a specific version. By doing this, you are preventing yourself or your users from receiving updates to language definitions and bug fixes.\r\n\r\n## Usage\r\n\r\nThe `\\Highlight\\Highlighter` class contains the syntax highlighting functionality. You can choose between two highlighting modes:\r\n\r\n1. explicit mode\r\n2. automatic language detection mode\r\n\r\n### Explicit Mode\r\n\r\nIn explicit mode, you must define which language you will be highlighting as.\r\n\r\n```php\r\n// Instantiate the Highlighter.\r\n$hl = new \\Highlight\\Highlighter();\r\n$code = file_get_contents('some_ruby_script.rb');\r\n\r\ntry {\r\n    // Highlight some code.\r\n    $highlighted = $hl->highlight('ruby', $code);\r\n\r\n    echo \"<pre><code class=\\\"hljs {$highlighted->language}\\\">\";\r\n    echo $highlighted->value;\r\n    echo \"</code></pre>\";\r\n}\r\ncatch (DomainException $e) {\r\n    // This is thrown if the specified language does not exist\r\n\r\n    echo \"<pre><code>\";\r\n    echo htmlentities($code);\r\n    echo \"</code></pre>\";\r\n}\r\n```\r\n\r\n### Automatic Language Detection Mode\r\n\r\nAlternatively you can use the automatic detection mode, which highlights your code with the language the library thinks is best. It is highly recommended you explicitly choose the language or limit the number of languages to automatically detect to reduce the number of inaccuracies.\r\n\r\n> **Warning:** Auto-detection occurs in a brute force fashion and the language with the most accurate result will be selected. This is extremely inefficient as you supply more languages and may not always be 100% accurate if similar languages are configured.\r\n\r\n```php\r\n$hl = new \\Highlight\\Highlighter();\r\n$hl->setAutodetectLanguages(array('ruby', 'python', 'perl'));\r\n\r\n$highlighted = $hl->highlightAuto(file_get_contents('some_ruby_script.rb'));\r\n\r\necho \"<pre><code class=\\\"hljs {$highlighted->language}\\\">\";\r\necho $highlighted->value;\r\necho \"</code></pre>\";\r\n```\r\n\r\n#### Default Languages\r\n\r\nIn version 9.x of this project, the following languages are the default auto-detected languages:\r\n\r\n- XML\r\n- JSON\r\n- JavaScript\r\n- CSS\r\n- PHP\r\n- HTTP\r\n\r\nThese default languages are considered \"legacy behavior\" and will be removed in version 10.x of this library to match highlight.js behavior; the new default behavior in 10.x will be to use *every* language.\r\n\r\n### Stylesheets\r\n\r\nThe same stylesheets available in the **highlight.js** project are available in the `styles` directory of this project and may be included in your own CSS or made accessible to your web server.\r\n\r\n## Highlighter Utilities\r\n\r\nThe core of the project is loyal port of **highlight.js** and is available under the main `Highlight` namespace. A series of convenience functions are provided under the `HighlightUtilities` namespace to introduce additional functionality without the need for another dependency.\r\n\r\nAvailable functions:\r\n\r\n- [`getAvailableStyleSheets(bool $filePaths = false): string[]`](HighlightUtilities/functions.php#L35-L48)\r\n- [`getLanguagesFolder(): string`](HighlightUtilities/functions.php#L156-L164)\r\n- [`getLanguageDefinitionPath(string $name): string`](HighlightUtilities/functions.php#L170-L182)\r\n- [`getStyleSheet(string $name): false|string`](HighlightUtilities/functions.php#L94-L107)\r\n- [`getStyleSheetFolder(): string`](HighlightUtilities/functions.php#L115-L123)\r\n- [`getStyleSheetPath(string $name): string`](HighlightUtilities/functions.php#L131-L143)\r\n- [`getThemeBackgroundColor(string $name): float[]`](HighlightUtilities/functions.php#L75-L88)\r\n- [`splitCodeIntoArray(string $html): false|string[]`](HighlightUtilities/functions.php#L194-L207)\r\n\r\n## Versioning\r\n\r\nThis project will follow the same version numbers as the highlight.js project with regards to languages, meaning that a language definition available in highlight.js 9.12.0 will be available in highlight.php 9.12.0. However, there are times where bugs may arise in this project or its translated definition files, so there'll be one more number appended to the version number. For example, version 9.12.0.1 will contain all of the same languages as highlight.js 9.12.0 but also contain fixes solely to this project. This is done so this project can have version bumps without conflicts should highlight.js release version 9.12.1.\r\n\r\n### Backward Compatibility Promise\r\n\r\nDespite the fact that the semantic versioning used in this project mirrors that of highlight.js, this project will adhere to [Symfony's Backward Compatibility Promise](https://symfony.com/doc/current/contributing/code/bc.html#using-symfony-code). You can rest assured that there will be no breaking changes during `9.x` and any deprecations will be marked with `@deprecated` and won't be removed until the next major release.\r\n\r\n## Some History\r\n\r\nGeert Bergman\r\nSep 30, 2013\r\n\r\nJavaScript code highlighting is very convenient and in many cases just what you want to use. Especially for programming blogs I would not advice you to use otherwise. But there are occasions where you're better off with a more 'static' approach, for instance if you want to send highlighted code in an email or for API documents. For this I needed a code highlighting program preferably written in PHP.\r\n\r\nI couldn't found any satisfactory PHP solution so I decided to port one from JavaScript. After some comparison of different highlighting programs based on license, technology, language support [highlight.js](http://www.highlightjs.org) came out most favorable in my opinion.\r\n\r\nIt was my decision not to make a PHP highlighter but to do a port of highlight.js, these are different things. The goal was to make it work exactly as [highlight.js](http://www.highlightjs.org) to make as much use as possible of the language definitions and CSS files of the original program.\r\n\r\nHappy coding!\r\n\r\n## License\r\n\r\n[BSD](./LICENSE.md)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/scrivo/highlight.php/README.md b/vendor/scrivo/highlight.php/README.md
--- a/vendor/scrivo/highlight.php/README.md	
+++ b/vendor/scrivo/highlight.php/README.md	
@@ -118,7 +118,7 @@
 - [`getStyleSheetFolder(): string`](HighlightUtilities/functions.php#L115-L123)
 - [`getStyleSheetPath(string $name): string`](HighlightUtilities/functions.php#L131-L143)
 - [`getThemeBackgroundColor(string $name): float[]`](HighlightUtilities/functions.php#L75-L88)
-- [`splitCodeIntoArray(string $html): false|string[]`](HighlightUtilities/functions.php#L194-L207)
+- [`splitCodeIntoArray(string $html): false|string[]`](HighlightUtilities/functions.php#L194-L205)
 
 ## Versioning
 
Index: vendor/laravel/framework/src/Illuminate/Notifications/NotificationSender.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Notifications;\r\n\r\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\r\nuse Illuminate\\Contracts\\Translation\\HasLocalePreference;\r\nuse Illuminate\\Database\\Eloquent\\Collection as ModelCollection;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nuse Illuminate\\Notifications\\Events\\NotificationSending;\r\nuse Illuminate\\Notifications\\Events\\NotificationSent;\r\nuse Illuminate\\Support\\Collection;\r\nuse Illuminate\\Support\\Str;\r\nuse Illuminate\\Support\\Traits\\Localizable;\r\n\r\nclass NotificationSender\r\n{\r\n    use Localizable;\r\n\r\n    /**\r\n     * The notification manager instance.\r\n     *\r\n     * @var \\Illuminate\\Notifications\\ChannelManager\r\n     */\r\n    protected $manager;\r\n\r\n    /**\r\n     * The Bus dispatcher instance.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Bus\\Dispatcher\r\n     */\r\n    protected $bus;\r\n\r\n    /**\r\n     * The event dispatcher.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Events\\Dispatcher\r\n     */\r\n    protected $events;\r\n\r\n    /**\r\n     * The locale to be used when sending notifications.\r\n     *\r\n     * @var string|null\r\n     */\r\n    protected $locale;\r\n\r\n    /**\r\n     * Create a new notification sender instance.\r\n     *\r\n     * @param  \\Illuminate\\Notifications\\ChannelManager  $manager\r\n     * @param  \\Illuminate\\Contracts\\Bus\\Dispatcher  $bus\r\n     * @param  \\Illuminate\\Contracts\\Events\\Dispatcher  $events\r\n     * @param  string|null  $locale\r\n     * @return void\r\n     */\r\n    public function __construct($manager, $bus, $events, $locale = null)\r\n    {\r\n        $this->bus = $bus;\r\n        $this->events = $events;\r\n        $this->locale = $locale;\r\n        $this->manager = $manager;\r\n    }\r\n\r\n    /**\r\n     * Send the given notification to the given notifiable entities.\r\n     *\r\n     * @param  \\Illuminate\\Support\\Collection|array|mixed  $notifiables\r\n     * @param  mixed  $notification\r\n     * @return void\r\n     */\r\n    public function send($notifiables, $notification)\r\n    {\r\n        $notifiables = $this->formatNotifiables($notifiables);\r\n\r\n        if ($notification instanceof ShouldQueue) {\r\n            return $this->queueNotification($notifiables, $notification);\r\n        }\r\n\r\n        return $this->sendNow($notifiables, $notification);\r\n    }\r\n\r\n    /**\r\n     * Send the given notification immediately.\r\n     *\r\n     * @param  \\Illuminate\\Support\\Collection|array|mixed  $notifiables\r\n     * @param  mixed  $notification\r\n     * @param  array|null  $channels\r\n     * @return void\r\n     */\r\n    public function sendNow($notifiables, $notification, array $channels = null)\r\n    {\r\n        $notifiables = $this->formatNotifiables($notifiables);\r\n\r\n        $original = clone $notification;\r\n\r\n        foreach ($notifiables as $notifiable) {\r\n            if (empty($viaChannels = $channels ?: $notification->via($notifiable))) {\r\n                continue;\r\n            }\r\n\r\n            $this->withLocale($this->preferredLocale($notifiable, $notification), function () use ($viaChannels, $notifiable, $original) {\r\n                $notificationId = Str::uuid()->toString();\r\n\r\n                foreach ((array) $viaChannels as $channel) {\r\n                    if (! ($notifiable instanceof AnonymousNotifiable && $channel === 'database')) {\r\n                        $this->sendToNotifiable($notifiable, $notificationId, clone $original, $channel);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the notifiable's preferred locale for the notification.\r\n     *\r\n     * @param  mixed  $notifiable\r\n     * @param  mixed  $notification\r\n     * @return string|null\r\n     */\r\n    protected function preferredLocale($notifiable, $notification)\r\n    {\r\n        return $notification->locale ?? $this->locale ?? value(function () use ($notifiable) {\r\n            if ($notifiable instanceof HasLocalePreference) {\r\n                return $notifiable->preferredLocale();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send the given notification to the given notifiable via a channel.\r\n     *\r\n     * @param  mixed  $notifiable\r\n     * @param  string  $id\r\n     * @param  mixed  $notification\r\n     * @param  string  $channel\r\n     * @return void\r\n     */\r\n    protected function sendToNotifiable($notifiable, $id, $notification, $channel)\r\n    {\r\n        if (! $notification->id) {\r\n            $notification->id = $id;\r\n        }\r\n\r\n        if (! $this->shouldSendNotification($notifiable, $notification, $channel)) {\r\n            return;\r\n        }\r\n\r\n        $response = $this->manager->driver($channel)->send($notifiable, $notification);\r\n\r\n        $this->events->dispatch(\r\n            new NotificationSent($notifiable, $notification, $channel, $response)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Determines if the notification can be sent.\r\n     *\r\n     * @param  mixed  $notifiable\r\n     * @param  mixed  $notification\r\n     * @param  string  $channel\r\n     * @return bool\r\n     */\r\n    protected function shouldSendNotification($notifiable, $notification, $channel)\r\n    {\r\n        return $this->events->until(\r\n            new NotificationSending($notifiable, $notification, $channel)\r\n        ) !== false;\r\n    }\r\n\r\n    /**\r\n     * Queue the given notification instances.\r\n     *\r\n     * @param  mixed  $notifiables\r\n     * @param  array[\\Illuminate\\Notifications\\Channels\\Notification]  $notification\r\n     * @return void\r\n     */\r\n    protected function queueNotification($notifiables, $notification)\r\n    {\r\n        $notifiables = $this->formatNotifiables($notifiables);\r\n\r\n        $original = clone $notification;\r\n\r\n        foreach ($notifiables as $notifiable) {\r\n            $notificationId = Str::uuid()->toString();\r\n\r\n            foreach ((array) $original->via($notifiable) as $channel) {\r\n                $notification = clone $original;\r\n\r\n                $notification->id = $notificationId;\r\n\r\n                if (! is_null($this->locale)) {\r\n                    $notification->locale = $this->locale;\r\n                }\r\n\r\n                $queue = $notification->queue;\r\n\r\n                if (method_exists($notification, 'viaQueues')) {\r\n                    $queue = $notification->viaQueues()[$channel] ?? null;\r\n                }\r\n\r\n                $this->bus->dispatch(\r\n                    (new SendQueuedNotifications($notifiable, $notification, [$channel]))\r\n                            ->onConnection($notification->connection)\r\n                            ->onQueue($queue)\r\n                            ->delay($notification->delay)\r\n                            ->through(\r\n                                array_merge(\r\n                                    method_exists($notification, 'middleware') ? $notification->middleware() : [],\r\n                                    $notification->middleware ?? []\r\n                                )\r\n                            )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Format the notifiables into a Collection / array if necessary.\r\n     *\r\n     * @param  mixed  $notifiables\r\n     * @return \\Illuminate\\Database\\Eloquent\\Collection|array\r\n     */\r\n    protected function formatNotifiables($notifiables)\r\n    {\r\n        if (! $notifiables instanceof Collection && ! is_array($notifiables)) {\r\n            return $notifiables instanceof Model\r\n                            ? new ModelCollection([$notifiables]) : [$notifiables];\r\n        }\r\n\r\n        return $notifiables;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Notifications/NotificationSender.php b/vendor/laravel/framework/src/Illuminate/Notifications/NotificationSender.php
--- a/vendor/laravel/framework/src/Illuminate/Notifications/NotificationSender.php	
+++ b/vendor/laravel/framework/src/Illuminate/Notifications/NotificationSender.php	
@@ -171,7 +171,7 @@
      * Queue the given notification instances.
      *
      * @param  mixed  $notifiables
-     * @param  array[\Illuminate\Notifications\Channels\Notification]  $notification
+     * @param  \Illuminate\Notifications\Notification  $notification
      * @return void
      */
     protected function queueNotification($notifiables, $notification)
Index: vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Foundation\\Http\\Middleware;\r\n\r\nuse Closure;\r\nuse Illuminate\\Contracts\\Encryption\\Encrypter;\r\nuse Illuminate\\Contracts\\Foundation\\Application;\r\nuse Illuminate\\Contracts\\Support\\Responsable;\r\nuse Illuminate\\Cookie\\CookieValuePrefix;\r\nuse Illuminate\\Cookie\\Middleware\\EncryptCookies;\r\nuse Illuminate\\Session\\TokenMismatchException;\r\nuse Illuminate\\Support\\InteractsWithTime;\r\nuse Symfony\\Component\\HttpFoundation\\Cookie;\r\n\r\nclass VerifyCsrfToken\r\n{\r\n    use InteractsWithTime;\r\n\r\n    /**\r\n     * The application instance.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Foundation\\Application\r\n     */\r\n    protected $app;\r\n\r\n    /**\r\n     * The encrypter implementation.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Encryption\\Encrypter\r\n     */\r\n    protected $encrypter;\r\n\r\n    /**\r\n     * The URIs that should be excluded from CSRF verification.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $except = [];\r\n\r\n    /**\r\n     * Indicates whether the XSRF-TOKEN cookie should be set on the response.\r\n     *\r\n     * @var bool\r\n     */\r\n    protected $addHttpCookie = true;\r\n\r\n    /**\r\n     * Create a new middleware instance.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Foundation\\Application  $app\r\n     * @param  \\Illuminate\\Contracts\\Encryption\\Encrypter  $encrypter\r\n     * @return void\r\n     */\r\n    public function __construct(Application $app, Encrypter $encrypter)\r\n    {\r\n        $this->app = $app;\r\n        $this->encrypter = $encrypter;\r\n    }\r\n\r\n    /**\r\n     * Handle an incoming request.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @return mixed\r\n     *\r\n     * @throws \\Illuminate\\Session\\TokenMismatchException\r\n     */\r\n    public function handle($request, Closure $next)\r\n    {\r\n        if (\r\n            $this->isReading($request) ||\r\n            $this->runningUnitTests() ||\r\n            $this->inExceptArray($request) ||\r\n            $this->tokensMatch($request)\r\n        ) {\r\n            return tap($next($request), function ($response) use ($request) {\r\n                if ($this->shouldAddXsrfTokenCookie()) {\r\n                    $this->addCookieToResponse($request, $response);\r\n                }\r\n            });\r\n        }\r\n\r\n        throw new TokenMismatchException('CSRF token mismatch.');\r\n    }\r\n\r\n    /**\r\n     * Determine if the HTTP request uses a ‘read’ verb.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return bool\r\n     */\r\n    protected function isReading($request)\r\n    {\r\n        return in_array($request->method(), ['HEAD', 'GET', 'OPTIONS']);\r\n    }\r\n\r\n    /**\r\n     * Determine if the application is running unit tests.\r\n     *\r\n     * @return bool\r\n     */\r\n    protected function runningUnitTests()\r\n    {\r\n        return $this->app->runningInConsole() && $this->app->runningUnitTests();\r\n    }\r\n\r\n    /**\r\n     * Determine if the request has a URI that should pass through CSRF verification.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return bool\r\n     */\r\n    protected function inExceptArray($request)\r\n    {\r\n        foreach ($this->except as $except) {\r\n            if ($except !== '/') {\r\n                $except = trim($except, '/');\r\n            }\r\n\r\n            if ($request->fullUrlIs($except) || $request->is($except)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Determine if the session and input CSRF tokens match.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return bool\r\n     */\r\n    protected function tokensMatch($request)\r\n    {\r\n        $token = $this->getTokenFromRequest($request);\r\n\r\n        return is_string($request->session()->token()) &&\r\n               is_string($token) &&\r\n               hash_equals($request->session()->token(), $token);\r\n    }\r\n\r\n    /**\r\n     * Get the CSRF token from the request.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return string\r\n     */\r\n    protected function getTokenFromRequest($request)\r\n    {\r\n        $token = $request->input('_token') ?: $request->header('X-CSRF-TOKEN');\r\n\r\n        if (! $token && $header = $request->header('X-XSRF-TOKEN')) {\r\n            $token = CookieValuePrefix::remove($this->encrypter->decrypt($header, static::serialized()));\r\n        }\r\n\r\n        return $token;\r\n    }\r\n\r\n    /**\r\n     * Determine if the cookie should be added to the response.\r\n     *\r\n     * @return bool\r\n     */\r\n    public function shouldAddXsrfTokenCookie()\r\n    {\r\n        return $this->addHttpCookie;\r\n    }\r\n\r\n    /**\r\n     * Add the CSRF token to the response cookies.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Symfony\\Component\\HttpFoundation\\Response  $response\r\n     * @return \\Symfony\\Component\\HttpFoundation\\Response\r\n     */\r\n    protected function addCookieToResponse($request, $response)\r\n    {\r\n        $config = config('session');\r\n\r\n        if ($response instanceof Responsable) {\r\n            $response = $response->toResponse($request);\r\n        }\r\n\r\n        $response->headers->setCookie(\r\n            new Cookie(\r\n                'XSRF-TOKEN', $request->session()->token(), $this->availableAt(60 * $config['lifetime']),\r\n                $config['path'], $config['domain'], $config['secure'], false, false, $config['same_site'] ?? null\r\n            )\r\n        );\r\n\r\n        return $response;\r\n    }\r\n\r\n    /**\r\n     * Determine if the cookie contents should be serialized.\r\n     *\r\n     * @return bool\r\n     */\r\n    public static function serialized()\r\n    {\r\n        return EncryptCookies::serialized('XSRF-TOKEN');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php b/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
--- a/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php	
+++ b/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php	
@@ -3,6 +3,7 @@
 namespace Illuminate\Foundation\Http\Middleware;
 
 use Closure;
+use Illuminate\Contracts\Encryption\DecryptException;
 use Illuminate\Contracts\Encryption\Encrypter;
 use Illuminate\Contracts\Foundation\Application;
 use Illuminate\Contracts\Support\Responsable;
@@ -152,7 +153,11 @@
         $token = $request->input('_token') ?: $request->header('X-CSRF-TOKEN');
 
         if (! $token && $header = $request->header('X-XSRF-TOKEN')) {
-            $token = CookieValuePrefix::remove($this->encrypter->decrypt($header, static::serialized()));
+            try {
+                $token = CookieValuePrefix::remove($this->encrypter->decrypt($header, static::serialized()));
+            } catch (DecryptException $e) {
+                $token = '';
+            }
         }
 
         return $token;
Index: vendor/laravel/framework/src/Illuminate/Mail/Mailer.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Mail;\r\n\r\nuse Illuminate\\Contracts\\Events\\Dispatcher;\r\nuse Illuminate\\Contracts\\Mail\\Mailable as MailableContract;\r\nuse Illuminate\\Contracts\\Mail\\Mailer as MailerContract;\r\nuse Illuminate\\Contracts\\Mail\\MailQueue as MailQueueContract;\r\nuse Illuminate\\Contracts\\Queue\\Factory as QueueContract;\r\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\r\nuse Illuminate\\Contracts\\Support\\Htmlable;\r\nuse Illuminate\\Contracts\\View\\Factory;\r\nuse Illuminate\\Mail\\Events\\MessageSending;\r\nuse Illuminate\\Mail\\Events\\MessageSent;\r\nuse Illuminate\\Support\\HtmlString;\r\nuse Illuminate\\Support\\Traits\\Macroable;\r\nuse InvalidArgumentException;\r\nuse Swift_Mailer;\r\n\r\nclass Mailer implements MailerContract, MailQueueContract\r\n{\r\n    use Macroable;\r\n\r\n    /**\r\n     * The name that is configured for the mailer.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $name;\r\n\r\n    /**\r\n     * The view factory instance.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\View\\Factory\r\n     */\r\n    protected $views;\r\n\r\n    /**\r\n     * The Swift Mailer instance.\r\n     *\r\n     * @var \\Swift_Mailer\r\n     */\r\n    protected $swift;\r\n\r\n    /**\r\n     * The event dispatcher instance.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Events\\Dispatcher|null\r\n     */\r\n    protected $events;\r\n\r\n    /**\r\n     * The global from address and name.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $from;\r\n\r\n    /**\r\n     * The global reply-to address and name.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $replyTo;\r\n\r\n    /**\r\n     * The global return path address.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $returnPath;\r\n\r\n    /**\r\n     * The global to address and name.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $to;\r\n\r\n    /**\r\n     * The queue factory implementation.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Queue\\Factory\r\n     */\r\n    protected $queue;\r\n\r\n    /**\r\n     * Array of failed recipients.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $failedRecipients = [];\r\n\r\n    /**\r\n     * Create a new Mailer instance.\r\n     *\r\n     * @param  string  $name\r\n     * @param  \\Illuminate\\Contracts\\View\\Factory  $views\r\n     * @param  \\Swift_Mailer  $swift\r\n     * @param  \\Illuminate\\Contracts\\Events\\Dispatcher|null  $events\r\n     * @return void\r\n     */\r\n    public function __construct(string $name, Factory $views, Swift_Mailer $swift, Dispatcher $events = null)\r\n    {\r\n        $this->name = $name;\r\n        $this->views = $views;\r\n        $this->swift = $swift;\r\n        $this->events = $events;\r\n    }\r\n\r\n    /**\r\n     * Set the global from address and name.\r\n     *\r\n     * @param  string  $address\r\n     * @param  string|null  $name\r\n     * @return void\r\n     */\r\n    public function alwaysFrom($address, $name = null)\r\n    {\r\n        $this->from = compact('address', 'name');\r\n    }\r\n\r\n    /**\r\n     * Set the global reply-to address and name.\r\n     *\r\n     * @param  string  $address\r\n     * @param  string|null  $name\r\n     * @return void\r\n     */\r\n    public function alwaysReplyTo($address, $name = null)\r\n    {\r\n        $this->replyTo = compact('address', 'name');\r\n    }\r\n\r\n    /**\r\n     * Set the global return path address.\r\n     *\r\n     * @param  string  $address\r\n     * @return void\r\n     */\r\n    public function alwaysReturnPath($address)\r\n    {\r\n        $this->returnPath = compact('address');\r\n    }\r\n\r\n    /**\r\n     * Set the global to address and name.\r\n     *\r\n     * @param  string  $address\r\n     * @param  string|null  $name\r\n     * @return void\r\n     */\r\n    public function alwaysTo($address, $name = null)\r\n    {\r\n        $this->to = compact('address', 'name');\r\n    }\r\n\r\n    /**\r\n     * Begin the process of mailing a mailable class instance.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return \\Illuminate\\Mail\\PendingMail\r\n     */\r\n    public function to($users)\r\n    {\r\n        return (new PendingMail($this))->to($users);\r\n    }\r\n\r\n    /**\r\n     * Begin the process of mailing a mailable class instance.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return \\Illuminate\\Mail\\PendingMail\r\n     */\r\n    public function cc($users)\r\n    {\r\n        return (new PendingMail($this))->cc($users);\r\n    }\r\n\r\n    /**\r\n     * Begin the process of mailing a mailable class instance.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return \\Illuminate\\Mail\\PendingMail\r\n     */\r\n    public function bcc($users)\r\n    {\r\n        return (new PendingMail($this))->bcc($users);\r\n    }\r\n\r\n    /**\r\n     * Send a new message with only an HTML part.\r\n     *\r\n     * @param  string  $html\r\n     * @param  mixed  $callback\r\n     * @return void\r\n     */\r\n    public function html($html, $callback)\r\n    {\r\n        return $this->send(['html' => new HtmlString($html)], [], $callback);\r\n    }\r\n\r\n    /**\r\n     * Send a new message with only a raw text part.\r\n     *\r\n     * @param  string  $text\r\n     * @param  mixed  $callback\r\n     * @return void\r\n     */\r\n    public function raw($text, $callback)\r\n    {\r\n        return $this->send(['raw' => $text], [], $callback);\r\n    }\r\n\r\n    /**\r\n     * Send a new message with only a plain part.\r\n     *\r\n     * @param  string  $view\r\n     * @param  array  $data\r\n     * @param  mixed  $callback\r\n     * @return void\r\n     */\r\n    public function plain($view, array $data, $callback)\r\n    {\r\n        return $this->send(['text' => $view], $data, $callback);\r\n    }\r\n\r\n    /**\r\n     * Render the given message as a view.\r\n     *\r\n     * @param  string|array  $view\r\n     * @param  array  $data\r\n     * @return string\r\n     */\r\n    public function render($view, array $data = [])\r\n    {\r\n        // First we need to parse the view, which could either be a string or an array\r\n        // containing both an HTML and plain text versions of the view which should\r\n        // be used when sending an e-mail. We will extract both of them out here.\r\n        [$view, $plain, $raw] = $this->parseView($view);\r\n\r\n        $data['message'] = $this->createMessage();\r\n\r\n        return $this->renderView($view ?: $plain, $data);\r\n    }\r\n\r\n    /**\r\n     * Send a new message using a view.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable|string|array  $view\r\n     * @param  array  $data\r\n     * @param  \\Closure|string|null  $callback\r\n     * @return void\r\n     */\r\n    public function send($view, array $data = [], $callback = null)\r\n    {\r\n        if ($view instanceof MailableContract) {\r\n            return $this->sendMailable($view);\r\n        }\r\n\r\n        // First we need to parse the view, which could either be a string or an array\r\n        // containing both an HTML and plain text versions of the view which should\r\n        // be used when sending an e-mail. We will extract both of them out here.\r\n        [$view, $plain, $raw] = $this->parseView($view);\r\n\r\n        $data['message'] = $message = $this->createMessage();\r\n\r\n        // Once we have retrieved the view content for the e-mail we will set the body\r\n        // of this message using the HTML type, which will provide a simple wrapper\r\n        // to creating view based emails that are able to receive arrays of data.\r\n        $callback($message);\r\n\r\n        $this->addContent($message, $view, $plain, $raw, $data);\r\n\r\n        // If a global \"to\" address has been set, we will set that address on the mail\r\n        // message. This is primarily useful during local development in which each\r\n        // message should be delivered into a single mail address for inspection.\r\n        if (isset($this->to['address'])) {\r\n            $this->setGlobalToAndRemoveCcAndBcc($message);\r\n        }\r\n\r\n        // Next we will determine if the message should be sent. We give the developer\r\n        // one final chance to stop this message and then we will send it to all of\r\n        // its recipients. We will then fire the sent event for the sent message.\r\n        $swiftMessage = $message->getSwiftMessage();\r\n\r\n        if ($this->shouldSendMessage($swiftMessage, $data)) {\r\n            $this->sendSwiftMessage($swiftMessage);\r\n\r\n            $this->dispatchSentEvent($message, $data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the given mailable.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable\r\n     * @return mixed\r\n     */\r\n    protected function sendMailable(MailableContract $mailable)\r\n    {\r\n        return $mailable instanceof ShouldQueue\r\n                        ? $mailable->mailer($this->name)->queue($this->queue)\r\n                        : $mailable->mailer($this->name)->send($this);\r\n    }\r\n\r\n    /**\r\n     * Parse the given view name or array.\r\n     *\r\n     * @param  string|array  $view\r\n     * @return array\r\n     *\r\n     * @throws \\InvalidArgumentException\r\n     */\r\n    protected function parseView($view)\r\n    {\r\n        if (is_string($view)) {\r\n            return [$view, null, null];\r\n        }\r\n\r\n        // If the given view is an array with numeric keys, we will just assume that\r\n        // both a \"pretty\" and \"plain\" view were provided, so we will return this\r\n        // array as is, since it should contain both views with numerical keys.\r\n        if (is_array($view) && isset($view[0])) {\r\n            return [$view[0], $view[1], null];\r\n        }\r\n\r\n        // If this view is an array but doesn't contain numeric keys, we will assume\r\n        // the views are being explicitly specified and will extract them via the\r\n        // named keys instead, allowing the developers to use one or the other.\r\n        if (is_array($view)) {\r\n            return [\r\n                $view['html'] ?? null,\r\n                $view['text'] ?? null,\r\n                $view['raw'] ?? null,\r\n            ];\r\n        }\r\n\r\n        throw new InvalidArgumentException('Invalid view.');\r\n    }\r\n\r\n    /**\r\n     * Add the content to a given message.\r\n     *\r\n     * @param  \\Illuminate\\Mail\\Message  $message\r\n     * @param  string  $view\r\n     * @param  string  $plain\r\n     * @param  string  $raw\r\n     * @param  array  $data\r\n     * @return void\r\n     */\r\n    protected function addContent($message, $view, $plain, $raw, $data)\r\n    {\r\n        if (isset($view)) {\r\n            $message->setBody($this->renderView($view, $data), 'text/html');\r\n        }\r\n\r\n        if (isset($plain)) {\r\n            $method = isset($view) ? 'addPart' : 'setBody';\r\n\r\n            $message->$method($this->renderView($plain, $data) ?: ' ', 'text/plain');\r\n        }\r\n\r\n        if (isset($raw)) {\r\n            $method = (isset($view) || isset($plain)) ? 'addPart' : 'setBody';\r\n\r\n            $message->$method($raw, 'text/plain');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the given view.\r\n     *\r\n     * @param  string  $view\r\n     * @param  array  $data\r\n     * @return string\r\n     */\r\n    protected function renderView($view, $data)\r\n    {\r\n        return $view instanceof Htmlable\r\n                        ? $view->toHtml()\r\n                        : $this->views->make($view, $data)->render();\r\n    }\r\n\r\n    /**\r\n     * Set the global \"to\" address on the given message.\r\n     *\r\n     * @param  \\Illuminate\\Mail\\Message  $message\r\n     * @return void\r\n     */\r\n    protected function setGlobalToAndRemoveCcAndBcc($message)\r\n    {\r\n        $message->to($this->to['address'], $this->to['name'], true);\r\n        $message->cc(null, null, true);\r\n        $message->bcc(null, null, true);\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $view\r\n     * @param  string|null  $queue\r\n     * @return mixed\r\n     *\r\n     * @throws \\InvalidArgumentException\r\n     */\r\n    public function queue($view, $queue = null)\r\n    {\r\n        if (! $view instanceof MailableContract) {\r\n            throw new InvalidArgumentException('Only mailables may be queued.');\r\n        }\r\n\r\n        if (is_string($queue)) {\r\n            $view->onQueue($queue);\r\n        }\r\n\r\n        return $view->mailer($this->name)->queue($this->queue);\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending on the given queue.\r\n     *\r\n     * @param  string  $queue\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $view\r\n     * @return mixed\r\n     */\r\n    public function onQueue($queue, $view)\r\n    {\r\n        return $this->queue($view, $queue);\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending on the given queue.\r\n     *\r\n     * This method didn't match rest of framework's \"onQueue\" phrasing. Added \"onQueue\".\r\n     *\r\n     * @param  string  $queue\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $view\r\n     * @return mixed\r\n     */\r\n    public function queueOn($queue, $view)\r\n    {\r\n        return $this->onQueue($queue, $view);\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending after (n) seconds.\r\n     *\r\n     * @param  \\DateTimeInterface|\\DateInterval|int  $delay\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $view\r\n     * @param  string|null  $queue\r\n     * @return mixed\r\n     *\r\n     * @throws \\InvalidArgumentException\r\n     */\r\n    public function later($delay, $view, $queue = null)\r\n    {\r\n        if (! $view instanceof MailableContract) {\r\n            throw new InvalidArgumentException('Only mailables may be queued.');\r\n        }\r\n\r\n        return $view->mailer($this->name)->later(\r\n            $delay, is_null($queue) ? $this->queue : $queue\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Queue a new e-mail message for sending after (n) seconds on the given queue.\r\n     *\r\n     * @param  string  $queue\r\n     * @param  \\DateTimeInterface|\\DateInterval|int  $delay\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $view\r\n     * @return mixed\r\n     */\r\n    public function laterOn($queue, $delay, $view)\r\n    {\r\n        return $this->later($delay, $view, $queue);\r\n    }\r\n\r\n    /**\r\n     * Create a new message instance.\r\n     *\r\n     * @return \\Illuminate\\Mail\\Message\r\n     */\r\n    protected function createMessage()\r\n    {\r\n        $message = new Message($this->swift->createMessage('message'));\r\n\r\n        // If a global from address has been specified we will set it on every message\r\n        // instance so the developer does not have to repeat themselves every time\r\n        // they create a new message. We'll just go ahead and push this address.\r\n        if (! empty($this->from['address'])) {\r\n            $message->from($this->from['address'], $this->from['name']);\r\n        }\r\n\r\n        // When a global reply address was specified we will set this on every message\r\n        // instance so the developer does not have to repeat themselves every time\r\n        // they create a new message. We will just go ahead and push this address.\r\n        if (! empty($this->replyTo['address'])) {\r\n            $message->replyTo($this->replyTo['address'], $this->replyTo['name']);\r\n        }\r\n\r\n        if (! empty($this->returnPath['address'])) {\r\n            $message->returnPath($this->returnPath['address']);\r\n        }\r\n\r\n        return $message;\r\n    }\r\n\r\n    /**\r\n     * Send a Swift Message instance.\r\n     *\r\n     * @param  \\Swift_Message  $message\r\n     * @return int|null\r\n     */\r\n    protected function sendSwiftMessage($message)\r\n    {\r\n        $this->failedRecipients = [];\r\n\r\n        try {\r\n            return $this->swift->send($message, $this->failedRecipients);\r\n        } finally {\r\n            $this->forceReconnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the message can be sent.\r\n     *\r\n     * @param  \\Swift_Message  $message\r\n     * @param  array  $data\r\n     * @return bool\r\n     */\r\n    protected function shouldSendMessage($message, $data = [])\r\n    {\r\n        if (! $this->events) {\r\n            return true;\r\n        }\r\n\r\n        return $this->events->until(\r\n            new MessageSending($message, $data)\r\n        ) !== false;\r\n    }\r\n\r\n    /**\r\n     * Dispatch the message sent event.\r\n     *\r\n     * @param  \\Illuminate\\Mail\\Message  $message\r\n     * @param  array  $data\r\n     * @return void\r\n     */\r\n    protected function dispatchSentEvent($message, $data = [])\r\n    {\r\n        if ($this->events) {\r\n            $this->events->dispatch(\r\n                new MessageSent($message->getSwiftMessage(), $data)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force the transport to re-connect.\r\n     *\r\n     * This will prevent errors in daemon queue situations.\r\n     *\r\n     * @return void\r\n     */\r\n    protected function forceReconnection()\r\n    {\r\n        $this->getSwiftMailer()->getTransport()->stop();\r\n    }\r\n\r\n    /**\r\n     * Get the array of failed recipients.\r\n     *\r\n     * @return array\r\n     */\r\n    public function failures()\r\n    {\r\n        return $this->failedRecipients;\r\n    }\r\n\r\n    /**\r\n     * Get the Swift Mailer instance.\r\n     *\r\n     * @return \\Swift_Mailer\r\n     */\r\n    public function getSwiftMailer()\r\n    {\r\n        return $this->swift;\r\n    }\r\n\r\n    /**\r\n     * Get the view factory instance.\r\n     *\r\n     * @return \\Illuminate\\Contracts\\View\\Factory\r\n     */\r\n    public function getViewFactory()\r\n    {\r\n        return $this->views;\r\n    }\r\n\r\n    /**\r\n     * Set the Swift Mailer instance.\r\n     *\r\n     * @param  \\Swift_Mailer  $swift\r\n     * @return void\r\n     */\r\n    public function setSwiftMailer($swift)\r\n    {\r\n        $this->swift = $swift;\r\n    }\r\n\r\n    /**\r\n     * Set the queue manager instance.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Queue\\Factory  $queue\r\n     * @return $this\r\n     */\r\n    public function setQueue(QueueContract $queue)\r\n    {\r\n        $this->queue = $queue;\r\n\r\n        return $this;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Mail/Mailer.php b/vendor/laravel/framework/src/Illuminate/Mail/Mailer.php
--- a/vendor/laravel/framework/src/Illuminate/Mail/Mailer.php	
+++ b/vendor/laravel/framework/src/Illuminate/Mail/Mailer.php	
@@ -398,7 +398,7 @@
     /**
      * Queue a new e-mail message for sending.
      *
-     * @param  \Illuminate\Contracts\Mail\Mailable  $view
+     * @param  \Illuminate\Contracts\Mail\Mailable|string|array  $view
      * @param  string|null  $queue
      * @return mixed
      *
Index: vendor/laravel/framework/src/Illuminate/Contracts/Cache/Lock.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Contracts\\Cache;\r\n\r\ninterface Lock\r\n{\r\n    /**\r\n     * Attempt to acquire the lock.\r\n     *\r\n     * @param  callable|null  $callback\r\n     * @return mixed\r\n     */\r\n    public function get($callback = null);\r\n\r\n    /**\r\n     * Attempt to acquire the lock for the given number of seconds.\r\n     *\r\n     * @param  int  $seconds\r\n     * @param  callable|null  $callback\r\n     * @return bool\r\n     */\r\n    public function block($seconds, $callback = null);\r\n\r\n    /**\r\n     * Release the lock.\r\n     *\r\n     * @return void\r\n     */\r\n    public function release();\r\n\r\n    /**\r\n     * Returns the current owner of the lock.\r\n     *\r\n     * @return string\r\n     */\r\n    public function owner();\r\n\r\n    /**\r\n     * Releases this lock in disregard of ownership.\r\n     *\r\n     * @return void\r\n     */\r\n    public function forceRelease();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Contracts/Cache/Lock.php b/vendor/laravel/framework/src/Illuminate/Contracts/Cache/Lock.php
--- a/vendor/laravel/framework/src/Illuminate/Contracts/Cache/Lock.php	
+++ b/vendor/laravel/framework/src/Illuminate/Contracts/Cache/Lock.php	
@@ -24,7 +24,7 @@
     /**
      * Release the lock.
      *
-     * @return void
+     * @return bool
      */
     public function release();
 
Index: vendor/laravel/framework/src/Illuminate/Mail/PendingMail.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace Illuminate\\Mail;\r\n\r\nuse Illuminate\\Contracts\\Mail\\Mailable as MailableContract;\r\nuse Illuminate\\Contracts\\Mail\\Mailer as MailerContract;\r\nuse Illuminate\\Contracts\\Translation\\HasLocalePreference;\r\n\r\nclass PendingMail\r\n{\r\n    /**\r\n     * The mailer instance.\r\n     *\r\n     * @var \\Illuminate\\Contracts\\Mail\\Mailer\r\n     */\r\n    protected $mailer;\r\n\r\n    /**\r\n     * The locale of the message.\r\n     *\r\n     * @var string\r\n     */\r\n    protected $locale;\r\n\r\n    /**\r\n     * The \"to\" recipients of the message.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $to = [];\r\n\r\n    /**\r\n     * The \"cc\" recipients of the message.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $cc = [];\r\n\r\n    /**\r\n     * The \"bcc\" recipients of the message.\r\n     *\r\n     * @var array\r\n     */\r\n    protected $bcc = [];\r\n\r\n    /**\r\n     * Create a new mailable mailer instance.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailer  $mailer\r\n     * @return void\r\n     */\r\n    public function __construct(MailerContract $mailer)\r\n    {\r\n        $this->mailer = $mailer;\r\n    }\r\n\r\n    /**\r\n     * Set the locale of the message.\r\n     *\r\n     * @param  string  $locale\r\n     * @return $this\r\n     */\r\n    public function locale($locale)\r\n    {\r\n        $this->locale = $locale;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the recipients of the message.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return $this\r\n     */\r\n    public function to($users)\r\n    {\r\n        $this->to = $users;\r\n\r\n        if (! $this->locale && $users instanceof HasLocalePreference) {\r\n            $this->locale($users->preferredLocale());\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the recipients of the message.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return $this\r\n     */\r\n    public function cc($users)\r\n    {\r\n        $this->cc = $users;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Set the recipients of the message.\r\n     *\r\n     * @param  mixed  $users\r\n     * @return $this\r\n     */\r\n    public function bcc($users)\r\n    {\r\n        $this->bcc = $users;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * Send a new mailable message instance.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable\r\n     *\r\n     * @return mixed\r\n     */\r\n    public function send(MailableContract $mailable)\r\n    {\r\n        return $this->mailer->send($this->fill($mailable));\r\n    }\r\n\r\n    /**\r\n     * Send a mailable message immediately.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable\r\n     * @return mixed\r\n     * @deprecated Use send() instead.\r\n     */\r\n    public function sendNow(MailableContract $mailable)\r\n    {\r\n        return $this->mailer->send($this->fill($mailable));\r\n    }\r\n\r\n    /**\r\n     * Push the given mailable onto the queue.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable\r\n     * @return mixed\r\n     */\r\n    public function queue(MailableContract $mailable)\r\n    {\r\n        return $this->mailer->queue($this->fill($mailable));\r\n    }\r\n\r\n    /**\r\n     * Deliver the queued message after the given delay.\r\n     *\r\n     * @param  \\DateTimeInterface|\\DateInterval|int  $delay\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable\r\n     * @return mixed\r\n     */\r\n    public function later($delay, MailableContract $mailable)\r\n    {\r\n        return $this->mailer->later($delay, $this->fill($mailable));\r\n    }\r\n\r\n    /**\r\n     * Populate the mailable with the addresses.\r\n     *\r\n     * @param  \\Illuminate\\Contracts\\Mail\\Mailable  $mailable\r\n     * @return \\Illuminate\\Mail\\Mailable\r\n     */\r\n    protected function fill(MailableContract $mailable)\r\n    {\r\n        return tap($mailable->to($this->to)\r\n            ->cc($this->cc)\r\n            ->bcc($this->bcc), function (MailableContract $mailable) {\r\n                if ($this->locale) {\r\n                    $mailable->locale($this->locale);\r\n                }\r\n            });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/laravel/framework/src/Illuminate/Mail/PendingMail.php b/vendor/laravel/framework/src/Illuminate/Mail/PendingMail.php
--- a/vendor/laravel/framework/src/Illuminate/Mail/PendingMail.php	
+++ b/vendor/laravel/framework/src/Illuminate/Mail/PendingMail.php	
@@ -114,7 +114,6 @@
      * Send a new mailable message instance.
      *
      * @param  \Illuminate\Contracts\Mail\Mailable  $mailable
-     *
      * @return mixed
      */
     public function send(MailableContract $mailable)
